<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kun少侠</title>
  
  <subtitle>Learning by doing.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-26T15:31:33.451Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Kun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>勇冠三军当去病，文武双全唯弃疾</title>
    <link href="http://yoursite.com/post/b55ce8c8.html"/>
    <id>http://yoursite.com/post/b55ce8c8.html</id>
    <published>2020-02-26T11:40:54.000Z</published>
    <updated>2020-02-26T15:31:33.451Z</updated>
    
    <content type="html"><![CDATA[<p>​                                                               思汉之霍去病勇冠三军，惜其天妒英才<br>​                                                               念宋时辛弃疾文武双全，叹之壮志未酬</p><section data-mpa-template="t" mpa-from-tpl="t" style="margin-left: 0.5em;margin-right: 0.5em;">  <section data-mpa-template-id="1356344" data-mpa-color="null" data-mpa-category="fav" mpa-from-tpl="t">    <section data-id="86043" style="line-height: 25.6px;font-family: 微软雅黑;border-width: 0px;border-style: none;" mpa-from-tpl="t">      <section style="margin-top: 20px;margin-bottom: 20px;padding: 15px 20px;border-radius: 20px;word-break: break-all;border-width: 3px;border-style: groove;border-color: rgb(237, 237, 237);" mpa-from-tpl="t">        <p style="font-size: 16px;line-height: 1.75em;">          <span style="font-size: 14px;color: rgb(71, 71, 71);letter-spacing: 2px;" mpa-is-content="t"><img data-ratio="0.7016666666666667" data-type="jpg" data-w="600" style data-src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=3889996353,72546810&fm=11&gp=0.jpg" class="lozad"></span>           <mpchecktext contenteditable="false" id="1582717336042_0.18890780535112794">          </mpchecktext>        </p>        <p style="font-size: 16px;line-height: 1.75em;margin-left: 0.5em;margin-right: 0.5em;">          <span style="font-size: 14px;color: rgb(71, 71, 71);letter-spacing: 2px;">2020年<strong>霍去病</strong>和<strong>辛弃疾</strong>取代秦琼和尉迟恭，成为家家户户的左右门神，护佑着我华夏儿女，望我们早日渡过难关！<mpchecktext contenteditable="false" id="1582717336043_0.9120030051780226">            </mpchecktext>鲲鲲我对二位大佬的人生履历十分好奇，查阅资料后发现他们真的是当之无愧的华夏守护神！<mpchecktext contenteditable="false" id="1582717336044_0.4083789808966902">            </mpchecktext><br></span>        </p>      </section>    </section>  </section></section><p style="margin-left: 0.5em;margin-right: 0.5em;">  <span style="letter-spacing: 2px;"><br mpa-from-tpl="t"></span></p><section mpa-from-tpl="t" style="font-variant-numeric: normal;font-variant-east-asian: normal;white-space: normal;background-color: rgb(255, 255, 255);letter-spacing: 0.544px;line-height: 27.2px;widows: 1;margin-left: 0.5em;margin-right: 0.5em;">  <section mpa-from-tpl="t" style="margin-right: auto;margin-left: auto;width: 50px;height: 49px;background-image: url(&quot;https://mmbiz.qpic.cn/mmbiz_gif/QKVKKxOhTQYEUCflqZibgvWZDdYVfzpPKfjv4pYqViagOqpzHCtU7NO4fgSziarPmPJzrQNXiaA7MyyL2KL7q9FyZQ/640&quot;);background-size: 100%;background-repeat: no-repeat;">    <section mpa-from-tpl="t" style="margin-right: auto;margin-left: auto;text-align: center;line-height: 48px;color: rgb(255, 255, 255);font-size: 18px;">      <section style="clear: both;min-height: 1em;border-width: 0px;border-style: initial;border-color: initial;">        <span style="letter-spacing: 2px;">一<mpchecktext contenteditable="false" id="1582717336045_0.49058341929885385">          </mpchecktext></span>      </section>    </section>  </section></section><section mpa-from-tpl="t" style="font-variant-numeric: normal;font-variant-east-asian: normal;white-space: normal;background-color: rgb(255, 255, 255);letter-spacing: 0.544px;line-height: 27.2px;widows: 1;margin-left: 0.5em;margin-right: 0.5em;">  <section style="text-align: center;width: auto;">    <section data-width="100%" mpa-from-tpl="t" style="width: 677px;display: inline-block;">      <section mpa-from-tpl="t" style="display: inline-block;">        <section mpa-from-tpl="t" style="padding: 10px 20px 11px;color: rgb(63, 62, 63);font-size: 16px;letter-spacing: 1.5px;background-image: url(&quot;https://mmbiz.qpic.cn/mmbiz_png/QKVKKxOhTQYEUCflqZibgvWZDdYVfzpPKF4mAdEPjvFbKFbUicI0siacARQggia2kZfXzyDYwJW7mgqgpHqCVZjAgQ/640&quot;);background-size: 100% 100%;background-repeat: no-repeat;">          <span style="font-size: 13px;letter-spacing: 2px;">思汉之<strong>霍去病</strong>勇冠三军，惜其天妒英才<mpchecktext contenteditable="false" id="1582717336046_0.4249063344578996">            </mpchecktext></span>        </section>      </section>    </section>  </section></section><section data-mpa-template="t" mpa-from-tpl="t" style="margin-left: 0.5em;margin-right: 0.5em;">  <section data-mpa-template-id="1356344" data-mpa-color="null" data-mpa-category="fav" mpa-from-tpl="t">    <section data-id="86043" style="line-height: 25.6px;font-family: 微软雅黑;border-width: 0px;border-style: none;" mpa-from-tpl="t">      <section style="margin-top: 20px;margin-bottom: 20px;padding: 15px 20px;border-radius: 20px;word-break: break-all;border-width: 3px;border-style: groove;border-color: rgb(237, 237, 237);" mpa-from-tpl="t">        <p style="font-size: 16px;line-height: 1.75em;">          <span style="font-size: 14px;color: rgb(71, 71, 71);letter-spacing: 2px;"><img style="width: 100%;height: auto;" data-type="jpeg" data-ratio="0.6361788617886179" data-w="492" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/WO2hoibPMGkVhibnauWXvQIj3ZCmfWNPq0MfsibbGDFI0zX8W295JXFXn9TibIfXiahgKY2lsXoUvwriaFSBdK9qEJkw/640?wx_fmt=jpeg" class="lozad"></span>        </p>      </section>    </section>  </section></section><section style="margin-left: 0.5em;margin-right: 0.5em;line-height: 1.75em;">  <span style="letter-spacing: 2px;"><span style="font-size: 14px;background-color: rgb(255, 255, 255);">公元</span><strong style="font-size: 14px;letter-spacing: 1px;background-color: rgb(255, 255, 255);">前140年</strong><span style="font-size: 14px;background-color: rgb(255, 255, 255);">，西汉的第七位皇帝<strong>刘彻</strong>登基，也就是我们熟知的</span><strong style="font-size: 14px;letter-spacing: 1px;background-color: rgb(255, 255, 255);">汉武大帝</strong><span style="font-size: 14px;background-color: rgb(255, 255, 255);">，此时武帝</span><strong style="font-size: 14px;letter-spacing: 1px;background-color: rgb(255, 255, 255);">17岁</strong><span style="font-size: 14px;background-color: rgb(255, 255, 255);">，以“</span><strong style="font-size: 14px;letter-spacing: 1px;background-color: rgb(255, 255, 255);">建元</strong><span style="font-size: 14px;background-color: rgb(255, 255, 255);">”为年号，自此中国历史以年号纪元。<mpchecktext contenteditable="false" id="1582717336048_0.37246618046920177">    </mpchecktext>建元有创始的寓意，这正表明了一代雄主锐意变革的壮志，一个大世即将拉开帷幕！<mpchecktext contenteditable="false" id="1582717336047_0.7000995005790152">    </mpchecktext>同一年，武帝的同胞长姐</span><strong style="font-size: 14px;letter-spacing: 1px;background-color: rgb(255, 255, 255);">平阳公主</strong><span style="font-size: 14px;background-color: rgb(255, 255, 255);">府中，女奴</span><strong style="font-size: 14px;letter-spacing: 1px;background-color: rgb(255, 255, 255);">卫少儿</strong><span style="font-size: 14px;background-color: rgb(255, 255, 255);">生下了一个</span><strong style="font-size: 14px;letter-spacing: 1px;background-color: rgb(255, 255, 255);">私生子</strong><span style="font-size: 14px;background-color: rgb(255, 255, 255);">。<mpchecktext contenteditable="false" id="1582717336050_0.08181089921834839">    </mpchecktext>卫少儿是谁呢？<mpchecktext contenteditable="false" id="1582717336049_0.00009051888291411458">    </mpchecktext>或许很多人不知晓，她就是</span><strong style="font-size: 14px;letter-spacing: 1px;background-color: rgb(255, 255, 255);">卫子夫</strong><span style="font-size: 14px;background-color: rgb(255, 255, 255);">和</span><strong style="font-size: 14px;letter-spacing: 1px;background-color: rgb(255, 255, 255);">卫青的</strong><span style="font-size: 14px;background-color: rgb(255, 255, 255);">二姐，而这个私生子就是</span><strong style="font-size: 14px;letter-spacing: 1px;background-color: rgb(255, 255, 255);">霍去病</strong><span style="font-size: 14px;background-color: rgb(255, 255, 255);">。<mpchecktext contenteditable="false" id="1582717336051_0.4552447045376167">    </mpchecktext></span></span></section><section data-mpa-template="t" mpa-from-tpl="t" style="margin-left: 0.5em;margin-right: 0.5em;">  <section data-mpa-template-id="1356344" data-mpa-color="null" data-mpa-category="fav" mpa-from-tpl="t">    <section data-id="86043" style="line-height: 25.6px;font-family: 微软雅黑;border-width: 0px;border-style: none;" mpa-from-tpl="t">      <section style="margin-top: 20px;margin-bottom: 20px;padding: 15px 20px;border-radius: 20px;word-break: break-all;border-width: 3px;border-style: groove;border-color: rgb(237, 237, 237);" mpa-from-tpl="t">        <p style="font-size: 16px;line-height: 1.75em;text-align: center;">          <span style="font-size: 14px;color: rgb(71, 71, 71);letter-spacing: 2px;" mpa-is-content="t"><img data-backh="448" data-backw="280" data-ratio="1.6" data-type="jpeg" data-w="500" style="width: 100%;height: auto;" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/WO2hoibPMGkUtLKNkIPYJaLjsv4ibwSPJOD9UM6icHvf27o3hIRt1CZzmth362NNBdtDM7SfmrADbm2pELxCq5hcg/640?wx_fmt=jpeg" class="lozad"></span>        </p>        <p style="font-size: 16px;line-height: 1.75em;text-align: justify;margin-left: 0.5em;margin-right: 0.5em;">          <span style="font-size: 14px;color: rgb(71, 71, 71);letter-spacing: 2px;">汉武帝建元二年（前139年），卫子夫得幸武帝，入宫一年后日益深得天子宠爱。<mpchecktext contenteditable="false" id="1582717336052_0.34563887125905257">            </mpchecktext>在霍去病十一二岁的时候，卫子夫被立为当朝皇后，卫子夫一家因此贵幸。<mpchecktext contenteditable="false" id="1582717336053_0.6613712275355508">            </mpchecktext></span>        </p>      </section>    </section>  </section></section><section data-mpa-template="t" mpa-from-tpl="t" style="margin-left: 0.5em;margin-right: 0.5em;">  <section data-mpa-template-id="1356344" data-mpa-color="null" data-mpa-category="fav" mpa-from-tpl="t">    <section data-id="86043" style="line-height: 25.6px;font-family: 微软雅黑;border-width: 0px;border-style: none;" mpa-from-tpl="t">      <section style="margin-top: 20px;margin-bottom: 20px;padding: 15px 20px;border-radius: 20px;word-break: break-all;border-width: 3px;border-style: groove;border-color: rgb(237, 237, 237);" mpa-from-tpl="t">        <p style="font-size: 16px;line-height: 1.75em;">          <span style="font-size: 14px;color: rgb(71, 71, 71);letter-spacing: 2px;" mpa-is-content="t"><img data-ratio="0.5474452554744526" data-type="jpeg" data-w="548" style data-src="https://mmbiz.qpic.cn/mmbiz_jpg/WO2hoibPMGkVqLfSs708Wet4T6cK2hREF3KDicj8DymibrxuCVM9qoZNVhnO1Q0sSRlzZjoo2JB1p9USDlG9tVzwg/640?wx_fmt=jpeg" class="lozad"></span>           <mpchecktext contenteditable="false" id="1582717336054_0.6923606624545331">          </mpchecktext>        </p>        <p style="font-size: 16px;line-height: 1.75em;">          <br>        </p>        <p style="margin: 0px 0px 10px;padding: 0px;clear: both;max-width: 100%;min-height: 1em;color: rgb(51, 51, 51);font-family: 微软雅黑;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: justify;text-indent: 0px;text-transform: none;white-space: normal;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;background-color: rgb(255, 255, 255);text-decoration-style: initial;text-decoration-color: initial;font-size: 16px;line-height: 1.75em;overflow-wrap: break-word !important;box-sizing: border-box !important;">          <span style="margin: 0px;padding: 0px;max-width: 100%;font-size: 14px;color: rgb(71, 71, 71);letter-spacing: 2px;overflow-wrap: break-word !important;box-sizing: border-box !important;">霍去病虽出身卑微，但在年幼之时便进入上流社会，从小就能受到良好的教育，爱屋及乌之下，武帝很是喜欢这个善于骑射的少年郎，甚至想要亲自教他孙吴兵法，但被霍去病以“战争只用看方针策略即可，要创造性地去指挥作战，无需拘泥于古法”的理由给无情的拒绝掉。<mpchecktext contenteditable="false" id="1582717336055_0.3618650676197306">            </mpchecktext></span>        </p>        <p style="margin: 0px 0px 10px;padding: 0px;clear: both;max-width: 100%;min-height: 1em;color: rgb(51, 51, 51);font-family: 微软雅黑;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: justify;text-indent: 0px;text-transform: none;white-space: normal;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;background-color: rgb(255, 255, 255);text-decoration-style: initial;text-decoration-color: initial;font-size: 16px;line-height: 1.75em;overflow-wrap: break-word !important;box-sizing: border-box !important;">          <span style="margin: 0px;padding: 0px;max-width: 100%;font-size: 14px;color: rgb(71, 71, 71);letter-spacing: 2px;overflow-wrap: break-word !important;box-sizing: border-box !important;"><strong style="margin: 0px;padding: 0px;max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;">《史记·卫将军骠骑列传》</strong>：<mpchecktext contenteditable="false" id="1582717336058_0.6104235130422551">            </mpchecktext>骠骑将军为人少言不泄，有气敢任。<mpchecktext contenteditable="false" id="1582717336056_0.24401851346771242">            </mpchecktext>天子尝欲教之孙吴兵法，对曰：<mpchecktext contenteditable="false" id="1582717336059_0.1510066571683928">            </mpchecktext>“顾方略何如耳，不至学古兵法。<mpchecktext contenteditable="false" id="1582717336057_0.5550563724281807">            </mpchecktext></span>        </p>        <p style="margin: 0px 0px 10px;padding: 0px;clear: both;max-width: 100%;min-height: 1em;color: rgb(51, 51, 51);font-family: 微软雅黑;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: justify;text-indent: 0px;text-transform: none;white-space: normal;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;background-color: rgb(255, 255, 255);text-decoration-style: initial;text-decoration-color: initial;font-size: 16px;line-height: 1.75em;overflow-wrap: break-word !important;box-sizing: border-box !important;">          <span style="margin: 0px;padding: 0px;max-width: 100%;letter-spacing: 2px;overflow-wrap: break-word !important;box-sizing: border-box !important;"><span mpa-is-content="t" style="margin: 0px;padding: 0px;max-width: 100%;font-size: 14px;color: rgb(71, 71, 71);overflow-wrap: break-word !important;box-sizing: border-box !important;">大佬就是大佬，果然</span><span style="margin: 0px;padding: 0px;max-width: 100%;color: rgb(71, 71, 71);font-size: 14px;overflow-wrap: break-word !important;box-sizing: border-box !important;">不同凡响，后来果然用吊打匈奴的实际战果证明了其堪称完美的军事能力。<mpchecktext contenteditable="false" id="1582717336060_0.21649067870765748">            </mpchecktext></span></span>          <span style="color: rgb(71, 71, 71);font-size: 14px;margin: 0px;padding: 0px;max-width: 100%;letter-spacing: 2px;overflow-wrap: break-word !important;box-sizing: border-box !important;">从小深受武帝喜爱，这是霍去病日后能早早开启传奇人生的先决条件，也是千年之后的辛弃疾所享受不到的待遇。<mpchecktext contenteditable="false" id="1582717336061_0.9978190743319901">            </mpchecktext></span>        </p>        <p style="margin: 0px 0px 10px;padding: 0px;clear: both;max-width: 100%;min-height: 1em;color: rgb(51, 51, 51);font-family: 微软雅黑;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: justify;text-indent: 0px;text-transform: none;white-space: normal;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;background-color: rgb(255, 255, 255);text-decoration-style: initial;text-decoration-color: initial;font-size: 16px;line-height: 1.75em;overflow-wrap: break-word !important;box-sizing: border-box !important;">          <span style="margin: 0px;padding: 0px;max-width: 100%;font-size: 14px;color: rgb(71, 71, 71);letter-spacing: 2px;overflow-wrap: break-word !important;box-sizing: border-box !important;">这是一个<strong style="margin: 0px;padding: 0px;max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;">崇勇</strong><strong style="margin: 0px;padding: 0px;max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;">尙武</strong>的朝代；<mpchecktext contenteditable="false" id="1582717336062_0.6092006200459501">            </mpchecktext>这是一个</span>          <span style="margin: 0px;padding: 0px;max-width: 100%;color: rgb(71, 71, 71);font-size: 14px;letter-spacing: 2px;overflow-wrap: break-word !important;box-sizing: border-box !important;">寇可为，我复亦为；<mpchecktext contenteditable="false" id="1582717336064_0.8292348874898847">            </mpchecktext>寇可往，我复亦往的朝代；<mpchecktext contenteditable="false" id="1582717336065_0.2405193279338793">            </mpchecktext>这是一个明犯强汉者，虽远必诛的朝代；<mpchecktext contenteditable="false" id="1582717336066_0.2171524421911586">            </mpchecktext>这是一个四方夷狄不敢小视中国的朝代。<mpchecktext contenteditable="false" id="1582717336063_0.9560656965569063">            </mpchecktext>武帝一朝大破匈奴，远征大宛，降服西域，收复南越，吞并朝鲜，大汉疆土东抵日本海、南吞交趾、西逾葱岭、北达阴山，</span>          <span style="letter-spacing: 2px;"><strong style="margin: 0px;padding: 0px;max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;color: rgb(71, 71, 71);font-size: 14px;letter-spacing: 1px;">汉之魂</strong><span style="margin: 0px;padding: 0px;max-width: 100%;color: rgb(71, 71, 71);font-size: 14px;overflow-wrap: break-word !important;box-sizing: border-box !important;">将永垂不朽。<mpchecktext contenteditable="false" id="1582717336067_0.6756571326173684">            </mpchecktext></span></span>        </p>        <p style="margin: 0px;padding: 0px;clear: both;max-width: 100%;min-height: 1em;color: rgb(51, 51, 51);font-family: 微软雅黑;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: justify;text-indent: 0px;text-transform: none;white-space: normal;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;background-color: rgb(255, 255, 255);text-decoration-style: initial;text-decoration-color: initial;font-size: 16px;line-height: 1.75em;overflow-wrap: break-word !important;box-sizing: border-box !important;">          <span style="margin: 0px;padding: 0px;max-width: 100%;font-size: 14px;color: rgb(71, 71, 71);letter-spacing: 2px;overflow-wrap: break-word !important;box-sizing: border-box !important;">战争，或对于底层百姓来说或许是不幸的，但对于霍去病这样的热血男儿来说却是建功立业的大好时代，我们就一起来看看霍去病开挂的传奇人生吧！<mpchecktext contenteditable="false" id="1582717336068_0.6245539708351799">            </mpchecktext></span>        </p>      </section>    </section>  </section></section><section style="margin-left: 0.5em;margin-right: 0.5em;line-height: 1.75em;">  <br></section><section data-mpa-template="t" mpa-from-tpl="t" style="white-space: normal;background-color: rgb(255, 255, 255);margin-left: 0.5em;margin-right: 0.5em;">  <section label="Copyleft 2018 iPaiban All lefts Reserved （本样式已做版权保护，未经正式授权不允许任何第三方编辑器、企业、个人使用，违者必纠）" donone="shifuMouseDownPayStyle('shifu_bij_005')" mpa-from-tpl="t" style="margin: 0rem auto;color: rgb(0, 0, 0);font-size: medium;letter-spacing: 0.544px;line-height: 27.2px;widows: 1;border-width: initial;border-style: none;border-color: initial;">    <section mpa-from-tpl="t" style="margin-top: 20px;margin-bottom: 10px;margin-left: 20.2969px;text-align: center;">      <section mpa-from-tpl="t" style="display: inline-block;border-width: 1px;border-style: solid;border-color: rgb(62, 62, 62);border-radius: 0px;background-color: rgb(254, 226, 117);">        <section mpa-from-tpl="t" style="margin-top: -5px;margin-bottom: 3px;transform: translate3d(-3px, 0px, 0px);background-color: rgb(255, 255, 255);">          <section mpa-from-tpl="t" style="padding: 5px;display: inline-block;border-width: 1px;border-style: solid;border-color: rgb(62, 62, 62);border-radius: 0px;">            <section mpa-from-tpl="t" style="display: flex;justify-content: center;">              <section mpa-from-tpl="t" style="padding-right: 5px;padding-left: 5px;font-size: 14px;color: rgb(63, 63, 63);">                <p>                  <span style="color: rgb(0, 0, 0);"><strong mpa-from-tpl="t"><span mpa-is-content="t" style="font-size: 16px;">一战封侯<mpchecktext contenteditable="false" id="1582717336069_0.16718951249066238">                    </mpchecktext></span></strong></span>                </p>              </section>            </section>          </section>        </section>      </section>    </section>  </section></section><section style="margin-top: 5px;white-space: normal;background-color: rgb(255, 255, 255);line-height: 1.75em;text-align: center;margin-left: 0.5em;margin-right: 0.5em;">  <strong style="letter-spacing: 0px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;color: rgb(62, 62, 62);font-size: 16px;"><span style="color: rgb(26, 26, 26);font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;font-size: 15px;text-align: start;">&nbsp; &nbsp; &nbsp;&nbsp;</span></strong>  <span style="font-size: 14px;"><strong style="letter-spacing: 0px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;color: rgb(62, 62, 62);font-size: 16px;"><span style="color: rgb(26, 26, 26);font-family: -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;text-align: start;">&nbsp; &nbsp; &nbsp;&nbsp;借问大将谁，恐是霍嫖姚。<mpchecktext contenteditable="false" id="1582717336070_0.5709198834820477">    </mpchecktext></span></strong><strong style="letter-spacing: 0px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;color: rgb(62, 62, 62);font-size: 16px;"></strong><span style="letter-spacing: 0px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">&nbsp; &nbsp;&nbsp;<mpchecktext contenteditable="false" id="1582717336071_0.9131250999455574">    </mpchecktext></span></span>  <strong style="letter-spacing: 0px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;"></strong>  <strong style="letter-spacing: 0px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;"></strong></section><section style="margin-bottom: 5px;white-space: normal;background-color: rgb(255, 255, 255);line-height: 1.75em;text-align: right;margin-left: 0.5em;margin-right: 0.5em;">  <strong><span style="font-size: 15px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></strong>  <span style="font-size: 14px;"><strong>&nbsp; &nbsp; &nbsp; &nbsp; ——&nbsp; &nbsp;杜甫<mpchecktext contenteditable="false" id="1582717336072_0.12515036193507312">    </mpchecktext></strong></span></section><section mpa-from-tpl="t" style="margin-left: 0.5em;margin-right: 0.5em;">  <section data-mpa-template-id="1356344" data-mpa-color="null" data-mpa-category="fav" mpa-from-tpl="t">    <section data-id="86043" mpa-from-tpl="t">      <section mpa-from-tpl="t">        <section data-mpa-template="t" mpa-from-tpl="t">          <section data-mpa-template-id="1356344" data-mpa-color="null" data-mpa-category="fav" mpa-from-tpl="t">            <section data-id="86043" style="line-height: 25.6px;font-family: 微软雅黑;border-width: 0px;border-style: none;" mpa-from-tpl="t">              <section style="margin-top: 20px;margin-bottom: 20px;padding: 15px 20px;border-radius: 20px;word-break: break-all;border-width: 3px;border-style: groove;border-color: rgb(237, 237, 237);" mpa-from-tpl="t">                <p style="font-size: 16px;line-height: 1.75em;margin-left: 0.5em;margin-right: 0.5em;">                  <span style="font-size: 14px;color: rgb(71, 71, 71);letter-spacing: 2px;" mpa-is-content="t">元朔六年(前123年），这一年刘彻34岁，正值壮年，汉武帝再次筹划了对匈奴的一次大规模反击战，史称<strong>漠南之战</strong>。<mpchecktext contenteditable="false" id="1582717336073_0.8734555635248615">                    </mpchecktext><strong>17岁</strong>的霍去病主动请缨，武帝封他为“嫖姚校尉”随军出征，这是武帝特地给他初创的名号，“嫖”是轻捷的意思，“姚”是美好的意思。<mpchecktext contenteditable="false" id="1582717336076_0.6016097816418335">                    </mpchecktext>就是又轻又快又美！<mpchecktext contenteditable="false" id="1582717336074_0.00792304056770865">                    </mpchecktext>看着霍去病远去的身影，武帝或许回忆起当初自己登基时的场景吧，那年的他同样是17岁，也是如此的意气风发啊！<mpchecktext contenteditable="false" id="1582717336075_0.9553604365453547">                    </mpchecktext></span>                </p>                <p style="text-align: center;">                  <img class="rich_pages lozad" data-ratio="0.9637931034482758" data-s="300,640" data-type="jpeg" data-w="580" style data-src="https://mmbiz.qpic.cn/mmbiz_jpg/WO2hoibPMGkUtLKNkIPYJaLjsv4ibwSPJOu0hLtOgqH7kc57gZmZcBrz6Ga7U2AKmPqs3DFfPXApnkfgEwRsPeVA/640?wx_fmt=jpeg">                </p>                <p style="line-height: 1.75em;margin-left: 0.5em;margin-right: 0.5em;">                  <span style="color:#474747;"><span style="font-size: 14px;letter-spacing: 2px;">这次战役的主帅是他舅舅卫青，霍去病想大展身手，再三地要求卫青拨兵给他，吵着要单干。<mpchecktext contenteditable="false" id="1582717336077_0.44221142823114334">                    </mpchecktext>卫青架不住，就当哄小孩子了，便从三十万大军中点了<strong>八百骑兵</strong>让他统领。<mpchecktext contenteditable="false" id="1582717336078_0.04795982382534003">                    </mpchecktext>不说一般人，就是一些名将，也很难用数百兵卒折腾点东西出来。<mpchecktext contenteditable="false" id="1582717336079_0.7584802947577529">                    </mpchecktext>而大神就是大神，凭着他那丰富的想象力，霍去病率领自己的麾下骑兵在茫茫大漠上“<strong>长途奔袭</strong>”，奇袭敌方水晶，首战告捷，顺利拿到一血。<mpchecktext contenteditable="false" id="1582717336080_0.43291244401708484">                    </mpchecktext>此次战役斩敌共两千零八十二人，含匈奴相国等高级官员，俘虏了匈奴单于叔父罗姑比，“霍去病”这三个大字横空出世，将成为匈奴人的噩梦。<mpchecktext contenteditable="false" id="1582717336081_0.19536453911030827">                    </mpchecktext>霍去病两次功冠三军，武帝愈加喜爱，划定一千六百户封霍去病为<strong>冠军侯</strong>，后世之人皆以冠军为荣。<mpchecktext contenteditable="false" id="1582717336082_0.7696936120703732">                    </mpchecktext></span></span>                </p>              </section>            </section>          </section>        </section>        <section style="margin-left: 0.5em;margin-right: 0.5em;line-height: 1.75em;">          <br>        </section>      </section>    </section>  </section></section><section data-mpa-template="t" mpa-from-tpl="t" style="letter-spacing: 0px;white-space: normal;background-color: rgb(255, 255, 255);margin-left: 0.5em;margin-right: 0.5em;">  <section label="Copyleft 2018 iPaiban All lefts Reserved （本样式已做版权保护，未经正式授权不允许任何第三方编辑器、企业、个人使用，违者必纠）" donone="shifuMouseDownPayStyle('shifu_bij_005')" mpa-from-tpl="t" style="margin: 0rem auto;color: rgb(0, 0, 0);font-size: medium;letter-spacing: 0.544px;line-height: 27.2px;widows: 1;border-width: initial;border-style: none;border-color: initial;">    <section mpa-from-tpl="t" style="margin-top: 20px;margin-bottom: 10px;margin-left: 20.2969px;text-align: center;">      <section mpa-from-tpl="t" style="display: inline-block;border-width: 1px;border-style: solid;border-color: rgb(62, 62, 62);border-radius: 0px;background-color: rgb(254, 226, 117);">        <section mpa-from-tpl="t" style="margin-top: -5px;margin-bottom: 3px;transform: translate3d(-3px, 0px, 0px);background-color: rgb(255, 255, 255);">          <section mpa-from-tpl="t" style="padding: 5px;display: inline-block;border-width: 1px;border-style: solid;border-color: rgb(62, 62, 62);border-radius: 0px;">            <section mpa-from-tpl="t" style="display: flex;justify-content: center;">              <section mpa-from-tpl="t" style="padding-right: 5px;padding-left: 5px;font-size: 14px;color: rgb(63, 63, 63);">                <p>                  <span style="color: rgb(0, 0, 0);"><strong mpa-from-tpl="t"><span mpa-is-content="t" style="font-size: 16px;">两战河西<mpchecktext contenteditable="false" id="1582717336083_0.8375489999072563">                    </mpchecktext></span></strong></span>                </p>              </section>            </section>          </section>        </section>      </section>    </section>  </section></section><p style="letter-spacing: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-align: center;text-indent: 28px;margin-left: 0.5em;margin-right: 0.5em;">  <span style="font-family: arial, 宋体, sans-serif;font-size: 14px;"><strong>西归大河，列郡祁连<mpchecktext contenteditable="false" id="1582717336084_0.3423893788295991">    </mpchecktext></strong></span></p><p style="letter-spacing: 0px;white-space: normal;background-color: rgb(255, 255, 255);text-align: right;margin-left: 0.5em;margin-right: 0.5em;">  <strong><span style="font-family: arial, 宋体, sans-serif;font-size: 14px;text-align: start;text-indent: 28px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;—— 班固<mpchecktext contenteditable="false" id="1582717336085_0.3686053903184676">    </mpchecktext></span></strong></p><section data-mpa-template="t" mpa-from-tpl="t" style="margin-left: 0.5em;margin-right: 0.5em;">  <section data-mpa-template-id="1356344" data-mpa-color="null" data-mpa-category="fav" mpa-from-tpl="t">    <section data-id="86043" style="line-height: 25.6px;font-family: 微软雅黑;border-width: 0px;border-style: none;" mpa-from-tpl="t">      <section style="margin-top: 20px;margin-bottom: 20px;padding: 15px 20px;border-radius: 20px;word-break: break-all;border-width: 3px;border-style: groove;border-color: rgb(237, 237, 237);" mpa-from-tpl="t">        <section style="font-size: 16px;line-height: 1.75em;margin-left: 0.5em;margin-right: 0.5em;">          <span style="font-size: 14px;letter-spacing: 1px;">两年后的春天(前121年），<strong>19岁</strong>的霍去病被汉武帝刘彻寄予厚望，封其为骠骑将军，“骠”有马行疾貌的意思。<mpchecktext contenteditable="false" id="1582717336086_0.9998231278634881">            </mpchecktext>带着汉武帝的期待和信任，这次霍去病独自统领一万骠骑从陇西出发兵讨匈奴，再次开始了他的表演，在千里大漠中发动闪电奔袭战。<mpchecktext contenteditable="false" id="1582717336087_0.3170549074416622">            </mpchecktext>六天中霍骠骑横扫河西匈奴诸部落，一路高歌猛进千余里，后来在皋兰山下和匈奴卢侯王、折兰王硬碰硬，以一敌二并顺利完成二杀。<mpchecktext contenteditable="false" id="1582717336088_0.7308256013021446">            </mpchecktext></span>          <br>        </section>        <p style="font-size: 16px;">          <br>        </p>        <p style="font-size: 16px;line-height: 1.75em;">          <span style="font-size: 14px;color: rgb(71, 71, 71);letter-spacing: 2px;" mpa-is-content="t"><img style data-type="jpeg" data-ratio="0.6865234375" data-w="1024" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/WO2hoibPMGkVqLfSs708Wet4T6cK2hREFkutrwDFZJq5GfgW5Ct28sXfLEva3mICfW6nmKS5gsB5fmOhL7fkRNg/640?wx_fmt=jpeg" class="lozad"></span>           <mpchecktext contenteditable="false" id="1582717336089_0.05936281903534746">          </mpchecktext>        </p>        <section style="font-size: 16px;line-height: 1.75em;margin-bottom: 10px;margin-left: 0.5em;margin-right: 0.5em;">          <span style="font-size: 14px;color: rgb(71, 71, 71);letter-spacing: 1px;">此次战役是极其惨烈的，一万精兵最后也只有三千人凯旋归来，但此次霍去病共歼敌近九千人，尽数俘虏浑邪王子及相国、都尉，缴获的战利品中更是有匈奴人祭天的金人。<mpchecktext contenteditable="false" id="1582717336090_0.11101917688962826">            </mpchecktext></span>          <span style="font-size: 14px;color: rgb(71, 71, 71);letter-spacing: 2px;" mpa-is-content="t"><br></span>        </section>        <p style="text-align: center;">          <img class="rich_pages lozad" data-ratio="0.964" data-s="300,640" data-type="jpeg" data-w="500" style="width: 527px;height: 508px;" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/WO2hoibPMGkUtLKNkIPYJaLjsv4ibwSPJOic5M3nZ30eUyTPicYM01XyziboNJ0yibXUkggX8GnQnAoSI9KWFQUvRbUQ/640?wx_fmt=jpeg">        </p>        <p style="text-align: center;">          <br>        </p>        <p style="margin: 10px 0.5em;padding: 0px;clear: both;max-width: 100%;min-height: 1em;color: rgb(51, 51, 51);font-family: 微软雅黑;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: 0px;orphans: 2;text-align: justify;text-indent: 0px;text-transform: none;white-space: normal;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;background-color: rgb(255, 255, 255);text-decoration-style: initial;text-decoration-color: initial;font-size: 16px;line-height: 1.75em;overflow-wrap: break-word !important;box-sizing: border-box !important;">          <span style="margin: 0px;padding: 0px;max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;font-size: 14px;color: rgb(71, 71, 71);letter-spacing: 1px;">同年夏天，霍去病和公孙敖等率领数万大军，在武帝的旨意下准备收复河西，分兵之后的公孙敖居然在大漠中迷了路，不知是公孙敖太菜还是霍去病太牛逼，我想应该是后者吧，因为飞将军<strong style="margin: 0px;padding: 0px;max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;">李广</strong>和<strong style="margin: 0px;padding: 0px;max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;">张骞</strong>两位大佬作为策应部队同样也没跟上霍骠骑的节奏。<mpchecktext contenteditable="false" id="1582717336091_0.3022685969541852">            </mpchecktext></span>          <span style="margin: 0px;padding: 0px;max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;color: rgb(71, 71, 71);font-size: 14px;letter-spacing: 1px;">没有辅助，霍去病没有退缩，果断孤军深入，直推敌方水晶，力挽狂澜，取得大捷。<mpchecktext contenteditable="false" id="1582717336092_0.458933146139626">            </mpchecktext>这次歼敌<strong style="margin: 0px;padding: 0px;max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;">三万</strong>余人，俘虏五个匈奴王及其王母，大小单于阏氏、王子五十九人，相国、将军、当户、都尉六十三人，汉军仅仅伤亡三千人。<mpchecktext contenteditable="false" id="1582717336093_0.5315892082680345">            </mpchecktext></span>        </p>        <p style="margin: 10px 0.5em;padding: 0px;clear: both;max-width: 100%;min-height: 1em;color: rgb(51, 51, 51);font-family: 微软雅黑;font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: justify;text-indent: 0px;text-transform: none;white-space: normal;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;background-color: rgb(255, 255, 255);text-decoration-style: initial;text-decoration-color: initial;line-height: 1.75em;overflow-wrap: break-word !important;box-sizing: border-box !important;">          <span style="margin: 0px;padding: 0px;max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;color: rgb(71, 71, 71);font-size: 14px;letter-spacing: 1px;">我们或许听过《三国演义》中的关羽关云长单刀赴会，但那毕竟是文学加工后的故事，但我们的冠军侯却实实在在地秀了一把个人勇武。<mpchecktext contenteditable="false" id="1582717336094_0.8555811996491465">            </mpchecktext>匈奴单于伊稚斜(yī zhì chá)在得知两场河西战役失利后大片领土丢失，将要严厉惩处浑邪王、休屠王。<mpchecktext contenteditable="false" id="1582717336095_0.16566048171874415">            </mpchecktext>消息走漏，二王恐惧之下想要跑路，奈何草原无处去，只好派使者向大汉乞降。<mpchecktext contenteditable="false" id="1582717336096_0.12247889170289694">            </mpchecktext>还未到河西之时，休屠王临时变卦，拒绝降汉，浑邪王攻杀休屠王，收编其部众，但人心极不稳定。<mpchecktext contenteditable="false" id="1582717336097_0.7314185155544353">            </mpchecktext></span>        </p>        <section style="margin: 0px 0.5em 10px;padding: 0px;clear: both;max-width: 100%;min-height: 1em;color: rgb(51, 51, 51);font-family: 微软雅黑;font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: justify;text-indent: 0px;text-transform: none;white-space: normal;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;background-color: rgb(255, 255, 255);text-decoration-style: initial;text-decoration-color: initial;line-height: 1.75em;overflow-wrap: break-word !important;box-sizing: border-box !important;">          <span style="margin: 0px;padding: 0px;max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;color: rgb(71, 71, 71);font-size: 14px;letter-spacing: 1px;">同年秋，霍去病率1万兵马奉旨前去受降，</span>          <span style="margin: 0px;padding: 0px;max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;font-size: 14px;letter-spacing: 1px;color: rgb(71, 71, 71);">刚到黄河边的时候，只见匈奴降部中忽然发生了哗变，局势即将不可控。<mpchecktext contenteditable="false" id="1582717336098_0.761439066100094">            </mpchecktext>在这紧急关头，霍去病当机立断，只带数名亲兵冲进匈奴大营中，喝令浑邪王诛杀哗变士卒八千余人，这下匈奴军队才稳定下来。<mpchecktext contenteditable="false" id="1582717336099_0.04842828632283469">            </mpchecktext>然后先遣使送浑邪王赴长安觐见汉武帝，自己则接管匈奴四万余众向大汉边境缓行。<mpchecktext contenteditable="false" id="1582717336100_0.45816847196474386">            </mpchecktext></span>        </section>        <p style="text-align: center;">          <img class="rich_pages lozad" data-ratio="1.016" data-s="300,640" data-type="jpeg" data-w="500" style data-src="https://mmbiz.qpic.cn/mmbiz_jpg/WO2hoibPMGkUtLKNkIPYJaLjsv4ibwSPJOgEJy0gPJwUAN4Wypxh1bias4wGVrAGTMlUQSiaiammxgKoJIpicOpTgfsA/640?wx_fmt=jpeg">        </p>        <p style="margin: 10px 0.5em;padding: 0px;clear: both;max-width: 100%;min-height: 1em;color: rgb(51, 51, 51);font-family: 微软雅黑;font-size: 17px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: justify;text-indent: 0px;text-transform: none;white-space: normal;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;background-color: rgb(255, 255, 255);text-decoration-style: initial;text-decoration-color: initial;line-height: 1.75em;overflow-wrap: break-word !important;box-sizing: border-box !important;">          <span style="margin: 0px;padding: 0px;max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;font-size: 14px;letter-spacing: 1px;color: rgb(71, 71, 71);">经过霍去病指挥的两场河西之战，大汉自此打通河西走廊，先后设置武威、酒泉、张掖、敦煌四郡。<mpchecktext contenteditable="false" id="1582717336101_0.23863008343325665">            </mpchecktext>匈奴为此悲歌：<mpchecktext contenteditable="false" id="1582717336102_0.28184801411087457">            </mpchecktext>“<strong>失我祁连山，使我六畜不蕃息；<mpchecktext contenteditable="false" id="1582717336103_0.32663728567937">            </mpchecktext></strong><strong>失我焉支山，使我嫁妇无颜色。<mpchecktext contenteditable="false" id="1582717336104_0.7192110640545861">            </mpchecktext></strong>”这时候他才19岁啊，就取得了如此赫赫战功，马踏匈奴，缴获祭天金人，使华夏政权第一次占据河西，为丝绸之路奠定基础。<mpchecktext contenteditable="false" id="1582717336105_0.4388989267769323">            </mpchecktext></span>        </p>      </section>    </section>  </section></section><p>  <br></p><section data-mpa-template="t" mpa-from-tpl="t" style="white-space: normal;background-color: rgb(255, 255, 255);margin-left: 0.5em;margin-right: 0.5em;">  <section label="Copyleft 2018 iPaiban All lefts Reserved （本样式已做版权保护，未经正式授权不允许任何第三方编辑器、企业、个人使用，违者必纠）" donone="shifuMouseDownPayStyle('shifu_bij_005')" mpa-from-tpl="t" style="margin: 0rem auto;color: rgb(0, 0, 0);font-size: medium;letter-spacing: 0.544px;line-height: 27.2px;widows: 1;border-width: initial;border-style: none;border-color: initial;">    <section mpa-from-tpl="t" style="margin-top: 20px;margin-bottom: 10px;margin-left: 20.2969px;text-align: center;">      <section mpa-from-tpl="t" style="display: inline-block;border-width: 1px;border-style: solid;border-color: rgb(62, 62, 62);border-radius: 0px;background-color: rgb(254, 226, 117);">        <section mpa-from-tpl="t" style="margin-top: -5px;margin-bottom: 3px;transform: translate3d(-3px, 0px, 0px);background-color: rgb(255, 255, 255);">          <section mpa-from-tpl="t" style="padding: 5px;display: inline-block;border-width: 1px;border-style: solid;border-color: rgb(62, 62, 62);border-radius: 0px;">            <section mpa-from-tpl="t" style="display: flex;justify-content: center;">              <section mpa-from-tpl="t" style="padding-right: 5px;padding-left: 5px;font-size: 14px;color: rgb(63, 63, 63);">                <p>                  <span style="color: rgb(0, 0, 0);"><strong mpa-from-tpl="t"><span mpa-is-content="t" style="font-size: 16px;">三战漠北<mpchecktext contenteditable="false" id="1582717336106_0.6029504680329756">                    </mpchecktext></span></strong></span>                </p>              </section>            </section>          </section>        </section>      </section>    </section>  </section></section><p style="white-space: normal;background-color: rgb(255, 255, 255);text-align: center;margin-left: 0.5em;margin-right: 0.5em;">  <strong><span style="font-family: 微软雅黑;font-size: 14px;">饮马瀚海，封狼居胥<mpchecktext contenteditable="false" id="1582717336107_0.6463986023832566">    </mpchecktext><br></span></strong></p><p style="white-space: normal;background-color: rgb(255, 255, 255);text-align: right;margin-left: 0.5em;margin-right: 0.5em;">  <strong><span style="font-family: 微软雅黑;font-size: 14px;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; —— 班固<mpchecktext contenteditable="false" id="1582717336108_0.37290154930224295">    </mpchecktext></span></strong></p><section data-mpa-template="t" mpa-from-tpl="t" style="margin-left: 0.5em;margin-right: 0.5em;">  <section data-mpa-template-id="1356344" data-mpa-color="null" data-mpa-category="fav" mpa-from-tpl="t">    <section data-id="86043" style="line-height: 25.6px;font-family: 微软雅黑;border-width: 0px;border-style: none;" mpa-from-tpl="t">      <section style="margin-top: 20px;margin-bottom: 20px;padding: 15px 20px;border-radius: 20px;word-break: break-all;border-width: 3px;border-style: groove;border-color: rgb(237, 237, 237);" mpa-from-tpl="t">        <section style="font-size: 16px;margin-bottom: 10px;line-height: 1.75em;">          <span style="font-size: 14px;color: rgb(71, 71, 71);letter-spacing: 2px;" mpa-is-content="t"><p style="margin: 0px 0.5em;padding: 0px;clear: both;max-width: 100%;min-height: 1em;color: rgb(51, 51, 51);font-family: 微软雅黑;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-indent: 0px;text-transform: none;white-space: normal;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;background-color: rgb(255, 255, 255);text-decoration-style: initial;text-decoration-color: initial;font-size: 16px;text-align: left;overflow-wrap: break-word !important;box-sizing: border-box !important;">            <span style="letter-spacing: 2px;font-size: 14px;">元狩四年（公元前117），此时河西之战已过去两年，武帝为彻底铲平匈奴主力，发动了规模空前的<strong>漠北之战。<mpchecktext contenteditable="false" id="1582717336109_0.3619782419436286">              </mpchecktext></strong>时年<strong>21岁</strong>的霍去病当仁不让地成为刘彻手中的王炸，霍去病这张王牌，武帝是准备用来炸匈奴单于主力的，然而由于情报错误，这场对局由卫青接下。<mpchecktext contenteditable="false" id="1582717336110_0.8474193675573345">              </mpchecktext>虽然霍去病错失了他最渴望的对手，但属于他的传奇故事将会继续谱写下去。<mpchecktext contenteditable="false" id="1582717336111_0.16554663543804526">              </mpchecktext>霍去病和他舅舅卫青各率五万骑兵，步兵转折踵军数十万分别从代郡和定襄出发，深入漠北，寻歼匈奴主力。<mpchecktext contenteditable="false" id="1582717336112_0.7160623197989002">              </mpchecktext></span>            <br>            <span style="font-size: 14px;"></span>            </p></span>        </section>        <p style="text-align: center;">          <img class="rich_pages lozad" data-ratio="0.806841046277666" data-s="300,640" data-type="jpeg" data-w="497" style="width: 515px;height: 416px;" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/WO2hoibPMGkUtLKNkIPYJaLjsv4ibwSPJOwTM7WD6U0KxYibIiaBH7PzQWdOfibwK2iaj1dm8pziae7NibFs9yKMN0gmiaA/640?wx_fmt=jpeg">        </p>        <p style="font-size: 16px;line-height: 1.75em;">          <br>        </p>        <p style="margin: 0px 0.5em;padding: 0px;clear: both;max-width: 100%;min-height: 1em;color: rgb(51, 51, 51);font-family: 微软雅黑;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;orphans: 2;text-align: justify;text-indent: 0px;text-transform: none;white-space: normal;widows: 2;word-spacing: 0px;-webkit-text-stroke-width: 0px;background-color: rgb(255, 255, 255);text-decoration-style: initial;text-decoration-color: initial;font-size: 16px;line-height: 1.75em;overflow-wrap: break-word !important;box-sizing: border-box !important;">          <span mpa-is-content="t" style="margin: 0px;padding: 0px;max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;font-size: 14px;color: rgb(71, 71, 71);letter-spacing: 2px;">霍去病率本部兵马向北奔袭两千多里，越过离侯山，渡过弓闾河，碰上了左贤王部众，以一万五千的损失数量歼敌七万四百多人，俘虏匈奴王3人，及将军、相国、当户、都尉等83人，乘胜追杀至狼居胥山，并在狼居胥山举行了祭天封礼，于姑衍山举行祭地禅礼，这便是<strong>封狼居胥</strong>。<mpchecktext contenteditable="false" id="1582717336113_0.45591961371743994">            </mpchecktext>仪式结束后，霍去病继续乘胜追击，兵至瀚海（贝加尔湖），方才作罢，这就是<strong>饮马瀚海</strong>。<mpchecktext contenteditable="false" id="1582717336114_0.9425894805623822">            </mpchecktext></span>          <span style="color: rgb(71, 71, 71);font-size: 14px;letter-spacing: 2px;">经此一战，“<strong>匈奴单于远遁，而漠南无王庭</strong>”。<mpchecktext contenteditable="false" id="1582717336115_0.41720961675467905">            </mpchecktext>此后饮马瀚海，封狼居胥更是被后世武将视为人生的最高追求和荣誉之一。<mpchecktext contenteditable="false" id="1582717336116_0.19455531594900766">            </mpchecktext></span>        </p>      </section>    </section>  </section></section><p style="margin-left: 1em;margin-right: 1em;line-height: 1.75em;margin-bottom: 10px;">  <span style="font-size: 14px;color: rgb(71, 71, 71);font-family: 微软雅黑;letter-spacing: 2px;background-color: rgb(255, 255, 255);">霍去病的一生是传奇的，出道即巅峰。<mpchecktext contenteditable="false" id="1582717336117_0.945529260052651">    </mpchecktext>奈何天妒英才，元狩四年（公元前119年），年仅<strong>23岁</strong>的霍去病于长安去世，武帝悲恸不已，特许霍去病陪葬茂陵，下旨将霍去病的坟墓修成祁连山的模样，调遣河西五郡的铁甲军，列成阵沿长安一直排到</span>  <span style="color: rgb(0, 0, 0);font-size: 14px;background-color: rgb(255, 255, 255);">茂陵</span>  <span style="font-size: 14px;color: rgb(71, 71, 71);font-family: 微软雅黑;letter-spacing: 2px;background-color: rgb(255, 255, 255);">东的霍去病墓。<mpchecktext contenteditable="false" id="1582717336118_0.6688015541159966">    </mpchecktext>谥“<strong>景桓侯</strong>”，取义“武与广地”，彰显这位爱将马踏匈奴，英勇无敌，为大汉开疆扩土的赫赫战功。<mpchecktext contenteditable="false" id="1582717336119_0.7445225851857182">    </mpchecktext></span></p><p style="text-align: center;">  <img class="rich_pages lozad" data-ratio="0.7351778656126482" data-s="300,640" data-type="jpeg" data-w="506" style="width: 100%;height: auto;" data-backw="528" data-backh="388" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/WO2hoibPMGkVqLfSs708Wet4T6cK2hREFS48eQo18KMMvYo1b5AgEFZeX5ibJsCkyBxhegrUMYys2XjJHMrAP3zw/640?wx_fmt=jpeg"></p><p style="text-align: center;">  <br></p><section mpa-from-tpl="t" style="font-variant-numeric: normal;font-variant-east-asian: normal;white-space: normal;background-color: rgb(255, 255, 255);letter-spacing: 0.544px;line-height: 27.2px;widows: 1;">  <section mpa-from-tpl="t" style="margin-right: auto;margin-left: auto;width: 50px;height: 49px;background-image: url(&quot;https://mmbiz.qpic.cn/mmbiz_gif/QKVKKxOhTQYEUCflqZibgvWZDdYVfzpPKfjv4pYqViagOqpzHCtU7NO4fgSziarPmPJzrQNXiaA7MyyL2KL7q9FyZQ/640&quot;);background-size: 100%;background-repeat: no-repeat;">    <section mpa-from-tpl="t" style="margin-right: auto;margin-left: auto;text-align: center;line-height: 48px;color: rgb(255, 255, 255);font-size: 18px;">      <section style="clear: both;min-height: 1em;border-width: 0px;border-style: initial;border-color: initial;">二        <mpchecktext contenteditable="false" id="1582717336120_0.5555496845676169">        </mpchecktext>      </section>    </section>  </section></section><section mpa-from-tpl="t" style="font-variant-numeric: normal;font-variant-east-asian: normal;white-space: normal;background-color: rgb(255, 255, 255);letter-spacing: 0.544px;line-height: 27.2px;widows: 1;">  <section style="text-align: center;width: auto;">    <section data-width="100%" mpa-from-tpl="t" style="width: 677px;display: inline-block;">      <section mpa-from-tpl="t" style="display: inline-block;">        <section mpa-from-tpl="t" style="padding: 10px 20px 11px;color: rgb(63, 62, 63);font-size: 16px;letter-spacing: 1.5px;background-image: url(&quot;https://mmbiz.qpic.cn/mmbiz_png/QKVKKxOhTQYEUCflqZibgvWZDdYVfzpPKF4mAdEPjvFbKFbUicI0siacARQggia2kZfXzyDYwJW7mgqgpHqCVZjAgQ/640&quot;);background-size: 100% 100%;background-repeat: no-repeat;">          <span style="font-size: 13px;">念宋时<strong>辛弃疾</strong>文武双全，叹之壮志未酬<mpchecktext contenteditable="false" id="1582717336121_0.4096880325766441">            </mpchecktext></span>        </section>      </section>    </section>  </section></section><section style="margin-left: 0.5em;margin-right: 0.5em;line-height: 1.75em;">  <br></section><section style="margin-left: 0.5em;margin-right: 0.5em;line-height: 1.75em;text-align: center;">  <img class="rich_pages lozad" data-backh="625" data-backw="494" data-ratio="1.2658227848101267" data-s="300,640" data-type="jpeg" data-w="790" style="color: rgb(62, 62, 62);font-size: 16px;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);width: 100%;border-color: rgb(0, 0, 0);border-style: solid;border-width: 2px;height: auto;" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/WO2hoibPMGkUtLKNkIPYJaLjsv4ibwSPJOQIiaq89QdJBZn0iaY8CgIpQlTgV7OZ5oPuuyafCWJicB6I82KHEicvon4A/640?wx_fmt=jpeg"></section><p style="margin-left: 0.5em;margin-right: 0.5em;line-height: 1.75em;text-align: justify;margin-bottom: 10px;">  <span style="color: rgb(71, 71, 71);font-family: arial, 宋体, sans-serif;font-size: 14px;letter-spacing: 1px;text-align: start;text-indent: 28px;background-color: rgb(255, 255, 255);">提起辛弃疾，相信大家在中学时都学过他的诗词，老师告诉我们他是一个爱国诗人，是豪放派代表词人，有“词中之龙”的美称。<mpchecktext contenteditable="false" id="1582717336122_0.3349969944157556">    </mpchecktext>我也十分喜欢他笔下的词句。<mpchecktext contenteditable="false" id="1582717336123_0.9340411367824188">    </mpchecktext></span></p><p style="text-align: center;">  <img class="rich_pages lozad" data-backh="363" data-backw="500" data-ratio="0.726" data-s="300,640" data-type="jpeg" data-w="500" style="width: 100%;height: auto;border-color: rgb(0, 0, 0);border-style: solid;border-width: 2px;" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/WO2hoibPMGkVhibnauWXvQIj3ZCmfWNPq078kibBYNiaJnFtlh9K6iaTXA6pIej7Hq8Fcj4WjxNEDkEa1Tnk1cgSrPw/640?wx_fmt=jpeg"></p><p style="margin: 10px 0.5em;background-color: rgb(255, 255, 255);line-height: 1.75em;">  <span style="font-size: 14px;letter-spacing: 2px;"><strong style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;"><span style="font-size: 14px;color: rgb(71, 71, 71);text-align: start;text-indent: 28px;">“</span><span style="font-size: 14px;color: rgb(26, 26, 26);text-align: start;text-indent: 28px;">众里寻他千百度，蓦然回首，那人却在，灯火阑珊处。<mpchecktext contenteditable="false" id="1582717336124_0.3081956147572118">    </mpchecktext></span></strong><strong style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;"></strong><strong style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;"></strong><strong style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;"></strong><strong style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;"></strong><strong style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;"><span style="font-size: 14px;color: rgb(26, 26, 26);text-align: start;text-indent: 28px;">”寄托</span></strong><span style="font-size: 14px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;color: rgb(26, 26, 26);text-align: start;text-indent: 28px;">着他心中的柔情和理想的高士之风。<mpchecktext contenteditable="false" id="1582717336125_0.8678819574301129">    </mpchecktext></span></span></p><p style="margin-right: 0.5em;margin-left: 0.5em;background-color: rgb(255, 255, 255);line-height: 1.75em;margin-top: 10px;">  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 14px;letter-spacing: 2px;"><span style="color: rgb(26, 26, 26);text-align: start;text-indent: 28px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">“</span><span style="font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;"><strong><span style="color: rgb(26, 26, 26);text-align: start;text-indent: 28px;">醉里挑灯看剑，梦回吹角连营。<mpchecktext contenteditable="false" id="1582717336126_0.08850127716595568">    </mpchecktext></span></strong></span></span>  <span style="font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 14px;letter-spacing: 2px;"><strong><span style="color: rgb(26, 26, 26);text-align: start;text-indent: 28px;">八百里分麾下炙，五十弦翻塞外声。<mpchecktext contenteditable="false" id="1582717336127_0.8042328722383447">    </mpchecktext></span></strong><strong><span style="color: rgb(26, 26, 26);text-align: start;text-indent: 28px;">沙场秋点兵。<mpchecktext contenteditable="false" id="1582717336128_0.7168580270345999">    </mpchecktext></span></strong></span>  <span style="font-size: 14px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;color: rgb(0, 0, 0);letter-spacing: 2px;"><strong><span style="text-align: start;text-indent: 28px;">马作的卢飞快，弓如霹雳弦惊。<mpchecktext contenteditable="false" id="1582717336129_0.08684693381182162">    </mpchecktext></span></strong></span>  <span style="font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;color: rgb(0, 0, 0);font-size: 14px;letter-spacing: 2px;"><strong><span style="text-align: start;text-indent: 28px;">了却君王天下事，赢得生前身后名。<mpchecktext contenteditable="false" id="1582717336130_0.9791926250101917">    </mpchecktext></span></strong></span>  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 14px;letter-spacing: 2px;"><span style="font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;color: rgb(0, 0, 0);"><strong><span style="text-align: start;text-indent: 28px;">可怜白发生</span></strong></span><span style="font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;"><strong><span style="color: rgb(100, 100, 100);text-align: start;text-indent: 28px;">！<mpchecktext contenteditable="false" id="1582717336131_0.48515335869424825">    </mpchecktext></span></strong></span><strong style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;"><span style="color: rgb(26, 26, 26);font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;text-align: start;text-indent: 28px;">”</span></strong><span style="color: rgb(26, 26, 26);font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;text-align: start;text-indent: 28px;">彰显着他渴望建功立业，为国为民的豪迈之情与赤诚之心。<mpchecktext contenteditable="false" id="1582717336132_0.729806866994914">    </mpchecktext></span></span><section style="margin-top: 10px;white-space: normal;background-color: rgb(255, 255, 255);line-height: 1.75em;margin-left: 0.5em;margin-right: 0.5em;">  <span style="letter-spacing: 2px;"><strong style="color: rgb(0, 0, 0);font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;"><span style="font-size: 14px;">“想当年，金戈铁马，气吞万里如虎。<mpchecktext contenteditable="false" id="1582717336133_0.1994748039955685">    </mpchecktext></span></strong><strong style="color: rgb(0, 0, 0);font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;"><span style="font-size: 14px;"></span></strong><strong style="color: rgb(0, 0, 0);font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;"><span style="font-size: 14px;">元嘉草草，封狼居胥，赢得仓皇北顾。<mpchecktext contenteditable="false" id="1582717336134_0.30704397579025655">    </mpchecktext></span></strong><strong style="color: rgb(0, 0, 0);font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;"><span style="font-size: 14px;">”</span></strong><span style="font-size: 14px;">诉说着自己报国无望的悲情。<mpchecktext contenteditable="false" id="1582717336135_0.00027691351221581506">    </mpchecktext></span></span></section><section style="margin-top: 10px;white-space: normal;background-color: rgb(255, 255, 255);line-height: 1.75em;margin-left: 0.5em;margin-right: 0.5em;">  <span style="letter-spacing: 2px;"><strong style="letter-spacing: 1px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;"><span mpa-is-content="t" style="font-family: 微软雅黑;font-size: 14px;color: rgb(71, 71, 71);">公元1140年</span></strong><span mpa-is-content="t" style="font-family: 微软雅黑;font-size: 14px;color: rgb(71, 71, 71);">，比霍去病小1280岁的辛弃疾出生了。<mpchecktext contenteditable="false" id="1582717336136_0.35051207048325983">    </mpchecktext>这一年，距靖康之变已发生十三年了，金国撕毁盟约攻宋，南宋岌岌可危。<mpchecktext contenteditable="false" id="1582717336137_0.8377004294917365">    </mpchecktext>好在此时有<strong>岳飞</strong>挥师北伐，两河人民奔走相告，各地义军纷纷响应，夹击金军。<mpchecktext contenteditable="false" id="1582717336138_0.875914381964011">    </mpchecktext>岳飞先后收复郑州、洛阳等失地，在郾城、颍昌大败金军，随后进军</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 14px;">朱仙镇</span><span mpa-is-content="t" style="font-size: 14px;font-family: 微软雅黑;color: rgb(71, 71, 71);">，形势一片大好。<mpchecktext contenteditable="false" id="1582717336139_0.6987270524941958">    </mpchecktext>连金人都不由发出感叹：<mpchecktext contenteditable="false" id="1582717336140_0.8809697707775561">    </mpchecktext>“</span><span style="letter-spacing: 1px;color: rgb(71, 71, 71);font-family: 微软雅黑;font-size: 14px;">撼山易，憾岳家军难。<mpchecktext contenteditable="false" id="1582717336141_0.2450913416801641">    </mpchecktext>”<mpchecktext contenteditable="false" id="1582717336142_0.21819420713329007">    </mpchecktext></span></span></section><section style="margin-top: 10px;white-space: normal;background-color: rgb(255, 255, 255);line-height: 1.75em;margin-left: 0.5em;margin-right: 0.5em;">  <span style="letter-spacing: 1px;color: rgb(71, 71, 71);font-family: 微软雅黑;font-size: 14px;"><img class="rich_pages lozad" data-backh="327" data-backw="553" data-cropselx1="0" data-cropselx2="557" data-cropsely1="0" data-cropsely2="279" data-ratio="0.591715976331361" data-s="300,640" data-type="jpeg" data-w="507" style="height: auto;text-align: center;white-space: normal;background-color: rgb(255, 255, 255);width: 100%;border-color: rgb(0, 0, 0);border-style: solid;border-width: 2px;" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/WO2hoibPMGkVhibnauWXvQIj3ZCmfWNPq0fybJR0Sic5oUH9gYBLfq3l0jeG4BvSsp5xV6LBvHicYxkBoQOSbVouibg/640?wx_fmt=jpeg"></span></section></p><p style="margin: 10px 0.5em;white-space: normal;background-color: rgb(255, 255, 255);line-height: 1.75em;">  <span style="color: rgb(71, 71, 71);font-family: 微软雅黑;font-size: 14px;letter-spacing: 2px;">可在位的宋高宗<strong>赵构</strong>却不是一个雄主，尽管他死后被其后代<span style="color: rgb(71, 71, 71);font-size: 14px;font-family: arial, 宋体, sans-serif;text-align: start;text-indent: 28px;">加谥号为受命中兴全功至德圣神武文昭仁宪孝皇帝。<mpchecktext contenteditable="false" id="1582717336143_0.9652683758420719">    </mpchecktext></span></span>  <span style="letter-spacing: 2px;"><span style="text-align: start;text-indent: 28px;color: rgb(71, 71, 71);font-family: 微软雅黑;font-size: 14px;">这年赵构33岁，正值壮年，却毫无进取之心，</span><span style="color: rgb(71, 71, 71);font-family: 微软雅黑;font-size: 14px;">只想偏安一隅，与金国议和，以十二道“金字牌”催令岳飞班师回朝，十年之功一日尽废，后来更是自毁长城，以莫须有的罪名将岳飞杀害。<mpchecktext contenteditable="false" id="1582717336144_0.498023539777416">    </mpchecktext>尽管后世文人皆叹惋崖山之战，悼念南宋故国。<mpchecktext contenteditable="false" id="1582717336145_0.9660881222990592">    </mpchecktext>但我却不为南宋灭亡而可惜，所谓今日之因，他日之果。<mpchecktext contenteditable="false" id="1582717336146_0.4710296396846674">    </mpchecktext>一个不崇尚勇武的朝代，是精神被阉割的朝代，日后神州大地之所以全面沦失，皆由今朝所为。<mpchecktext contenteditable="false" id="1582717336147_0.10026080701536078">    </mpchecktext>若无岳飞，或许南宋早就灭亡了</span><span style="color: rgb(71, 71, 71);font-size: 14px;font-family: arial, 宋体, sans-serif;text-align: start;text-indent: 28px;">。<mpchecktext contenteditable="false" id="1582717336148_0.9973313370664172">    </mpchecktext>宋，“怂怂怂”，“送送送”。<mpchecktext contenteditable="false" id="1582717336149_0.7968824010739028">    </mpchecktext></span><span style="color: rgb(71, 71, 71);font-family: arial, 宋体, sans-serif;font-size: 14px;text-align: start;text-indent: 28px;">与辛弃疾相比，霍去病无疑是幸运的，因为就是霍嫖姚复生，也收不回来那九州失地，最终结果怕是落得和岳元帅一个下场。<mpchecktext contenteditable="false" id="1582717336150_0.6422852015578862">    </mpchecktext>这也预示着辛弃疾从出生的那天起就没有驱除鞑虏，恢复中华的机会。<mpchecktext contenteditable="false" id="1582717336151_0.8069145668653301">    </mpchecktext></span></span></p><p style="text-align: center;">  <img class="rich_pages lozad" data-backh="214" data-backw="578" data-croporisrc="https://mmbiz.qpic.cn/mmbiz_jpg/WO2hoibPMGkVhibnauWXvQIj3ZCmfWNPq0JqicHmWt9FnibXp8WALk6jibJJNliaD43iav71vuDmsfpqMkdb8OSP33ELQ/0?wx_fmt=jpeg" data-cropx1="0" data-cropx2="759" data-cropy1="0" data-cropy2="281.01384083044985" data-ratio="0.3702239789196311" data-s="300,640" data-type="jpeg" data-w="759" style="width: 562px;height: 208px;border-color: rgb(0, 0, 0);border-style: solid;border-width: 2px;" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/WO2hoibPMGkVhibnauWXvQIj3ZCmfWNPq0GWUTW4bhN8SWkqGebzDAaic1aLafODusWhjXWjLk5wiaxtaib675icUs9Q/640?wx_fmt=jpeg"></p><p style="margin: 10px 0.5em;white-space: normal;background-color: rgb(255, 255, 255);line-height: 1.75em;">  <span style="color: rgb(71, 71, 71);font-family: arial, 宋体, sans-serif;font-size: 14px;text-align: start;text-indent: 28px;letter-spacing: 2px;">年少之时，辛弃疾所在的家乡早已沦陷，爷爷辛赞被迫在金国为官，屈辱又痛苦，但常常带着辛弃疾“登高望远，指画山河”，鼓励他不要忘却故国，长要为光复大宋尽力拼搏，还祖国一统。<mpchecktext contenteditable="false" id="1582717336152_0.1274942077383221">    </mpchecktext>辛弃疾目睹沦陷区的百姓受金军迫害，便暗暗发誓要早日驱除鞑虏，一边用心从文，一边刻苦习武，以恢复中原为己任。<mpchecktext contenteditable="false" id="1582717336153_0.5232169671387201">    </mpchecktext></span></p><p style="margin: 10px 0.5em;white-space: normal;background-color: rgb(255, 255, 255);line-height: 1.75em;">  <span style="color: rgb(71, 71, 71);font-family: arial, 宋体, sans-serif;font-size: 14px;text-align: start;text-indent: 28px;letter-spacing: 2px;">1154年，<strong>十四五岁</strong>的辛弃疾由济南府保荐到燕京参加进士考试，可能准备不足，考试失败，但他本来就没有打算在金国为官，实质上是打着考试的幌子来观察敌情，跑进燕山勘察地形。<mpchecktext contenteditable="false" id="1582717336154_0.5224852697528719">    </mpchecktext></span></p><p style="margin: 10px 0.5em;white-space: normal;background-color: rgb(255, 255, 255);line-height: 1.75em;">  <span style="color: rgb(71, 71, 71);font-family: arial, 宋体, sans-serif;font-size: 14px;text-align: start;text-indent: 28px;letter-spacing: 2px;">1157年，<strong>十七八</strong><strong>岁</strong>的辛弃疾第二次参加进士考试，或许心里看不上这个进士考试，但只有拥有过的才有资本藐视它，是的，这年，他<strong>考中</strong>了金国的<strong>进士</strong>。<mpchecktext contenteditable="false" id="1582717336155_0.01991915971407865">    </mpchecktext>有时候人与人之间的差距有时候就是这么大啊，<strong>范进</strong>老先生50岁的时候还是个童生，54岁才通过乡试，中了举人，57进京会试,才中了进士。<mpchecktext contenteditable="false" id="1582717336156_0.8910687444627987">    </mpchecktext>但考试什么的对辛弃疾来说都是次要的，不是平生追求，宁做百夫长，胜过一书生。<mpchecktext contenteditable="false" id="1582717336157_0.17570788220617772">    </mpchecktext>他再次来到燕山，着手画地形图，为日后收复山河做准备。<mpchecktext contenteditable="false" id="1582717336158_0.40728108431425736">    </mpchecktext></span></p><p style="text-align: center;">  <img class="rich_pages lozad" data-backh="375" data-backw="500" data-ratio="0.75" data-s="300,640" data-type="jpeg" data-w="500" style="border-color: rgb(0, 0, 0);border-style: solid;border-width: 2px;width: 571px;height: 428px;" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/WO2hoibPMGkVhibnauWXvQIj3ZCmfWNPq0UHFoSrYcwe4JuicKwpvGibH0ZeCxnRAmgLibP62I5rhPd9gUXlGA3emtg/640?wx_fmt=jpeg"></p><p style="margin: 10px 0.5em;white-space: normal;background-color: rgb(255, 255, 255);line-height: 1.75em;">  <span style="letter-spacing: 2px;"><span style="color: rgb(71, 71, 71);font-family: arial, 宋体, sans-serif;font-size: 14px;text-align: start;text-indent: 28px;">1160年，祖父辛赞去世，或许祖父是带了遗憾逝世，想必</span><span style="color: rgb(71, 71, 71);font-family: arial, 宋体, sans-serif;text-align: start;text-indent: 28px;font-size: 14px;">稼轩收复故土的信念愈加坚定。<mpchecktext contenteditable="false" id="1582717336159_0.5309545921497258">    </mpchecktext></span><span style="font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;text-align: start;font-size: 14px;">1161年秋，完颜亮率军南下入侵南宋，辛弃疾号召沦陷区两千热血男儿乘势揭竿而起，投奔由耿京领导的抗金义军。<mpchecktext contenteditable="false" id="1582717336160_0.4550442392856502">    </mpchecktext>才华横溢的辛弃疾受到耿京重用，被任命为掌书记，掌管义军印信，负责军中机要工作和联络南宋朝廷的任务。<mpchecktext contenteditable="false" id="1582717336161_0.791237131416419">    </mpchecktext>这年他<strong>21岁</strong>，比霍去病出道晚了4年。<mpchecktext contenteditable="false" id="1582717336162_0.893931097435031">    </mpchecktext>但若是从中了进士开始算起的话，两人差不多回到了同一起跑线，不过霍去病先天条件太优越了，因此一个年少便能封狼居胥，而另一个却一生壮志难酬。<mpchecktext contenteditable="false" id="1582717336163_0.7529414183195033">    </mpchecktext></span></span></p><section data-mpa-template="t" mpa-from-tpl="t">  <section data-mpa-template-id="1356344" data-mpa-color="null" data-mpa-category="fav" mpa-from-tpl="t">    <section data-id="86043" style="line-height: 25.6px;font-family: 微软雅黑;border-width: 0px;border-style: none;" mpa-from-tpl="t">      <section style="margin-top: 20px;margin-bottom: 20px;padding: 15px 20px;border-radius: 20px;word-break: break-all;border-width: 3px;border-style: groove;border-color: rgb(237, 237, 237);" mpa-from-tpl="t">        <p style="font-size: 16px;line-height: 1.75em;margin-left: 0.5em;margin-right: 0.5em;">          <span style="font-size: 14px;color: rgb(71, 71, 71);letter-spacing: 2px;" mpa-is-content="t">但辛弃疾是一位不折不扣的猛人，武力值爆表，当初花和尚义端被他说服一块儿来投奔义军，由于受不了营中艰苦环境，义端偷盗了由辛弃疾保管的帅印，准备前往金营邀功，耿京盛怒之下，只得拿辛弃疾问罪。<mpchecktext contenteditable="false" id="1582717336164_0.0831815342513178">            </mpchecktext>辛弃疾自知识人不明，交友不慎，羞愧难当，当即立下军令状。<mpchecktext contenteditable="false" id="1582717336165_0.3685891448265781">            </mpchecktext>于是辛弃疾带了一小队人马连夜奔袭，埋伏在去往金营必经的路上。<mpchecktext contenteditable="false" id="1582717336166_0.9912178007628343">            </mpchecktext>果然，破晓之时，义端骑马来到，辛弃疾二话不说，一刀将叛贼义端砍下马来。<mpchecktext contenteditable="false" id="1582717336167_0.5198367990600385">            </mpchecktext>义端正要破口大骂并还击，当他看到来人是辛弃疾之后，吓得魂飞魄散，立即跪地求饶道：<mpchecktext contenteditable="false" id="1582717336168_0.5807946878726185">            </mpchecktext><strong>“我识君真相，乃青兕也，力能杀人，幸勿杀我。<mpchecktext contenteditable="false" id="1582717336169_0.7906914091466506">            </mpchecktext></strong><strong>”</strong>嫉恶如仇的辛弃疾哪里会绕的这样贪生怕死的变节分子，手起刀落，义端身首异处。<mpchecktext contenteditable="false" id="1582717336170_0.330074919420986">            </mpchecktext>在辛弃疾携印回营交付军令状后，耿京对他更加倚重，几乎言听计从。<mpchecktext contenteditable="false" id="1582717336171_0.2823943745923758">            </mpchecktext>而辛弃疾在大家眼里更是成了绝世猛兽，皆称他为“<strong>辛青兕</strong>”。<mpchecktext contenteditable="false" id="1582717336172_0.6595821042485124">            </mpchecktext></span>        </p>        <p style="text-align: center;">          <img class="rich_pages lozad" data-backh="340" data-backw="500" data-ratio="0.68" data-s="300,640" data-type="jpg" data-w="500" style="border-color: rgb(0, 0, 0);border-style: solid;border-width: 2px;width: 100%;height: auto;" data-src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=1006733607,2233191401&fm=26&gp=0.jpg">        </p>        <p style="line-height: 1.75em;margin-left: 0.5em;margin-right: 0.5em;">          <span style="font-size: 14px;color: rgb(71, 71, 71);letter-spacing: 2px;" mpa-is-content="t">哈哈，上面这个图片还是过分夸张啦，不过其好友<strong>陈亮</strong>的这个描述才是符合辛猛人的吧——“<strong>眼光有棱，足以照映一世之豪；<mpchecktext contenteditable="false" id="1582717336173_0.084437454073085">            </mpchecktext>背胛有负，足以荷载四国之重</strong>。<mpchecktext contenteditable="false" id="1582717336174_0.8533580621749501">            </mpchecktext>”<mpchecktext contenteditable="false" id="1582717336175_0.6400160628952218">            </mpchecktext></span>        </p>        <p style="text-align: center;">          <img class="rich_pages lozad" data-backh="420" data-backw="514" data-croporisrc="https://mmbiz.qpic.cn/mmbiz_jpg/WO2hoibPMGkVqLfSs708Wet4T6cK2hREFMNcyKibUBiazMOLBuFb13Dlc0ibOrxTlNO5RFBnT1KxBDUInT7F6gGiaXA/0?wx_fmt=jpeg" data-cropx1="0" data-cropx2="695.6390977443608" data-cropy1="0" data-cropy2="568.421052631579" data-ratio="0.8172661870503597" data-s="300,640" data-type="jpeg" data-w="695" style="width: 100%;height: auto;" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/WO2hoibPMGkVhibnauWXvQIj3ZCmfWNPq0m7E7IGy8mMkjvCErqzibvibpCKjaSiakvibmqYAMoYvIDD4KeGpRYPVcCA/640?wx_fmt=jpeg">        </p>      </section>    </section>  </section></section><p style="margin: 10px 0.5em;white-space: normal;background-color: rgb(255, 255, 255);line-height: 1.75em;">  <span style="font-size: 14px;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;text-align: start;">1162年，22岁的辛弃疾被耿京派去前往建康奉表南归，当日被赵构召见，授辛弃疾右承务郎。<mpchecktext contenteditable="false" id="1582717336176_0.16779725348021635">    </mpchecktext></span>  <span style="font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;text-align: start;font-size: 14px;letter-spacing: 2px;">再回归的途中，得知叛徒张安国等人杀害耿京投降金人的消息后，辛弃疾视死如归，连夜率领五十骑兵直闯五万人的金军大营，活捉张安国，之后又奔驰千里，将叛贼押送到建康，交由朝廷治罪。<mpchecktext contenteditable="false" id="1582717336177_0.7466302208625679">    </mpchecktext></span>  <span style="font-weight: 700;border-width: 0px;border-style: initial;border-color: initial;color: rgb(25, 25, 25);font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;text-align: start;font-size: 14px;letter-spacing: 2px;">“壮岁旌旗拥万夫，锦襜突骑渡江初。<mpchecktext contenteditable="false" id="1582717336178_0.6528446007242505">    </mpchecktext>燕兵夜娖银胡簶，汉箭朝飞金仆姑。<mpchecktext contenteditable="false" id="1582717336179_0.10692613273763096">    </mpchecktext>”&nbsp;<mpchecktext contenteditable="false" id="1582717336180_0.9838828599700555">    </mpchecktext></span></p><section style="margin-bottom: 10px;white-space: normal;background-color: rgb(255, 255, 255);margin-left: 0.5em;margin-right: 0.5em;">  <span style="font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;text-align: start;font-size: 14px;letter-spacing: 2px;">从此，辛弃疾成为了一个传说，<span style="text-align: start;font-size: 14px;color: rgb(26, 26, 26);font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;">声闻朝野，名传庙堂</span>。<mpchecktext contenteditable="false" id="1582717336181_0.488241593782371">    </mpchecktext></span>  <span style="text-align: start;color: rgb(26, 26, 26);font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, &quot;Source Han Sans SC&quot;, &quot;Noto Sans CJK SC&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;font-size: 14px;letter-spacing: 2px;">名传庙堂。<mpchecktext contenteditable="false" id="1582717336182_0.4747865164310505">    </mpchecktext></span>  <span style="font-size: 14px;color: rgb(26, 26, 26);font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;text-align: start;letter-spacing: 2px;">壮声英概，懦士为之兴起，百姓为之欢呼。<mpchecktext contenteditable="false" id="1582717336183_0.24533900467685">    </mpchecktext></span>  <span style="letter-spacing: 2px;"><span style="color: rgb(26, 26, 26);font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;text-align: start;font-size: 14px;">虽说圣天子一见三叹息，赞许他的英勇行为，可惜</span><span style="color: rgb(26, 26, 26);font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;font-size: 14px;text-align: start;">他碰上的不是汉武帝这样的雄主，再加上他“归正人”的尴尬身份，注定了他没有机会大展宏图，实现人生夙愿。<mpchecktext contenteditable="false" id="1582717336184_0.7984060021171848">    </mpchecktext></span><span style="color: rgb(26, 26, 26);font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;font-size: 14px;text-align: start;"></span><span style="font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;font-size: 14px;text-align: start;">从25岁被任命为江阴签判步入仕途，一直到42岁被弹劾罢官，在人生锐气风发的时候，辛弃疾都没有机会亲临一线上阵杀敌，期间被</span><span style="font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, &quot;WenQuanYi Micro Hei&quot;, sans-serif;text-align: start;font-size: 14px;">频繁调动到多地担任地方官职，负责地方民政和社会治安等事务，其中<span style="font-family: arial, 宋体, sans-serif;text-indent: 28px;">平定过荆南</span></span><span style="font-size: 14px;">茶商赖文政起事，又创制<strong>飞虎军</strong>以弹压湖湘。<mpchecktext contenteditable="false" id="1582717336185_0.6593576524314335">    </mpchecktext></span></span>  <span style="letter-spacing: 1px;font-size: 14px;"></span></section><p style="text-align: center;">  <img class="rich_pages lozad" data-ratio="0.626" data-s="300,640" data-type="jpeg" data-w="500" style="text-align: center;white-space: normal;background-color: rgb(255, 255, 255);border-color: rgb(0, 0, 0);border-style: solid;border-width: 2px;width: 557px;height: 349px;" data-backw="500" data-backh="313" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/WO2hoibPMGkVhibnauWXvQIj3ZCmfWNPq0qySLjzzkjo5WfjGN6g8OT1IiaV9sbR7T9P5ZmbCKlDMEpibiaxCKdmmEw/640?wx_fmt=jpeg"></p><p style="margin: 10px 0.5em;">  <span style="letter-spacing: 1px;background-color: rgb(255, 255, 255);font-size: 14px;">辛弃疾的文学成就极高，但这并不是他人生的追求，文豪非所愿，但求复九州。<mpchecktext contenteditable="false" id="1582717336186_0.942808867200496">    </mpchecktext></span>  <span style="letter-spacing: 1px;background-color: rgb(255, 255, 255);font-family: arial, 宋体, sans-serif;font-size: 14px;text-align: start;text-indent: 28px;">1207年秋，辛弃疾病逝，享年六十八岁。<mpchecktext contenteditable="false" id="1582717336189_0.43213406176176883">    </mpchecktext>临终时还大呼“杀贼！<mpchecktext contenteditable="false" id="1582717336187_0.49017884671733003">    </mpchecktext>杀贼！<mpchecktext contenteditable="false" id="1582717336188_0.6720273348161332">    </mpchecktext>”，含恨而去。<mpchecktext contenteditable="false" id="1582717336190_0.02600952707704285">    </mpchecktext>纵观辛弃疾这一生，当之无愧的国士无双，</span>  <span style="letter-spacing: 1px;background-color: rgb(255, 255, 255);color: rgb(71, 71, 71);font-family: arial, 宋体, sans-serif;font-size: 14px;text-align: start;text-indent: 28px;">他是真正的文武全才，文能提笔安天下，武能上马定乾坤。<mpchecktext contenteditable="false" id="1582717336191_0.04254228333794541">    </mpchecktext></span></p><p style="margin-left: 0.5em;margin-right: 0.5em;">  <span style="letter-spacing: 1px;background-color: rgb(255, 255, 255);color: rgb(71, 71, 71);font-family: arial, 宋体, sans-serif;font-size: 14px;text-align: start;text-indent: 28px;"></span>  <img class="rich_pages lozad" data-ratio="0.6138888888888889" data-s="300,640" data-type="jpeg" data-w="720" style="text-align: center;white-space: normal;background-color: rgb(255, 255, 255);width: 100%;height: auto;" data-backw="561" data-backh="344" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/WO2hoibPMGkVhibnauWXvQIj3ZCmfWNPq0bicOubETq1PFuWQic1Jt8jZJIiaTicO8rxe9M2EMPZLWUMiaLBACEWwzicicA/640?wx_fmt=jpeg"></p><p style="margin-left: 0.5em;margin-right: 0.5em;">  <br></p><section data-mpa-template="t" mpa-from-tpl="t">  <section data-id="91387" mpa-from-tpl="t">    <section data-role="paragraph" style="border-width: 0px;border-style: none;border-color: initial;padding: 0px;" mpa-from-tpl="t">      <section style="padding: 10px;" mpa-from-tpl="t">        <section style="width: 300px;margin: 0 auto;" mpa-from-tpl="t">          <section style="width: 35px;margin-left: -5px;margin-bottom: -25px;" mpa-from-tpl="t">            <img data-ratio="1.141025641025641" data-w="78" data-width="100%" style="display: block;width: 100%;" data-src="https://mmbiz.qpic.cn/mmbiz_png/b96CibCt70iaaBAicDNCSs6H0O0SBGSALfnicuk846JY485BzfZlLhQaE1NtHPIuXWxDwll6mD5XVDiczRxHRHB8CtQ/640" class="lozad">             <mpchecktext contenteditable="false" id="1582717336192_0.17828187604439072">            </mpchecktext>          </section>          <section style="width: 290px;margin: 0px auto;border-width: 1px;border-style: solid;border-color: rgb(85, 85, 85);border-radius: 15px;" mpa-from-tpl="t">            <section style="margin: 10px;display: flex;display: -webkit-flex;align-items:flex-end;-webkit-align-items:flex-end;" mpa-from-tpl="t">              <section style="width: 45%;" data-width="45%" mpa-from-tpl="t">                <img data-cropselx1="0" data-cropselx2="121" data-cropsely1="0" data-cropsely2="121" data-ratio="1" data-type="jpeg" data-w="900" data-width="100%" style="width: 121px;display: block;height: 121px;" title="undefined" data-src="https://mmbiz.qpic.cn/mmbiz_jpg/WO2hoibPMGkUtLKNkIPYJaLjsv4ibwSPJOxPPbXh54SPAtdHONM06wxrhTvdBz3iabZ8JAm4icY0ibDw4s5deuOibRKA/640?wx_fmt=jpeg" class="lozad">                 <mpchecktext contenteditable="false" id="1582717336193_0.3587980177526784">                </mpchecktext>              </section>              <section style="width: 55%;padding-left: 10px;" data-width="55%" mpa-from-tpl="t">                <p style="margin: 0px;color: rgb(248, 111, 111);line-height: 30px;" data-brushtype="text">                  <span style="display: inline-block;width: 20px;background-color:#f86f6f;"><img data-ratio="0.7333333333333333" data-w="30" data-width="100%" style="width: 100%;display: block;" data-src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=2421048575,3384721293&fm=26&gp=0.jpg" class="lozad"></span>                  <mpchecktext contenteditable="false" id="1582717336194_0.1653221848870543">                  </mpchecktext>                </p>                <p style="margin: 30px 0px 10px;text-align: center;font-size: 18px;font-weight: 600;color: rgb(102, 102, 102);">                  <span style="font-size: 15px;">愿诸位当去病、弃疾</span>                </p>              </section>            </section>          </section>        </section>      </section>    </section>  </section></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​                                                               思汉之霍去病勇冠三军，惜其天妒英才&lt;br&gt;​                                                   
      
    
    </summary>
    
    
      <category term="历史人物" scheme="http://yoursite.com/tags/%E5%8E%86%E5%8F%B2%E4%BA%BA%E7%89%A9/"/>
    
  </entry>
  
  <entry>
    <title>Java自学笔记</title>
    <link href="http://yoursite.com/post/1770f1b2.html"/>
    <id>http://yoursite.com/post/1770f1b2.html</id>
    <published>2019-09-11T07:48:06.000Z</published>
    <updated>2019-09-11T08:02:48.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-Java入门"><a href="#01-Java入门" class="headerlink" title="01 Java入门"></a>01 Java入门</h2><h3 id="1-1为什么学Java"><a href="#1-1为什么学Java" class="headerlink" title="1.1为什么学Java"></a>1.1为什么学Java</h3><p> 想做工程师，开发极客</p><h3 id="1-2-Java-版本"><a href="#1-2-Java-版本" class="headerlink" title="1.2 Java 版本"></a>1.2 Java 版本</h3><p>Java SE(Java Platform Standard Edition)标准版，是为开发普通桌面和商务应用程序提供解决方案。</p><p>Java EE(Java  Platform Enterpriser Edition)企业版，是为开发企业级应用程序提供解决方案。</p><p>Java ME(Java Platform Micro Edition)小型版， 是为开发电子消费产品和嵌入式设备提供的解决方案。</p><h3 id="1-3-JDK"><a href="#1-3-JDK" class="headerlink" title="1.3 JDK"></a>1.3 JDK</h3><p>JDK(Java Development Kit),是 Java的核心，包括Java编译器，Java运行环境， Java 打包工具， Java文档生成工具等。</p><p>JRE(Java Runtime Environment),Java 运行环境。 JDK中自带了JRE.</p><h4 id="1-3-1-JDK的安装"><a href="#1-3-1-JDK的安装" class="headerlink" title="1.3.1 JDK的安装"></a>1.3.1 JDK的安装</h4><p>win10 系统  64位</p><p>Oracle 官网 <a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a> 下载对应的JDK安装文件，我选择的是JDK 8.0   <a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html，" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html，</a>  <strong>下载前先选择 Accept License Agreement，然后Windows x64 版本</strong></p><p><img alt="img" data-src="https://img-blog.csdnimg.cn/20190911151837915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMDU5MzQz,size_16,color_FFFFFF,t_70" class="lozad"></p><p><strong>安装：一直下一步就可以</strong>，可以自定义安装路径，一般默认在C盘里。</p><p><img alt="img" data-src="https://img-blog.csdnimg.cn/20190911151918798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMDU5MzQz,size_16,color_FFFFFF,t_70" class="lozad"></p><ul><li>bin目录 ： 用于 存放一些可执行程序，如Javac.exe 和 Java.exe 。</li><li>jre 目录 ： 为Java 程序提供运行环境</li><li>include 目录 ： 由于JDK是由C和C++实现的，因此用于存放C语言的头文件</li><li>lib 目录 ： library的缩写，是Java 类库或库文件</li><li>src.zip文件： src中存放了JDK核心类的源代码</li></ul><h3 id="1-4-环境变量"><a href="#1-4-环境变量" class="headerlink" title="1.4 环境变量"></a>1.4 环境变量</h3><p>JDK安装完后要进行JDK环境变量的配置，path环境变量和classpath环境变量</p><ul><li>path环境变量：用于告知操作系统到指定路径寻找JDK</li><li>classpath环境变量： 用于告知JDK到指定路径查找类文件（class文件）</li></ul><h4 id="1-4-1-path环境变量配置"><a href="#1-4-1-path环境变量配置" class="headerlink" title="1.4.1 path环境变量配置"></a>1.4.1 path环境变量配置</h4><p>保存一系列路径，路径间用英文“；”相隔。</p><p><strong>配置步骤：</strong></p><ol><li><p>桌面 选择<strong>我的电脑</strong>或<strong>此电脑</strong>，选择<strong>属性</strong>；</p></li><li><p>单击  <strong>高级系统设置</strong>（左上侧）；</p></li><li><p>单击 <strong>环境变量</strong>（右下侧）；</p></li><li><p>JAVA_HOME的配置</p><p>系统变量(s)中，单击 <strong>新建(W)…</strong>(左下侧) </p><p>变量名(N): JAVA_HOME</p><p>变量值(V):jdk安装路径，复制或浏览目录即可，我的是安装路径是C:\Program Files\Java\jdk1.8.0_181</p><p><img alt="1-4-1JAVAHOME" data-src="https://img-blog.csdnimg.cn/20190911151933433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMDU5MzQz,size_16,color_FFFFFF,t_70" class="lozad"></p></li><li><p>将JAVA_HOME配置到path环境变量中，双击path,新建<strong>%JAVA_HOME%\bin;C:\Program Files\Java\jdk1.8.0_181\bin</strong>（貌似只要路径就可以了）和<strong>C:\Program Files\Java\jre1.8.0_181\bin</strong>,（建议上移到顶端）其中%JAVA_HOME%代表环境变量JAVA_HOME的当前值</p><p><img alt="1-4-1path" data-src="https://img-blog.csdnimg.cn/20190911152000945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMDU5MzQz,size_16,color_FFFFFF,t_70" class="lozad"></p></li><li><p>查看配置是否成功</p><p><strong>win + R</strong>  <em>或</em>右键<strong>桌面左下角</strong>window图标选择<strong>运行</strong>，输入<strong>cmd</strong>   ,执行<strong>javac</strong>命令,正常显示帮助信息，说明系统path环境变量配置成功。</p><p><img alt="javac" data-src="https://img-blog.csdnimg.cn/20190911152916373.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMDU5MzQz,size_16,color_FFFFFF,t_70" class="lozad"></p><p>​</p></li></ol><h4 id="1-4-2-classpath-环境变量配置"><a href="#1-4-2-classpath-环境变量配置" class="headerlink" title="1.4.2 classpath 环境变量配置"></a>1.4.2 classpath 环境变量配置</h4><p>当Java虚拟机需要运行一个类时，会在classpath环境变量中所定义的路径下寻找所需的class文件和类包。</p><p>在设置classpath环境变量时，必须在配置路径前添加“. ;”(当前目录),用于识别当前目录下的Java类，JDK5.0后会自动设置。</p><p>变量名(N):   CLASSPATH</p><p>变量值(V):    .;%JAVA_HOME%lib\dt.jar;%JAVA_HOME%\lib\tools.jar;<img alt="1-4-2classpath" data-src="https://img-blog.csdnimg.cn/20190911152018706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMDU5MzQz,size_16,color_FFFFFF,t_70" class="lozad">     </p><p><strong>至此，JDK的环境变量配置完毕，就可以编写Java程序啦**</strong></p><h3 id="1-5-第一个Java-程序"><a href="#1-5-第一个Java-程序" class="headerlink" title="1.5 第一个Java 程序"></a>1.5 第一个Java 程序</h3><h5 id="1-5-1-编写第一个Java程序"><a href="#1-5-1-编写第一个Java程序" class="headerlink" title="1.5.1 编写第一个Java程序"></a>1.5.1 编写第一个Java程序</h5><p>在桌面(随你在哪个位置，不过要命令行窗口要cd进入相应的位置）右键新建文本文档，重命名为HelloWorld.java(文件名和类名需要一致）。然后用记事本/Sublime Text /Nodepad++打开文档，编写如下Java代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我人生的第一个Java程序，哈哈哈，HelloWorld! "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1、win + R  , cmd , 在命令行窗口输入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd  Desktop         #进入桌面，即Java文件(HelloWorld.java)所在的目录</span><br></pre></td></tr></table></figure><p><strong>2、 javac HelloWorld.java命令，对源文件进行编译</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac  HelloWorld.java</span><br></pre></td></tr></table></figure><p>javac 命令执行完毕后，会在当前目录下（桌面）生成一个字节码文件HelloWorld.class。</p><p>3、运行Java程序</p><p>在命令行窗口输入 java HelloWorld 命令，运行HelloWorld.class文件，输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java HelloWorld</span><br></pre></td></tr></table></figure><p><strong>若输出中文结果乱码</strong></p><p>修改jdk默认编码： 点击计算机→属性→高级系统设置→高级→环境变量，系统变量→新建“JAVA_TOOL_OPTIONS”变量，值为“-Dfile.encoding=UTF-8”</p><p><img alt="第一个Java程序" data-src="https://img-blog.csdnimg.cn/20190911152117900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMDU5MzQz,size_16,color_FFFFFF,t_70" class="lozad"></p><h5 id="1-5-2-Java-程序的运行机制"><a href="#1-5-2-Java-程序的运行机制" class="headerlink" title="1.5.2  Java 程序的运行机制"></a>1.5.2  Java 程序的运行机制</h5><p>成功运行Java程序必须经过<strong>编译</strong>和<strong>运行</strong>两个步骤。</p><p>HelloWorld.java →编译→HelloWorld.class字节码文件 →→Java虚拟机JVM解释执行，不同的操作系统使用不同版本的JVM，跨平台，一次编写，到处运行。</p><h3 id="1-6-Eclipse的安装和使用"><a href="#1-6-Eclipse的安装和使用" class="headerlink" title="1.6 Eclipse的安装和使用"></a>1.6 Eclipse的安装和使用</h3><h4 id="1-6-1-Eclipse的安装与启动"><a href="#1-6-1-Eclipse的安装与启动" class="headerlink" title="1.6.1 Eclipse的安装与启动"></a>1.6.1 Eclipse的安装与启动</h4><p>Eclipse是针对Java编程的集成开发环境（IDE),本身只是一个框架和一组服务，其所有的功能都是将插件组件加入到Eclipse框架实现的。另外IntelliJ IDEA 也超级好用。</p><h5 id="1-Eclipse的安装"><a href="#1-Eclipse的安装" class="headerlink" title="1.Eclipse的安装"></a>1.Eclipse的安装</h5><p>百度网盘 链接：<a href="https://pan.baidu.com/s/18zfhZS03G4FkQmRBSu5qVA" target="_blank" rel="noopener">https://pan.baidu.com/s/18zfhZS03G4FkQmRBSu5qVA</a> 密码：g0c0</p><p>官网：www.eclipse.org 下载</p><p>下载好的压缩包解压保存到指定目录下就可以使用了，</p><h5 id="2-Eclipse-的-启动"><a href="#2-Eclipse-的-启动" class="headerlink" title="2. Eclipse 的 启动"></a>2. Eclipse 的 启动</h5><p>解压完成后，双击目录中eclipse.exe文件即可运行，此时会弹出一个对话框，提示选择工作空间(Workspace),可以使用默认的空间也可以更改，选中Use this as the default and do not ask again复选框可以是以后启动不在进行工作空间的设置。</p><h5 id="3、Eclipse-的工作台"><a href="#3、Eclipse-的工作台" class="headerlink" title="3、Eclipse 的工作台"></a>3、Eclipse 的工作台</h5><p><img alt="1-6-1Elipse" data-src="https://img-blog.csdnimg.cn/201909111533373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMDU5MzQz,size_16,color_FFFFFF,t_70" class="lozad"></p><ul><li><h5 id="Package-Explorer-包资源管理器视图，最左边空白区域）：用于显示项目文件的组成结构"><a href="#Package-Explorer-包资源管理器视图，最左边空白区域）：用于显示项目文件的组成结构" class="headerlink" title="Package Explorer(包资源管理器视图，最左边空白区域）：用于显示项目文件的组成结构"></a>Package Explorer(包资源管理器视图，最左边空白区域）：用于显示项目文件的组成结构</h5></li><li><h5 id="Editor-文本编辑器，正中间空白区域-：-用于编写代码的区域，编辑器具有代码提示，自动补全等功能"><a href="#Editor-文本编辑器，正中间空白区域-：-用于编写代码的区域，编辑器具有代码提示，自动补全等功能" class="headerlink" title="Editor(文本编辑器，正中间空白区域)： 用于编写代码的区域，编辑器具有代码提示，自动补全等功能"></a>Editor(文本编辑器，正中间空白区域)： 用于编写代码的区域，编辑器具有代码提示，自动补全等功能</h5></li><li><h5 id="Problems-问题视图，正下方空白区域-并选择Problems）：-显示项目中的一些警告和错误"><a href="#Problems-问题视图，正下方空白区域-并选择Problems）：-显示项目中的一些警告和错误" class="headerlink" title="Problems(问题视图，正下方空白区域,并选择Problems）： 显示项目中的一些警告和错误"></a>Problems(问题视图，正下方空白区域,并选择Problems）： 显示项目中的一些警告和错误</h5></li><li><h5 id="Console-控制台视图，正下方空白区域，并选择Console-控制台）：显示程序运行时的输出信息、异常和错误"><a href="#Console-控制台视图，正下方空白区域，并选择Console-控制台）：显示程序运行时的输出信息、异常和错误" class="headerlink" title="Console(控制台视图，正下方空白区域，并选择Console/控制台）：显示程序运行时的输出信息、异常和错误"></a>Console(控制台视图，正下方空白区域，并选择Console/控制台）：显示程序运行时的输出信息、异常和错误</h5></li><li><h5 id="Outline-大纲视图）：显示代码中类的结构"><a href="#Outline-大纲视图）：显示代码中类的结构" class="headerlink" title="Outline(大纲视图）：显示代码中类的结构"></a>Outline(大纲视图）：显示代码中类的结构</h5></li><li><h5 id="以上视图位置可以叠放在一起，也可单独出现，并且位置可以随意拖动改变布局效果"><a href="#以上视图位置可以叠放在一起，也可单独出现，并且位置可以随意拖动改变布局效果" class="headerlink" title="以上视图位置可以叠放在一起，也可单独出现，并且位置可以随意拖动改变布局效果"></a>以上视图位置可以叠放在一起，也可单独出现，并且位置可以随意拖动改变布局效果</h5></li></ul><h4 id="1-6-2-Eclipse-进行程序开发"><a href="#1-6-2-Eclipse-进行程序开发" class="headerlink" title="1.6.2 Eclipse 进行程序开发"></a>1.6.2 Eclipse 进行程序开发</h4><p>使用Eclipse完成HelloWorld程序的编写和运行，并在控制台上打印“Hello World!”(基本上所有语言的学习都要来下Hello World!)</p><h5 id="1-创建Java项目"><a href="#1-创建Java项目" class="headerlink" title="1. 创建Java项目"></a>1. 创建Java项目</h5><p>File(文件) → New(新建) → Java Project(项目),出现一个New Java Project 对话框，并按图中创建，单击Finish完成。          </p><p><img alt="chapter01" data-src="https://img-blog.csdnimg.cn/2019091115293465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMDU5MzQz,size_16,color_FFFFFF,t_70" class="lozad">                                                                                                                                                                                                                       </p><p>然后Package Explorer 视图中便会出现一个名称为chapter01的Java项目</p><p><img alt="chapter01-02" data-src="https://img-blog.csdnimg.cn/20190911153053392.png" class="lozad"></p><h5 id="2、-在项目下创建包"><a href="#2、-在项目下创建包" class="headerlink" title="2、 在项目下创建包"></a>2、 在项目下创建包</h5><p>在Package Explorer( 包资源管理器 )视图中，右击chapter01项目下的src文件夹，选择New（新建）→ Package（包），会出现一个New Java Package对话框，如下图。包命名通常以公司域名的反写作为前缀。</p><p><img alt="chapter01-03" data-src="https://img-blog.csdnimg.cn/2019091115310065.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMDU5MzQz,size_16,color_FFFFFF,t_70" class="lozad"></p><h5 id="3、创建Java类"><a href="#3、创建Java类" class="headerlink" title="3、创建Java类"></a>3、创建Java类</h5><p>右击包名，选择New( 新建）→  Class（类），会出现一个New Java Class 对话框，如图创建一个HelloWorld类。</p><p><img alt="chapter01-04" data-src="https://img-blog.csdnimg.cn/20190911153110204.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMDU5MzQz,size_16,color_FFFFFF,t_70" class="lozad"></p><p> 单击完成，包下出现一个HelloWorld.java文件。</p><p><img alt="chapter01-05" data-src="https://img-blog.csdnimg.cn/20190911153117109.png" class="lozad"></p><h5 id="4、编写程序代码并运行"><a href="#4、编写程序代码并运行" class="headerlink" title="4、编写程序代码并运行"></a>4、编写程序代码并运行</h5><p>创建HelloWorld类后，在文本编辑器中只写入main()方法和一条输出语句“System.out.println(“Hello World !”);</p><p>运行后Console视图中看到运行结果。</p><p><img alt="img" data-src="https://img-blog.csdnimg.cn/20190911153123624.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMDU5MzQz,size_16,color_FFFFFF,t_70" class="lozad"></p><h5 id="5、包的定义与使用"><a href="#5、包的定义与使用" class="headerlink" title="5、包的定义与使用"></a>5、包的定义与使用</h5><p>Java 中的包(Package)是专门用来存放类(Class)的，通常功能相同的类存放在相同的包中</p><p>包的声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.it2m.example;              <span class="comment">//使用 package 关键字声明包   </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example01</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>在开发时，一个项目可能会使用很多包，当一个包中的类需要调用另一个包中的类时，就需要使用import关键字引入需要的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  包名.类名;   </span><br><span class="line"><span class="keyword">import</span> 包名.*;     <span class="comment">//导入该包下的所有类</span></span><br></pre></td></tr></table></figure><p>Java的核心类主要放在java包及其子包下，Java扩展的大部分类都放在javax包及其子包下。</p><ul><li>java.util：包含Java中大量工具类、集合类等，例如Collections、List、Set 等。</li><li>java.io：包含Java输入和输出有关的类和接口。</li></ul><h2 id="02-Java编程基础"><a href="#02-Java编程基础" class="headerlink" title="02   Java编程基础"></a>02   Java编程基础</h2><p>主要是语法结构，Java基础语法部分包含变量、常量、运算符、结构语句及数组等。</p><h3 id="2-1-Java-的基本语法"><a href="#2-1-Java-的基本语法" class="headerlink" title="2.1 Java 的基本语法"></a>2.1 Java 的基本语法</h3><h4 id="2-1-1-Java-代码的基本格式"><a href="#2-1-1-Java-代码的基本格式" class="headerlink" title="2.1.1  Java 代码的基本格式"></a>2.1.1  Java 代码的基本格式</h4><p>在 Java 程序中，使用<strong>class</strong>关键字定义<strong>类</strong>，所有的程序代码都放在该类中，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">     程序代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><p>Java 语言严格<strong>区分大小写</strong>，eg.定义类时，class不能写成Class,否则编译会报错。</p></li><li><p>每条功能执行语句的最后都必须用<strong>分号；</strong>结束。</p></li><li><p>一个连续的字符串不能分开在两行中书写，若字符串太长，将字符串分成两个字符串，用加号（+）连接，并在加号（+）处断行。eg:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;          </span><br><span class="line">      System.out.println(<span class="string">"Hello"</span>+</span><br><span class="line">      <span class="string">"World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-1-2-Java-中的注释"><a href="#2-1-2-Java-中的注释" class="headerlink" title="2.1.2  Java 中的注释"></a>2.1.2  Java 中的注释</h4><p>注释，即作解释，使得代码更易理解，注释内容不会被程序解释执行。</p><h5 id="1、单行注释"><a href="#1、单行注释" class="headerlink" title="1、单行注释"></a>1、单行注释</h5><p>对程序的某一行代码进行解释，用符号//表示。//后面的为注释内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int x = 1;   //定义一个整型变量x</span><br></pre></td></tr></table></figure><h5 id="2、多行注释"><a href="#2、多行注释" class="headerlink" title="2、多行注释"></a>2、多行注释</h5><p>注释内容可以为多行，以符号/<em>开头，以符号 </em>/结尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/* int x = 1;</span><br><span class="line">   声明整型变量x,并初始化为1； */</span><br></pre></td></tr></table></figure><h5 id="3、文档注释"><a href="#3、文档注释" class="headerlink" title="3、文档注释"></a>3、文档注释</h5><p>常用于对类和方法的说明，以符号 / <em> </em> 开头，以符号 */结尾。这种方式可以使用Eclipse工具将文档注释导出并生成帮助文档，方便他人使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/ * *</span><br><span class="line">  * Person实体类</span><br><span class="line">  * /</span><br></pre></td></tr></table></figure><h4 id="2-1-3-Java-中的-标识符"><a href="#2-1-3-Java-中的-标识符" class="headerlink" title="2.1.3  Java 中的 标识符"></a>2.1.3  Java 中的 标识符</h4><p>编写程序的过程中，经常需要定义特殊符号来标记一些名称，如包名、类名、变量名、方法名以及参数名等，这些符号被称之为标识符。</p><ol><li>标识符可以由字母、数字、美元符号($)和下划线(_)组成，但不能以数字开头，也不可以用 Java 中的关键字</li><li>类名和接口名每个单词首字母一律大写 , Animal</li><li>包名所有字母一律小写，com.it2m.chapter02</li><li>常量名所有字母一律大写，单词之间用下划线连接, MY_SCORE</li><li>变量名和方法名的第一个单词首字母小写，从第二个单词开始每个单词首字母大写，studentName</li><li>为了程序代码便于阅读，应该定义有实际意义的英文单词以定义标识符</li></ol><h4 id="2-1-4-Java-中的关键字"><a href="#2-1-4-Java-中的关键字" class="headerlink" title="2.1.4  Java 中的关键字"></a>2.1.4  Java 中的关键字</h4><p>关键字是编程语言中已经定义好的并具有特殊含义的单词，都是小写，Java中所有关键字：</p><div class="table-container"><table><thead><tr><th style="text-align:center">abstract</th><th style="text-align:center">continue</th><th style="text-align:center">for</th><th style="text-align:center">new</th><th style="text-align:center">switch</th></tr></thead><tbody><tr><td style="text-align:center"><strong>assert</strong></td><td style="text-align:center"><strong>default</strong></td><td style="text-align:center"><strong>goto</strong></td><td style="text-align:center"><strong>package</strong></td><td style="text-align:center"><strong>synchronized</strong></td></tr><tr><td style="text-align:center"><strong>boolean</strong></td><td style="text-align:center"><strong>do</strong></td><td style="text-align:center"><strong>if</strong></td><td style="text-align:center"><strong>private</strong></td><td style="text-align:center"><strong>this</strong></td></tr><tr><td style="text-align:center"><strong>break</strong></td><td style="text-align:center"><strong>double</strong></td><td style="text-align:center"><strong>implements</strong></td><td style="text-align:center"><strong>protected</strong></td><td style="text-align:center"><strong>throw</strong></td></tr><tr><td style="text-align:center"><strong>byte</strong></td><td style="text-align:center"><strong>else</strong></td><td style="text-align:center"><strong>import</strong></td><td style="text-align:center"><strong>public</strong></td><td style="text-align:center"><strong>throws</strong></td></tr><tr><td style="text-align:center"><strong>case</strong></td><td style="text-align:center"><strong>enum</strong></td><td style="text-align:center"><strong>instanceof</strong></td><td style="text-align:center"><strong>return</strong></td><td style="text-align:center"><strong>transient</strong></td></tr><tr><td style="text-align:center"><strong>catch</strong></td><td style="text-align:center"><strong>extends</strong></td><td style="text-align:center"><strong>int</strong></td><td style="text-align:center"><strong>short</strong></td><td style="text-align:center"><strong>try</strong></td></tr><tr><td style="text-align:center"><strong>char</strong></td><td style="text-align:center"><strong>final</strong></td><td style="text-align:center"><strong>interface</strong></td><td style="text-align:center"><strong>static</strong></td><td style="text-align:center"><strong>void</strong></td></tr><tr><td style="text-align:center"><strong>class</strong></td><td style="text-align:center"><strong>finally</strong></td><td style="text-align:center"><strong>long</strong></td><td style="text-align:center"><strong>strictfp</strong></td><td style="text-align:center"><strong>volatile</strong></td></tr><tr><td style="text-align:center"><strong>const</strong></td><td style="text-align:center"><strong>float</strong></td><td style="text-align:center"><strong>native</strong></td><td style="text-align:center"><strong>super</strong></td><td style="text-align:center"><strong>while</strong></td></tr></tbody></table></div><h3 id="2-2-Java-中的变量"><a href="#2-2-Java-中的变量" class="headerlink" title="2.2   Java 中的变量"></a>2.2   Java 中的变量</h3><p>在程序运行期间，随时可能产生一些临时数据，应用程序会将这些数据保存在一些内存单元中，每个内存单元都用一个标识符标识。这些内存单元被称为变量，定义的标识符就是变量名，内存单元中存储的数据就是变量的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;    <span class="comment">//定义int类型变量x,x的初始值为3</span></span><br><span class="line"><span class="keyword">int</span> y;        <span class="comment">//定义了int类型变量y,y无初始值</span></span><br><span class="line">y = x - <span class="number">1</span>; <span class="comment">//将x-1的结果赋值给y,此时y的值为2</span></span><br></pre></td></tr></table></figure><h4 id="2-2-1-变量的数据类型（两种）"><a href="#2-2-1-变量的数据类型（两种）" class="headerlink" title="2.2.1  变量的数据类型（两种）"></a>2.2.1  变量的数据类型（两种）</h4><p><img alt="img" data-src="https://img-blog.csdnimg.cn/20190911152101668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMDU5MzQz,size_16,color_FFFFFF,t_70" class="lozad"></p><p>1、整数类型变量</p><p>四种：字节型(byte)、短整型(short)、整型(int)、长整型(long)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">3</span>;  <span class="comment">//定义int类型的变量并赋值为3</span></span><br><span class="line"><span class="keyword">long</span> num = <span class="number">2300000000L</span>; <span class="comment">//所赋的值超出了int类型的取值范围，后面必须加上L</span></span><br></pre></td></tr></table></figure><p>2、浮点数类型变量</p><p>用于存储小数数值，两种：单精度浮点数(float)和双精度浮点数(double，更精确)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f = <span class="number">111.2f</span>;   <span class="comment">//为一个float类型的变量赋值，后面必须加上f</span></span><br><span class="line"><span class="keyword">double</span> d = <span class="number">111.2</span>;   <span class="comment">//为一个double类型的变量赋值，后面可以省略d</span></span><br></pre></td></tr></table></figure><p>3、布尔类型变量</p><p>true 和 false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> b = <span class="keyword">false</span>;      <span class="comment">//声明一个boolean类型的变量b，初始值为false</span></span><br><span class="line">b = <span class="keyword">true</span>;               <span class="comment">//改变b变量的值为true</span></span><br></pre></td></tr></table></figure><p>4、字符类型变量</p><p>存储单一字符,char类型表示，Java 中每个char类型的字符变量都会占用2个字节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c = <span class="string">'b'</span>;       <span class="comment">//为一个char类型的变量赋值字符b,('')为一对英文半角格式的单引号</span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-变量的类型转换"><a href="#2-2-2-变量的类型转换" class="headerlink" title="2.2.2 变量的类型转换"></a>2.2.2 变量的类型转换</h4><p>在程序中，当把一种数据类型的值赋给另一种数据类型的变量时，需要进行数据类型转换。</p><p>两种: 自动类型转换和强制类型转换。</p><h5 id="1-自动数据类型转换-隐式类型转换"><a href="#1-自动数据类型转换-隐式类型转换" class="headerlink" title="1. 自动数据类型转换 ( 隐式类型转换 )"></a>1. 自动数据类型转换 ( 隐式类型转换 )</h5><p>指的是两种数据类型在转换过程中不需要显示地进行声明。同时满足两个条件，第一是两种数据类型彼此兼容，第二是目标类型的取值范围大于原类型的取值范围（小到大，int类型的取值范围大于byte类型取值范围）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> i = b;  <span class="comment">//程序把byte类型的变量b转换成了int类型，无须特殊声明</span></span><br></pre></td></tr></table></figure><h5 id="2-强制类型转换-显示类型转换"><a href="#2-强制类型转换-显示类型转换" class="headerlink" title="2.强制类型转换 ( 显示类型转换 )"></a>2.强制类型转换 ( 显示类型转换 )</h5><p>两种类型彼此不兼容或目标类型取值范围小于原类型时，将无法进行自动类型转换，此时需要强制类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">目标类型 变量名 = （目标类型）值</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i;</span><br></pre></td></tr></table></figure><h4 id="2-2-3-变量的作用域"><a href="#2-2-3-变量的作用域" class="headerlink" title="2.2.3  变量的作用域"></a>2.2.3  变量的作用域</h4><p>在程序中，变量一定会被定义在某一对大括号中，该大括号所包含的代码区域就是这个变量的作用域，变量只能在这个区域起作用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，有两层大括号，其中，外层大括号所标识的代码区域就是x变量的作用域，内层大括号所标识的代码区域就是变量y的作用域。</p><h4 id="2-3-Java-中的常量"><a href="#2-3-Java-中的常量" class="headerlink" title="2.3  Java 中的常量"></a>2.3  Java 中的常量</h4><p>常量就是在程序中固定不变的值，例如数字1、字符‘a’等，常量包括整型常量，浮点数常量(1.2f, 1F, 1.23d,1.6)、布尔常量、字符常量,null常量( 表示对象的引用为空）等。</p><h4 id="2-4-Java-中的运算符"><a href="#2-4-Java-中的运算符" class="headerlink" title="2.4 Java 中的运算符"></a>2.4 Java 中的运算符</h4><p>运算符用于对数据进行算数运算、赋值和比较等操作。</p><h5 id="2-4-1-算数运算符"><a href="#2-4-1-算数运算符" class="headerlink" title="2.4.1 算数运算符"></a>2.4.1 算数运算符</h5><p>(+,-)正负，（+，-）加减，（*，/）乘除，（%）取模，即算术的求余数</p><p>自增（++）—将操作数加1，自减（—）—将操作数减1 ，</p><div class="table-container"><table><thead><tr><th style="text-align:center">先自增再赋值</th><th style="text-align:center">自增（前）</th><th style="text-align:center">a=2;b=++a;</th><th style="text-align:center">a=3;b=3;</th></tr></thead><tbody><tr><td style="text-align:center"><strong>先赋值在自增</strong></td><td style="text-align:center"><strong>自增（后）</strong></td><td style="text-align:center"><strong>a=2;b=a++;</strong></td><td style="text-align:center"><strong>a=3;b=2;</strong></td></tr><tr><td style="text-align:center"><strong>先自减再赋值</strong></td><td style="text-align:center"><strong>自减（前）</strong></td><td style="text-align:center"><strong>a=2;b=—a;</strong></td><td style="text-align:center"><strong>a=1;b=1;</strong></td></tr><tr><td style="text-align:center"><strong>先赋值在自减</strong></td><td style="text-align:center"><strong>自减（后）</strong></td><td style="text-align:center"><strong>a=2;b=a—;</strong></td><td style="text-align:center"><strong>a=1;b=2;</strong></td></tr></tbody></table></div><h5 id="2-4-2-赋值运算符"><a href="#2-4-2-赋值运算符" class="headerlink" title="2.4.2 赋值运算符"></a>2.4.2 赋值运算符</h5><p>将常量、变量或表达式的值赋给某一个变量</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">运算</th><th style="text-align:center">范例</th><th style="text-align:center">结果结果</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">赋值</td><td style="text-align:center">a=3;b=2;</td><td style="text-align:center">a=3;b=2;</td></tr><tr><td style="text-align:center">+=</td><td style="text-align:center">加等于</td><td style="text-align:center">a=3;b=2; a += b;</td><td style="text-align:center">a=a + b=5;b=2;</td></tr><tr><td style="text-align:center">-=</td><td style="text-align:center">减等于</td><td style="text-align:center">a=3;b=2; a -= b;</td><td style="text-align:center">a=a - b=1;b=2;</td></tr><tr><td style="text-align:center">*=</td><td style="text-align:center">乘等于</td><td style="text-align:center">a=3;b=2; a *= b;</td><td style="text-align:center">a=a * b=6;b=2;</td></tr><tr><td style="text-align:center">/=</td><td style="text-align:center">除等于</td><td style="text-align:center">a=3;b=2; a /= b;</td><td style="text-align:center">a=a / b=1;b=2;</td></tr><tr><td style="text-align:center">%=</td><td style="text-align:center">模等于</td><td style="text-align:center">a=3;b=2; a %= b;</td><td style="text-align:center">a=a % b=1;b=2;</td></tr></tbody></table></div><h5 id="2-4-3-比较运算符"><a href="#2-4-3-比较运算符" class="headerlink" title="2.4.3 比较运算符"></a>2.4.3 比较运算符</h5><p>用于对两个数值或变量进行比较，其结果是一个布尔值，即 true 或者 false</p><p>==(相等于)，!=（不等于）,  &lt;(小于)、&gt;(大于)、 &lt;=(小于等于)、&gt;=(大于等于)</p><h5 id="2-4-5-位运算符"><a href="#2-4-5-位运算符" class="headerlink" title="2.4.5 位运算符"></a>2.4.5 位运算符</h5><p>用于对布尔型的数据进行操作，其结果仍是一个布尔值</p><p>位运算符，应用于int,long,short,char,byte等类型，不过要用二进制，假设a=60,b=13,二进制如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A = 0011 1100</span><br><span class="line">B = 0000 1101</span><br><span class="line">-----------------</span><br><span class="line">A&amp;B = 0000 1100</span><br><span class="line">A | B = 0011 1101</span><br><span class="line">A ^ B = 0011 0001</span><br><span class="line">~A= 1100 0011</span><br></pre></td></tr></table></figure><p>下表列出了位运算符的基本运算,假设整数变量A的值为60和变量B的值为13：</p><div class="table-container"><table><thead><tr><th style="text-align:center">操作符</th><th style="text-align:center">描述</th><th>例子</th></tr></thead><tbody><tr><td style="text-align:center">＆（位与）</td><td style="text-align:center">如果相对应位都是1，则结果为1，否则为0</td><td>（A＆B），得到12，即0000 1100</td></tr><tr><td style="text-align:center">\</td><td style="text-align:center">(位或)</td><td>如果相对应位都是0，则结果为0，否则为1</td><td>（A \</td><td>B）得到61，即 0011 1101</td></tr><tr><td style="text-align:center">^（异或）</td><td style="text-align:center">如果相对应位值相同，则结果为0，否则为1</td><td>（A ^ B）得到49，即 0011 0001</td></tr><tr><td style="text-align:center">〜</td><td style="text-align:center">按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td><td>（〜A）得到-61，即1100 0011</td></tr><tr><td style="text-align:center">&lt;&lt;</td><td style="text-align:center">按位左移运算符。左操作数按位左移右操作数指定的位数。</td><td>A &lt;&lt; 2得到240，即 1111 0000</td></tr><tr><td style="text-align:center">&gt;&gt;</td><td style="text-align:center">按位右移运算符。左操作数按位右移右操作数指定的位数。</td><td>A &gt;&gt; 2得到15即 1111</td></tr><tr><td style="text-align:center">&gt;&gt;&gt;</td><td style="text-align:center">按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td><td>A&gt;&gt;&gt;2得到15即0000 1111</td></tr></tbody></table></div><h5 id="2-4-6逻辑运算符"><a href="#2-4-6逻辑运算符" class="headerlink" title="2.4.6逻辑运算符"></a>2.4.6逻辑运算符</h5><p>下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假</p><div class="table-container"><table><thead><tr><th>操作符</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td><td>（A &amp;&amp; B）为假。</td></tr><tr><td>\</td><td>\</td><td></td><td>称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td><td>（A \</td><td>\</td><td>B）为真。</td></tr><tr><td>！</td><td>称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td><td>！（A &amp;&amp; B）为真。</td></tr></tbody></table></div><h5 id="2-4-7-运算符的优先级"><a href="#2-4-7-运算符的优先级" class="headerlink" title="2.4.7 运算符的优先级"></a>2.4.7 运算符的优先级</h5><p>表达式中所有运算符参与运算的先后顺序</p><h4 id="2-5-选择结构语句"><a href="#2-5-选择结构语句" class="headerlink" title="2.5  选择结构语句"></a>2.5  选择结构语句</h4><h5 id="2-5-1-if-条件语句"><a href="#2-5-1-if-条件语句" class="headerlink" title="2.5.1 if 条件语句"></a>2.5.1 if 条件语句</h5><h6 id="1-if-语句"><a href="#1-if-语句" class="headerlink" title="1. if 语句"></a>1. if 语句</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;</span><br><span class="line"> <span class="comment">//如果布尔表达式为true将执行的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-if…else语句"><a href="#2-if…else语句" class="headerlink" title="2. if…else语句"></a>2. if…else语句</h6><p>f 语句后面可以跟 else 语句，当 if 语句的布尔表达式值为 false 时，else 语句块会被执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;</span><br><span class="line">    <span class="comment">//如果布尔表达式的值为真，执行语句1</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="comment">//否则执行语句2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-if…else-if…else-语句"><a href="#3-if…else-if…else-语句" class="headerlink" title="3.  if…else if…else 语句"></a>3.  if…else if…else 语句</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式 <span class="number">1</span>)&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式 1的值为true执行语句1</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式 <span class="number">2</span>)&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式 2的值为true执行语句2</span></span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式 n)&#123;</span><br><span class="line">   <span class="comment">//如果布尔表达式 n的值为true执行语句n</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">//如果以上布尔表达式都不为true执行语句n+1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，嵌套的if…else语句也是合法的</p><h5 id="2-5-2-switch-case-条件语句"><a href="#2-5-2-switch-case-条件语句" class="headerlink" title="2.5.2   switch  case 条件语句"></a>2.5.2   switch  case 条件语句</h5><p>switch case 语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">  <span class="keyword">case</span> value <span class="number">1</span>:</span><br><span class="line">    执行语句<span class="number">1</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> value <span class="number">2</span>:</span><br><span class="line">    执行语句<span class="number">2</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">      .</span><br><span class="line">      .</span><br><span class="line">      .</span><br><span class="line">  <span class="keyword">case</span> value n:</span><br><span class="line">    执行语句n</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span> :</span><br><span class="line">    执行语句n+<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。</strong></p><p>switch case 语句有如下规则：</p><ul><li>switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。</li><li>switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要<strong>比较的值</strong>和<strong>冒号</strong>。</li><li>case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是<strong>常量</strong>或者字面常量。</li><li>当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。</li><li>当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。</li><li>switch 语句可以包含一个 default 分支，该分支一般是 switch 语句的最后一个分支（可以在任何位置，但建议在最后一个）。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。</li></ul><h4 id="2-6-循环结构语句"><a href="#2-6-循环结构语句" class="headerlink" title="2.6  循环结构语句"></a>2.6  循环结构语句</h4><p>顺序结构的程序语句只能被执行一次。如果您想要同样的操作执行多次,，就需要使用循环结构。</p><p>Java中有三种主要的循环结构：</p><ul><li><strong>while</strong> 循环</li><li><strong>do…while</strong> 循环</li><li><strong>for</strong> 循环</li></ul><h5 id="2-6-1-while-循环"><a href="#2-6-1-while-循环" class="headerlink" title="2.6.1 while 循环"></a>2.6.1 while 循环</h5><p>只要循环条件成立（布尔表达式为true)，循环就会一直执行下去，直到条件不成立，while循环结束,它的语法结构为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)&#123;</span><br><span class="line">  <span class="comment">//循环内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-6-2-do…while循环"><a href="#2-6-2-do…while循环" class="headerlink" title="2.6.2 do…while循环"></a>2.6.2 do…while循环</h5><p>对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</p><p>do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">&#125;<span class="keyword">while</span>(循环条件)；</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>布尔表达式( 循环条件）在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。</p><h5 id="2-6-3-for-循环"><a href="#2-6-3-for-循环" class="headerlink" title="2.6.3  for 循环"></a>2.6.3  for 循环</h5><p>一般用于执行前就确定循环次数的情况，语法格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="number">1</span>初始化表达式; <span class="number">2</span>循环条件; <span class="number">3</span>操作表达式)&#123;</span><br><span class="line">    <span class="comment">// 执行语句4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li><p>{}中执行语句为循环体，注意for关键字后()中内容用分号( ; )分隔。</p></li><li><p>最先执行初始化步骤1。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</p></li><li><p>然后，检测布尔表达式的值2。如果为 true，循环体被执行4。如果为false，循环终止，开始执行循环体后面的语句5。</p></li><li><p>执行一次循环4后，更新循环控制变量3。</p></li><li><p>再次检测布尔表达式2。循环执行上面的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">10</span>; x &lt; <span class="number">20</span>; x = x+<span class="number">1</span>) &#123;</span><br><span class="line">         System.out.print(<span class="string">"value of x : "</span> + x );</span><br><span class="line">         System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">value of x : <span class="number">10</span></span><br><span class="line">value of x : <span class="number">11</span></span><br><span class="line">value of x : <span class="number">12</span></span><br><span class="line">value of x : <span class="number">13</span></span><br><span class="line">value of x : <span class="number">14</span></span><br><span class="line">value of x : <span class="number">15</span></span><br><span class="line">value of x : <span class="number">16</span></span><br><span class="line">value of x : <span class="number">17</span></span><br><span class="line">value of x : <span class="number">18</span></span><br><span class="line">value of x : <span class="number">19</span></span><br></pre></td></tr></table></figure><p>​</p></li></ul><p><strong>Java 增强 for 循环</strong></p><p>Java5 引入了一种主要用于<strong>数组</strong>的增强型 for 循环。</p><p>Java 增强 for 循环语法格式如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明语句 ： 表达式)&#123;</span><br><span class="line">    <span class="comment">// 代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>声明语句：</strong>声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p><p><strong>表达式：</strong>表达式是要访问的数组名，或者是返回值为数组的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> [] numbers = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> x : numbers )&#123;</span><br><span class="line">         System.out.print( x );</span><br><span class="line">         System.out.print(<span class="string">","</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">      String [] names =&#123;<span class="string">"James"</span>, <span class="string">"Larry"</span>, <span class="string">"Tom"</span>, <span class="string">"Lacy"</span>&#125;;</span><br><span class="line">      <span class="keyword">for</span>( String name : names ) &#123;</span><br><span class="line">         System.out.print( name );</span><br><span class="line">         System.out.print(<span class="string">","</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行结果如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>,</span><br><span class="line">James,Larry,Tom,Lacy,</span><br></pre></td></tr></table></figure><h5 id="2-6-4-break-与-continue-语句"><a href="#2-6-4-break-与-continue-语句" class="headerlink" title="2.6.4   break  与 continue 语句"></a>2.6.4   break  与 continue 语句</h5><p>跳转语句用于实现在执行过程中程序流程的跳转</p><h6 id="1、break-关键字"><a href="#1、break-关键字" class="headerlink" title="1、break 关键字"></a>1、break 关键字</h6><p>break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。</p><p>break 跳出最里层的循环，并且继续执行该循环下面的语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> [] numbers = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> x : numbers ) &#123;</span><br><span class="line">         <span class="comment">// x 等于 30 时跳出循环</span></span><br><span class="line">         <span class="keyword">if</span>( x == <span class="number">30</span> ) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.print( x );</span><br><span class="line">         System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">20</span><br></pre></td></tr></table></figure><h6 id="2、continue-关键字"><a href="#2、continue-关键字" class="headerlink" title="2、continue 关键字"></a>2、continue 关键字</h6><p>continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。</p><p>在 for 循环中，continue 语句使程序立即跳转到更新语句。</p><p>在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> [] numbers = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>&#125;;</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> x : numbers ) &#123;</span><br><span class="line">         <span class="keyword">if</span>( x == <span class="number">30</span> ) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         System.out.print( x );</span><br><span class="line">         System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">40</span></span><br><span class="line"><span class="number">50</span></span><br></pre></td></tr></table></figure><h5 id="2-6-5-循环嵌套"><a href="#2-6-5-循环嵌套" class="headerlink" title="2.6.5  循环嵌套"></a>2.6.5  循环嵌套</h5><p>循环嵌套是指在一条循环语句的循环体中再定义一条循环语句的语法结构。常见的有两层for循环</p><h4 id="2-7-方法"><a href="#2-7-方法" class="headerlink" title="2.7  方法"></a>2.7  方法</h4><h5 id="2-7-1那么什么是方法呢？"><a href="#2-7-1那么什么是方法呢？" class="headerlink" title="2.7.1那么什么是方法呢？"></a>2.7.1那么什么是方法呢？</h5><p>Java方法是语句的集合，它们在一起执行一个功能。</p><ul><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含于类或对象中</li><li>方法在程序中被创建，在其他地方被引用</li><li>定义一个方法的语法格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名 ([参数类型 参数名<span class="number">1</span>，参数类型 参数名<span class="number">2</span>，...])&#123;</span><br><span class="line">      ...</span><br><span class="line">      方法体</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法包含一个方法头和一个方法体。下面是一个方法的所有部分：</p><ul><li><strong>修饰符：</strong>修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型,对访问权限进行限定。</li><li><strong>返回值类型 ：</strong>方法可能会返回值。returnValueType 是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType 是关键字<strong>void</strong>。</li><li><strong>方法名：</strong>是方法的实际名称。方法名和参数表共同构成方法签名。</li><li><strong>参数类型：</strong>参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</li><li><strong>方法体：</strong>方法体包含具体的语句，定义该方法的功能。</li></ul><p><img alt="img" data-src="http://www.runoob.com/wp-content/uploads/2013/12/12-130Q1220955916.jpg" class="lozad">   </p><p><strong>注意：</strong> 在一些其它语言中方法指过程和函数。一个返回非void类型返回值的方法称为函数；一个返回void类型返回值的方法叫做过程。</p><h5 id="2-7-2-方法的重载"><a href="#2-7-2-方法的重载" class="headerlink" title="2.7.2 方法的重载"></a>2.7.2 方法的重载</h5><p>方法重载就是在一个程序中可以定义多个同名方法，但要求每个方法具有不同的参数类型或参数个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.it2m.example;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Examplell</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//下面是针对求和方法的调用</span></span><br><span class="line">    <span class="keyword">int</span> sum1 = add(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">int</span> sum2 = add(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">double</span> sum3 = add(<span class="number">2.5</span>,<span class="number">2.5</span>);</span><br><span class="line">    <span class="comment">//打印求和结果</span></span><br><span class="line">    System.out.println(<span class="string">"sum1="</span>+sum1);</span><br><span class="line">    System.out.println(<span class="string">"sum2="</span>+sum2);</span><br><span class="line">    System.out.println(<span class="string">"sum3="</span>+sum3);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//实现两个整数相加的方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//实现三个整数相加的方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y+z;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//实现两个小数相加的方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码定义了三个同名的add( )方法，但它们的参数个数或类型不同，从而构成了方法的重载。</p><h4 id="2-8-数组"><a href="#2-8-数组" class="headerlink" title="2.8 数组"></a>2.8 数组</h4><h5 id="2-8-1-数组的定义"><a href="#2-8-1-数组的定义" class="headerlink" title="2.8.1 数组的定义"></a>2.8.1 数组的定义</h5><p>数组是指一组数据的集合，数组中的每个数据被称为元素。数组可以存放任意类型的元素，但同一个数组中存放的元素类型必须一致。</p><p>Java 中定义一个数组的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] x;</span><br><span class="line">x = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]</span><br></pre></td></tr></table></figure><p>上述语句定义了一个 int 类型的数组，[ ]中的数字10表示数组的长度，即可以存放10个元素，相当于在内存中定义了10个int类型的变量。</p><p>每个数组元素都有一个索引，通过这个索引可以访问数组中的元素，索引范围[0, array.length-1]。</p><p>下面的图片描绘了数组 myList。这里 myList 数组里有 10 个 double 元素，它的下标从 0 到 9。</p><p><img alt="img" data-src="https://www.runoob.com/wp-content/uploads/2013/12/12-130Q0221Q5602.jpg" class="lozad"></p><h5 id="2-8-2-数组的常见操作"><a href="#2-8-2-数组的常见操作" class="headerlink" title="2.8.2  数组的常见操作"></a>2.8.2  数组的常见操作</h5><h6 id="1、-数组遍历"><a href="#1、-数组遍历" class="headerlink" title="1、 数组遍历"></a>1、 数组遍历</h6><p>数组的遍历指依次访问数组中的每个元素，可以用for循环遍历或foreach循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArray</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] mylist = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    <span class="comment">//for 循环遍历数组元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mylist.length; i++)&#123;</span><br><span class="line">      System.out.println(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//foreach循环遍历数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> element: mylist)&#123;</span><br><span class="line">      System.out.println(element);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-数组的最值"><a href="#2-数组的最值" class="headerlink" title="2.数组的最值"></a>2.数组的最值</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> max = arr[<span class="number">0</span>]; <span class="comment">//定义变量max用于记住最大元素，首先假设第一个元素为最大值</span></span><br><span class="line">  <span class="comment">//下面遍历数组元素</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x&lt;arr.length; x++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[x] &gt; max)&#123;</span><br><span class="line">      max = arr[x];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-数组排序"><a href="#3-数组排序" class="headerlink" title="3. 数组排序"></a>3. 数组排序</h6><p>即让数组元素从小到大排序。后续数据结构与算法再了解。</p><h5 id="2-8-3-Arrays-工具类"><a href="#2-8-3-Arrays-工具类" class="headerlink" title="2.8.3  Arrays 工具类"></a>2.8.3  Arrays 工具类</h5><p>java.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。</p><p>具有以下功能：</p><ul><li><p>给数组赋值：通过 fill 方法。</p></li><li><p>对数组排序：通过 sort 方法,按升序。</p></li><li><p>比较数组：通过 equals 方法比较数组中元素值是否相等。</p></li><li><p>查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</p><p>| 序号 | 方法和说明                                                   |<br>| —— | —————————————————————————————— |<br>| 1    | <strong>public static int binarySearch(Object[] a, Object key)</strong>用二分查找算法在给定数组中搜索给定值的对象(Byte,Int,double等)。数组在调用前必须<strong>排序好</strong>的。如果查找值包含在数组中，则返回搜索键的索引；否则返回 (-(<em>插入点</em>) - 1)。 |<br>| 2    | <strong>public static boolean equals(long[] a, long[] a2)</strong>如果两个指定的 long 型数组彼此<em>相等</em>，则返回 true。如果两个数组包含相同数量的元素，并且两个数组中的所有相应元素对都是相等的，则认为这两个数组是相等的。换句话说，如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。 |<br>| 3    | <strong>public static void fill(int[] a, int val)</strong>将指定的 int 值分配给指定 int 型数组指定范围中的<strong>每个</strong>元素。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。 |<br>| 4    | <strong>public static void sort(Object[] a)</strong>对指定对象数组根据其元素的自然顺序进行<strong>升序</strong>排列。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。 |</p></li></ul><h4 id="2-9-String-类和-StringBuffer-类"><a href="#2-9-String-类和-StringBuffer-类" class="headerlink" title="2.9  String 类和 StringBuffer 类"></a>2.9  String 类和 StringBuffer 类</h4><p>所谓的字符串就是一连串的字符，它由许多单个字符连接而成。字符串广泛应用 在Java 编程中，在 Java 中字符串属于<strong>对象</strong>，Java 提供了 String 类和 StringBuffer类来创建和操作字符串。String 类和 StringBuffer 类都位于java.lang包中，因此不需要导包就可以直接使用。</p><h5 id="2-9-1-String-类"><a href="#2-9-1-String-类" class="headerlink" title="2.9.1 String 类"></a>2.9.1 String 类</h5><p>String 类是<strong>不可改变</strong>的，所以一旦创建了 String 对象，那它的值就无法改变了</p><h6 id="1-创建字符串"><a href="#1-创建字符串" class="headerlink" title="1. 创建字符串"></a>1. 创建字符串</h6><p> (1)使用字符串常量直接初始化一个String对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">"abc"</span>；</span><br></pre></td></tr></table></figure><p>(2)使用String 的构造方法初始化String对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str2 = <span class="keyword">new</span> String();  <span class="comment">//初始化一个空的字符串</span></span><br><span class="line"><span class="keyword">char</span>[] helloArray = &#123;<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>&#125;;</span><br><span class="line">String str3 = <span class="keyword">new</span> String(helloArray);</span><br><span class="line">string str4 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);  <span class="comment">//根据指定字符串内容初始化</span></span><br></pre></td></tr></table></figure><h6 id="2-String-类的常用方法"><a href="#2-String-类的常用方法" class="headerlink" title="2. String 类的常用方法"></a>2. String 类的常用方法</h6><p>1    char charAt(int index)<br>返回指定索引处的 char 值。<br>2    int compareTo(Object o)<br>把这个字符串和另一个对象比较。<br>3    int compareTo(String anotherString)<br>按字典顺序比较两个字符串。<br>4    int compareToIgnoreCase(String str)<br>按字典顺序比较两个字符串，不考虑大小写。<br>5    String concat(String str)<br>将指定字符串连接到此字符串的结尾。<br>6    boolean contentEquals(StringBuffer sb)<br>当且仅当字符串与指定的StringBuffer有相同顺序的字符时候返回真。<br>7    static String copyValueOf(char[] data)<br>返回指定数组中表示该字符序列的 String。<br>8    static String copyValueOf(char[] data, int offset, int count)<br>返回指定数组中表示该字符序列的 String。<br>9    boolean endsWith(String suffix)<br>测试此字符串是否以指定的后缀结束。<br>10    boolean equals(Object anObject)<br>将此字符串与指定的对象比较。<br>11    boolean equalsIgnoreCase(String anotherString)<br>将此 String 与另一个 String 比较，不考虑大小写。<br>12    byte[] getBytes()<br> 使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。<br>13    byte[] getBytes(String charsetName)<br>使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。<br>14    void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)<br>将字符从此字符串复制到目标字符数组。<br>15    int hashCode()<br>返回此字符串的哈希码。<br>16    int indexOf(int ch)<br>返回指定字符在此字符串中第一次出现处的索引。<br>17    int indexOf(int ch, int fromIndex)<br>返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。<br>18    int indexOf(String str)<br> 返回指定子字符串在此字符串中第一次出现处的索引。<br>19    int indexOf(String str, int fromIndex)<br>返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。<br>20    String intern()<br> 返回字符串对象的规范化表示形式。<br>21    int lastIndexOf(int ch)<br> 返回指定字符在此字符串中最后一次出现处的索引。<br>22    int lastIndexOf(int ch, int fromIndex)<br>返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。<br>23    int lastIndexOf(String str)<br>返回指定子字符串在此字符串中最右边出现处的索引。<br>24    int lastIndexOf(String str, int fromIndex)<br> 返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。<br>25    int length()<br>返回此字符串的长度。<br>26    boolean matches(String regex)<br>告知此字符串是否匹配给定的正则表达式。<br>27    boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)<br>测试两个字符串区域是否相等。<br>28    boolean regionMatches(int toffset, String other, int ooffset, int len)<br>测试两个字符串区域是否相等。<br>29    String replace(char oldChar, char newChar)<br>返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。<br>30    String replaceAll(String regex, String replacement)<br>使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。<br>31    String replaceFirst(String regex, String replacement)<br> 使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。<br>32    String[] split(String regex)<br>根据给定正则表达式的匹配拆分此字符串。<br>33    String[] split(String regex, int limit)<br>根据匹配给定的正则表达式来拆分此字符串。<br>34    boolean startsWith(String prefix)<br>测试此字符串是否以指定的前缀开始。<br>35    boolean startsWith(String prefix, int toffset)<br>测试此字符串从指定索引开始的子字符串是否以指定前缀开始。<br>36    CharSequence subSequence(int beginIndex, int endIndex)<br> 返回一个新的字符序列，它是此序列的一个子序列。<br>37    String substring(int beginIndex)<br>返回一个新的字符串，它是此字符串的一个子字符串。<br>38    String substring(int beginIndex, int endIndex)<br>返回一个新字符串，它是此字符串的一个子字符串。<br>39    char[] toCharArray()<br>将此字符串转换为一个新的字符数组。<br>40    String toLowerCase()<br>使用默认语言环境的规则将此 String 中的所有字符都转换为小写。<br>41    String toLowerCase(Locale locale)<br> 使用给定 Locale 的规则将此 String 中的所有字符都转换为小写。<br>42    String toString()<br> 返回此对象本身（它已经是一个字符串！）。<br>43    String toUpperCase()<br>使用默认语言环境的规则将此 String 中的所有字符都转换为大写。<br>44    String toUpperCase(Locale locale)<br>使用给定 Locale 的规则将此 String 中的所有字符都转换为大写。<br>45    String trim()<br>返回字符串的副本，忽略前导空白和尾部空白。<br>46    static String valueOf(primitive data type x)<br>返回给定data type类型x参数的字符串表示形式。</p><p>记不住没关系，查相关API 文档或百度谷歌就好了。</p><h5 id="2-9-2-StringBuffer-类"><a href="#2-9-2-StringBuffer-类" class="headerlink" title="2.9.2  StringBuffer 类"></a>2.9.2  StringBuffer 类</h5><p>String字符串是常量，一旦创建，其内容和长度不可改变。</p><p>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。</p><p>StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。</p><p>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法<strong>不是线程安全</strong>的（不能同步访问）。</p><p>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</p><h6 id="StringBuffer-方法"><a href="#StringBuffer-方法" class="headerlink" title="StringBuffer 方法"></a>StringBuffer 方法</h6><p>以下是 StringBuffer 类支持的主要方法：</p><div class="table-container"><table><thead><tr><th>序号</th><th>方法描述</th></tr></thead><tbody><tr><td>1</td><td>public StringBuffer append(String s)将指定的字符串追加到此字符序列。</td></tr><tr><td>2</td><td>public StringBuffer reverse() 将此字符序列用其反转形式取代。</td></tr><tr><td>3</td><td>public delete(int start, int end)移除此序列的子字符串中的字符。</td></tr><tr><td>4</td><td>public insert(int offset, int i)将 <code>int</code> 参数的字符串表示形式插入此序列中。</td></tr><tr><td>5</td><td>replace(int start, int end, String str)使用给定 <code>String</code> 中的字符替换此序列的子字符串中的字符。</td></tr></tbody></table></div><h4 id="2-10-包装类"><a href="#2-10-包装类" class="headerlink" title="2.10 包装类"></a>2.10 包装类</h4><p>在Java 中，很多类的方法都需要接收引用类型的对象，此时就无法将一个基本数据类型的值传入。</p><p>JDK中提供了一系列的包装类，通过这些包装类可以将基本数据类型的值包装为引用数据类型的对象。</p><p>​                                                           <strong>8种基本数据类型及其对应的包装类</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">基本数据类型</th><th style="text-align:center">对应的包装类</th><th style="text-align:center">基本的数据类型</th><th style="text-align:center">对应的包装类</th></tr></thead><tbody><tr><td style="text-align:center">char</td><td style="text-align:center">Character</td><td style="text-align:center">long</td><td style="text-align:center">Long</td></tr><tr><td style="text-align:center">byte</td><td style="text-align:center">Byte</td><td style="text-align:center">float</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">Integer</td><td style="text-align:center">double</td><td style="text-align:center">Double</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">Short</td><td style="text-align:center">boolean</td><td style="text-align:center">Boolean</td></tr></tbody></table></div><p>包装类和基本数据类型在进行转换时，引入了<strong>装箱</strong>和<strong>拆箱</strong>的概念。</p><p><strong>装箱：</strong> 指将基本数据类型的值转换为引用数据类型。</p><p><strong>拆箱：</strong> 指将引用数据类型的对象转换为基本数据类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    Integer a = <span class="number">3</span>;   <span class="comment">//自动装箱</span></span><br><span class="line">    <span class="keyword">int</span> b = a + <span class="number">4</span>;   <span class="comment">//自动拆箱</span></span><br><span class="line">    System.out.println(b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-面向对象"><a href="#3-面向对象" class="headerlink" title="3.  面向对象"></a>3.  面向对象</h3><p>哇哇哇，今天又被抖音，游戏，小说占据大半时间，早上7点半的闹钟又没成功，又在宿舍宅一天，论文又没动笔。卸载抖音，卸载追书神器，卸载王者荣耀，先打把。。。我的意志力自制力好薄弱。。。。。。没学完之前不下载，下载也不安装。。。。</p><p>Java 是 一种面向对象的编程语言。我自学的第一门语言是Python,C++学了基础语法部分，为了找工作，决定系统的学习Java,虽然系统学习进度有点慢，且见效慢，但可避免今后学习工作中老是感觉没系统学过，要不要从头学习。</p><h2 id="03-面向对象"><a href="#03-面向对象" class="headerlink" title="03  面向对象"></a>03  面向对象</h2><h4 id="3-1-面向对象的概念和特征"><a href="#3-1-面向对象的概念和特征" class="headerlink" title="3.1 面向对象的概念和特征"></a>3.1 面向对象的概念和特征</h4><p>面向对象的特征主要可以概括为封装性，继承性和多态性。</p><p>以下主要复制粘贴菜鸟教程上的，但我都看了一遍,因为不是亲手打的，所以没有灵魂。。。</p><h5 id="1-封装性"><a href="#1-封装性" class="headerlink" title="1.封装性"></a>1.封装性</h5><p>封装是面向对象的核心思想，是指将对象的属性和行为封装起来，不需要让外界知道内部是如何实现细节的。</p><p>封装（英语：Encapsulation）是指一种将抽象性函式接口的实现细节部份包装、隐藏起来的方法。</p><p>封装可以被认为是一个保护屏障，防止该类的代码和数据被外部类定义的代码随机访问。</p><p>要访问该类的代码和数据，必须通过严格的接口控制。</p><p>封装最主要的功能在于我们能修改自己的实现代码，而不用修改那些调用我们代码的程序片段。</p><p>适当的封装可以让程式码更容易理解与维护，也加强了程式码的安全性。</p><p><strong>封装的优点</strong></p><ul><li><ol><li>良好的封装能够减少耦合。</li></ol></li><li><ol><li>类内部的结构可以自由修改。</li></ol></li><li><ol><li>可以对成员变量进行更精确的控制。</li></ol></li><li><ol><li>隐藏信息，实现细节。</li></ol></li></ul><p><strong>实现Java封装的步骤</strong></p><ol><li>修改属性的可见性来限制对属性的访问（一般限制为<strong>private</strong>），例如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码中，将 <strong>name</strong> 和 <strong>age</strong> 属性设置为私有的，只能本类才能访问，其他类都访问不了，如此就对信息进行了隐藏。</p><ol><li>对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问，例如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;   <span class="comment">// 将name属性私有化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;       <span class="comment">// 将age属性私有化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//公有的getter 和 setter 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.age = age;     <span class="comment">//this.age 访问的是成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用 <strong>this</strong> 关键字是为了解决实例变量（private String name）和局部变量（setName(String name)中的name变量）之间发生的同名的冲突。</p><h5 id="2-继承性"><a href="#2-继承性" class="headerlink" title="2. 继承性"></a>2. 继承性</h5><p>继承性是描述类与类之间的关系，在已有类的基础上扩展出新的类。</p><p>继承就是子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</p><p><img alt="img" data-src="http://www.runoob.com/wp-content/uploads/2013/12/14B0951E-FC75-47A3-B611-4E1883887339.jpg" class="lozad"></p><p>兔子和羊属于食草动物类，狮子和豹属于食肉动物类。</p><p>食草动物和食肉动物又是属于动物类。</p><p>所以继承需要符合的关系是：is-a，父类更通用，子类更具体。</p><p>虽然食草动物和食肉动物都是属于动物，但是两者的属性和行为上有差别，所以子类会具有父类的一般特性也会具有自身的特性。</p><p><strong>类的继承格式</strong></p><p>在 Java 中通过 extends 关键字可以申明一个类是从另外一个类继承而来的，一般形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 父类 </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类 </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类继承父类之后，就具有父类当中的属性和方法，子类就不会存在重复的代码，维护性也提高，代码也更加简洁，提高代码的复用性（复用性主要是可以多次使用，不用再多次写同样的代码） </p><p>需要注意的是 Java 不支持多继承，但支持多重继承。                      </p><p><img alt="img" data-src="https://www.runoob.com/wp-content/uploads/2013/12/types_of_inheritance.png" class="lozad">      <strong>继承的特性</strong></p><ul><li>子类拥有父类非private的属性，方法。</li><li>子类可以拥有自己的属性和方法，即子类可以对父类的方法进行<strong>重写</strong> 。在子类中重写的方法必须与父类被重写的方法具有相同的方法名，参数列表以及返回值类型。</li><li>子类可以用自己的方式实现父类的方法。</li><li>Java的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如A类继承B类，B类继承C类，所以按照关系就是C类是B类的父类，B类是A类的父类，这是java继承区别于C++继承的一个特性。</li><li>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。</li></ul><p><strong>继承关键字</strong></p><p>继承可以使用 <strong>extends</strong> 和 <strong>implements</strong> 这两个关键字来实现继承，而且所有的类都是继承于 java.lang.Object，当一个类没有继承的两个关键字，则默认继承object（这个类在 <strong>java.lang</strong> 包中，所以不需要 <strong>import</strong>）祖先类。</p><p><strong>extends关键字</strong></p><p>在 Java 中，类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 extends 只能继承一个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> String name;   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String myName, String myid)</span> </span>&#123; </span><br><span class="line">        <span class="comment">//初始化属性值</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;  <span class="comment">//吃东西方法的具体实现  &#125; </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123; <span class="comment">//睡觉方法的具体实现  &#125; </span></span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Penguin</span>  <span class="keyword">extends</span>  <span class="title">Animal</span></span>&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>implements关键字</strong></p><p>使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承<strong>接口</strong>的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>,<span class="title">B</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>super 与 this 关键字</strong></p><p>当子类重写父类的方法后，子类对象将不能访问父类被重写的方法，super就解决了这个问题。</p><p>super关键字：我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。</p><p>super.成员变量</p><p>super.成员方法([参数1，参数2…])</p><p>super([参数1， 参数2…])   //访问构造方法</p><p>this关键字：指向自己的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"animal : eat"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"dog : eat"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">eatTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.eat();   <span class="comment">// this 调用自己的方法</span></span><br><span class="line">    <span class="keyword">super</span>.eat();  <span class="comment">// super 调用父类方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Animal a = <span class="keyword">new</span> Animal();</span><br><span class="line">    a.eat();</span><br><span class="line">    Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">    d.eatTest();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">animal : eat</span><br><span class="line">dog : eat</span><br><span class="line">animal : eat</span><br></pre></td></tr></table></figure><p><strong>final关键字</strong></p><p>final 关键字声明类可以把类定义为<strong>不能继承</strong>的，即最终类；或者用于修饰方法，该方法<strong>不能被子类重写</strong>：</p><ul><li><p>声明类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">final class 类名 &#123;//类体&#125;</span><br></pre></td></tr></table></figure></li><li><p>声明方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符(public/private/default/protected) final 返回值类型 方法名()&#123;//方法体&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>注</strong>:实例变量也可以被定义为 final，被定义为 final 的变量（会变成常量）不能被修改。被声明为 final 类的方法自动地声明为 final，但是实例变量并不是 final。</p><h5 id="3-多态性"><a href="#3-多态性" class="headerlink" title="3. 多态性"></a>3. 多态性</h5><p>多态是同一个行为具有多个不同表现形式或形态的能力。</p><p>多态就是同一个接口，使用不同的实例而执行不同操作，如图所示：</p><p>​        <img alt="img" data-src="https://www.runoob.com/wp-content/uploads/2013/12/dt-java.png" class="lozad"></p><p>多态性是对象多种表现形式的体现。</p><p>现实中，比如我们按下 F1 键这个动作：</p><ul><li>如果当前在 Flash 界面下弹出的就是 AS 3 的帮助文档；</li><li>如果当前在 Word 下弹出的就是 Word 帮助；</li><li>在 Windows 下弹出的就是 Windows 帮助和支持。</li></ul><p>同一个事件发生在不同的对象上会产生不同的结果。</p><p><strong>多态的优点</strong></p><ul><li><ol><li>消除类型之间的耦合关系</li></ol></li><li><ol><li>可替换性</li></ol></li><li><ol><li>可扩充性</li></ol></li><li><ol><li>接口性</li></ol></li><li><ol><li>灵活性</li></ol></li><li><ol><li>简化性</li></ol></li></ul><p><strong>多态存在的三个必要条件</strong></p><ul><li>继承</li><li>重写</li><li>父类引用指向子类对象</li></ul><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parent p = <span class="keyword">new</span> Child();  <span class="comment">//将Child对象当作 Parent类型使用</span></span><br></pre></td></tr></table></figure><p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，再去调用子类的同名方法。</p><p>多态的好处：可以使程序有良好的扩展，并可以对所有类的对象进行通用处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      show(<span class="keyword">new</span> Cat());  <span class="comment">// 以 Cat 对象调用 show 方法</span></span><br><span class="line">      show(<span class="keyword">new</span> Dog());  <span class="comment">// 以 Dog 对象调用 show 方法</span></span><br><span class="line">                </span><br><span class="line">      Animal a = <span class="keyword">new</span> Cat();  <span class="comment">// 向上转型  </span></span><br><span class="line">      a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line">      Cat c = (Cat)a;        <span class="comment">// 向下转型  </span></span><br><span class="line">      c.work();        <span class="comment">// 调用的是 Cat 的 work</span></span><br><span class="line">  &#125;  </span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Animal a)</span>  </span>&#123;</span><br><span class="line">      a.eat();  </span><br><span class="line">        <span class="comment">// 类型判断</span></span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat)  &#123;  <span class="comment">// 猫做的事情 </span></span><br><span class="line">            Cat c = (Cat)a;  </span><br><span class="line">            c.work();  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Dog) &#123; <span class="comment">// 狗做的事情 </span></span><br><span class="line">            Dog c = (Dog)a;  </span><br><span class="line">            c.work();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"吃鱼"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"抓老鼠"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"吃骨头"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"看家"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行以上程序，输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">吃鱼</span><br><span class="line">抓老鼠</span><br><span class="line">吃骨头</span><br><span class="line">看家</span><br><span class="line">吃鱼</span><br><span class="line">抓老鼠</span><br></pre></td></tr></table></figure><p><strong>多态的实现方式</strong></p><p><strong>方式一：重写：</strong></p><p>Java 重写(Override)与重载(Overload)。</p><p><strong>方式二：接口</strong></p><ul><li><ol><li>生活中的接口最具代表性的就是插座，例如一个三接头的插头都能接在三孔插座中，因为这个是每个国家都有各自规定的接口规则，有可能到国外就不行，那是因为国外自己定义的接口类型。</li></ol></li><li><ol><li>java中的接口类似于生活中的接口，就是一些方法特征的集合，但没有方法的实现。</li></ol></li></ul><p><strong>方式三：抽象类和抽象方法</strong></p><h4 id="3-2-类与对象"><a href="#3-2-类与对象" class="headerlink" title="3.2 类与对象"></a>3.2 类与对象</h4><h5 id="3-2-1-类与对象的关系"><a href="#3-2-1-类与对象的关系" class="headerlink" title="3.2.1 类与对象的关系"></a>3.2.1 类与对象的关系</h5><p>面向对象的编程思想是让code中对事物的描述和在现实中事物的形态相关联。</p><p>一个Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。</p><ul><li><p><strong>对象</strong>：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</p></li><li><p><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</p></li><li><p><strong>方法</strong>：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。</p></li><li><p><strong>实例变量</strong>：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</p><p>​</p></li></ul><p><img alt="img" data-src="http://www.runoob.com/wp-content/uploads/2013/12/object-class.jpg" class="lozad"></p><p>​                                                    上图中男孩女孩为类，而具体的每个人为该类的对象 </p><h6 id="1-Java中的类"><a href="#1-Java中的类" class="headerlink" title="1. Java中的类"></a>1. Java中的类</h6><p>类可以看成是创建Java对象的模板。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">  String breed;</span><br><span class="line">  <span class="keyword">int</span> age;</span><br><span class="line">  String color;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">barking</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">hungry</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">sleeping</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个类可以包含以下类型变量：</p><ul><li><strong>局部变量</strong>：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</li><li><strong>成员变量</strong>：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</li><li><strong>类变量</strong>：类变量也声明在类中，方法体之外，但必须声明为static类型。</li></ul><p>一个类可以拥有多个方法，在上面的例子中：barking()、hungry()和sleeping()都是Dog类的方法</p><p><strong>构造方法</strong></p><p>每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法。</p><p><strong>在创建一个对象的时候，至少要调用一个构造方法</strong>。构造方法的名称必须与<strong>类同名</strong>，一个类可以有多个构造方法。</p><p>下面是一个构造方法示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Puppy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 这个构造器仅有一个参数：name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-Java中的对象"><a href="#2-Java中的对象" class="headerlink" title="2. Java中的对象"></a>2. Java中的对象</h6><p>所有对象都有自己的<strong>状态</strong>和<strong>行为</strong>。</p><p>拿一条狗来举例，它的状态有：名字、品种、颜色，行为有：叫、摇尾巴和跑。</p><p>对比现实对象和软件对象，它们之间十分相似。</p><p>软件对象也有状态和行为。软件对象的状态就是属性，行为通过方法体现。</p><p>在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成。</p><p><strong>创建对象</strong></p><p>类名 对象名 = new 类名();</p><p>对象是根据类创建的。在Java中，使用关键字new来创建一个新的对象。创建对象需要以下三步：</p><ul><li><strong>声明</strong>：声明一个对象，包括对象名称和对象类型。</li><li><strong>实例化</strong>：使用关键字new来创建一个对象。</li><li><strong>初始化</strong>：使用new创建对象时，会调用构造方法初始化对象。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Puppy</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Puppy</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">      <span class="comment">//这个构造器仅有一个参数：name</span></span><br><span class="line">      System.out.println(<span class="string">"小狗的名字是 : "</span> + name ); </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">      <span class="comment">// 下面的语句将创建一个Puppy对象</span></span><br><span class="line">      Puppy myPuppy = <span class="keyword">new</span> Puppy( <span class="string">"tommy"</span> );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-构造方法-构造器"><a href="#3-3-构造方法-构造器" class="headerlink" title="3.3  构造方法 (构造器)"></a>3.3  构造方法 (构造器)</h4><p>构造方法是类的一个特殊成员，它会在类实例化对象时被自动调用。定义构造方法，必须同时满足三个条件：</p><ul><li>构造方法的名称与类名必须相同。</li><li>在方法名称前没有返回值类型的声明。</li><li>在方法体中不可以使用return语句返回一个值，但允许单独写return语句作为方法的结束。</li></ul><p>子类是不继承父类的构造器（构造方法或者构造函数）的，它只是调用（隐式或显式）。</p><p>如果父类的构造器带<strong>有参数</strong>，则必须在子类的构造器中显式地通过 <strong>super</strong> 关键字调用父类的构造器并配以适当的参数列表。</p><p>如果父类构造器<strong>没有参数</strong>，则在子类的构造器中不需要使用 super 关键字调用父类构造器，系统会<strong>自动调用</strong>父类的无参构造器。</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">  SuperClass()&#123;</span><br><span class="line">    System.out.println(<span class="string">"SuperClass()"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  SuperClass(<span class="keyword">int</span> n) &#123;</span><br><span class="line">    System.out.println(<span class="string">"SuperClass(int n)"</span>);</span><br><span class="line">    <span class="keyword">this</span>.n = n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">  </span><br><span class="line">  SubClass()&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">300</span>);</span><br><span class="line">    System.out.println(<span class="string">"SubClass"</span>);</span><br><span class="line">  &#125;  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SubClass</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"SubClass(int n):"</span>+n);</span><br><span class="line">    <span class="keyword">this</span>.n = n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSuperSub</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    SubClass sc = <span class="keyword">new</span> SubClass();</span><br><span class="line">    SubClass sc2 = <span class="keyword">new</span> SubClass(<span class="number">200</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SuperClass(int n)</span><br><span class="line">SubClass</span><br><span class="line">SuperClass()</span><br><span class="line">SubClass(int n):200</span><br></pre></td></tr></table></figure><h5 id="3-3-1-构造方法的重载"><a href="#3-3-1-构造方法的重载" class="headerlink" title="3.3.1 构造方法的重载"></a>3.3.1 构造方法的重载</h5><p>由于构造方法的方法名与类名相同，因此只要每个构造方法的参数类型或参数个数不同即可实现构造方法的重载。</p><p>在创建实例对象时，根据传入参数的不同，分别调用不同的构造方法为不同属性进行赋值。</p><h4 id="3-4-this-关键字"><a href="#3-4-this-关键字" class="headerlink" title="3.4  this  关键字"></a>3.4  this  关键字</h4><p>一个类可以包含以下类型变量：</p><ul><li><strong>局部变量</strong>：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</li><li><strong>成员变量</strong>：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</li><li><strong>类变量</strong>：类变量也声明在类中，方法体之外，但必须声明为static类型。</li></ul><p><strong>this</strong> 关键字表示当前对象，可以在方法中调用其他的成员。</p><ol><li><p>通过this关键字可以明确地访问一个类的成员变量，解决与局部变量名称相同的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">  String color;                <span class="comment">// 类中定义的成员变量 color</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String color)</span></span>&#123;   <span class="comment">//构造方法中参数被定义为color,是一个局部变量</span></span><br><span class="line">    <span class="keyword">this</span>.color = color;     <span class="comment">//构造方法中使用this.color,访问成员变量</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getColor</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.color;    <span class="comment">//访问成员变量</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过this关键字调用成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.show();   <span class="comment">//this 可省略</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造方法在实例化对象时被JVM自动调用，在程序中不能像调用其他方法一样调用构造方法，但可以在一个构造方法中使用this([参数1， 参数2…])的形式调用其他构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"无参构造方法执行了..."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String color)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>();  <span class="comment">//调用无参构造方法</span></span><br><span class="line">    System.out.println(<span class="string">"有参构造方法执行了..."</span>)；</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>​       测试类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class TestCar&#123;</span><br><span class="line">  public static void main(String[] args)&#123;</span><br><span class="line">    Car c = new Car(&quot;red&quot;);  //实例化Car对象</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 先执行无参构造方法，之后再执行有参构造方法。 <strong>this</strong> 关键字调用其他的构造方法只能出现在构造方法中，只能位于构造方法的第一行且只能出现一次。另外，不能再两个构造方法中使用this相互调用，否则会出现编译错误。</p><h4 id="3-5-static-关键字"><a href="#3-5-static-关键字" class="headerlink" title="3.5  static 关键字"></a>3.5  static 关键字</h4><h5 id="3-5-1-静态变量"><a href="#3-5-1-静态变量" class="headerlink" title="3.5.1 静态变量"></a>3.5.1 静态变量</h5><p>如果使用一个类，则会在产生实例化对象时分别在堆内存中分配空间，在堆内存中要保存对象的属性，每个对象都有自己的属性，若希望被所有对象共享，就必须用<strong>static</strong>关键字修饰<strong>成员变量</strong> ，该变量被称为<strong>静态变量</strong> ，可以直接使用“类名.变量名”的形式调用。static不能修饰局部变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> String carName=<span class="string">"大众"</span>;   <span class="comment">//定义了静态变量carName,表示汽车所在的厂商，并被所有的实例所共享。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class TestCar&#123;</span><br><span class="line">  public static void main(String[] args)&#123;</span><br><span class="line">    Car c1 = new Car();</span><br><span class="line">    Car.carName=&quot;大众&quot;;   //为静态变量赋值</span><br><span class="line">    System.out.println(&quot;这辆车的厂商是：&quot;+Car.carName);</span><br><span class="line">    System.out.println(&quot;这辆车的厂商是：&quot;+c1.carName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果均为大众。</p><h5 id="3-5-2-静态方法"><a href="#3-5-2-静态方法" class="headerlink" title="3.5.2 静态方法"></a>3.5.2 静态方法</h5><p>静态方法与普通方法的区别是在方法前加一个static关键字，这种方法被称为静态方法，可以通过“类名.方法名”访问，也可以通过类的实例对象访问。静态方法在调用时不需要创建任何对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;   <span class="comment">//定义了静态方法run()</span></span><br><span class="line">    System.out.println(<span class="string">"run()方法执行了..."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCar</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//1. 类名.方法名的方式调用静态方法</span></span><br><span class="line">    Car.run();</span><br><span class="line">    <span class="comment">//2. 实例化对象的方式调用静态方法</span></span><br><span class="line">    Car c = <span class="keyword">new</span> Car();</span><br><span class="line">    c.run();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-5-3-静态代码块"><a href="#3-5-3-静态代码块" class="headerlink" title="3.5.3 静态代码块"></a>3.5.3 静态代码块</h5><p>在Java类中，使用一对大括号包围起来的若干行代码被称为一个代码块，用static关键字修饰的代码块被称为静态代码块。当类被加载时，静态代码块就会被执行，由于类只能加载一次，所以静态代码块只会执行一次。在程序中，通常会使用静态代码块对类的成员变量进行初始化。</p><h4 id="3-6-抽象类和接口"><a href="#3-6-抽象类和接口" class="headerlink" title="3.6 抽象类和接口"></a>3.6 抽象类和接口</h4><h5 id="3-6-1-抽象类"><a href="#3-6-1-抽象类" class="headerlink" title="3.6.1 抽象类"></a>3.6.1 抽象类</h5><p>在Java程序中，允许在定义方法时不写方法体，这种方法被称为<strong>抽象方法</strong> ，必须用<strong>abstract</strong> 关键字修饰。抽象方法解决了程序中某些方法的不确定实现。</p><p>如果一个类中定义了抽象方法，则该类必须定义为<strong>抽象类</strong>，也同样使用<strong>abstract</strong>修饰。</p><p>包含抽象方法的类必须声明为抽象类，但抽象类可以不包括任何抽象方法。</p><p>抽象类不可以被实例化，因为抽象方法时没有方法体的，不可以被调用。如果想调用抽象类中定义的方法，则需要创建一个子类，在子类中将抽象类中的抽象方法进行实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义抽象类Animal</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="keyword">void</span> call;  <span class="comment">//定义抽象方法call()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cow</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="comment">//实现抽象方法call()</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"哞..."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-6-2-接口"><a href="#3-6-2-接口" class="headerlink" title="3.6.2 接口"></a>3.6.2 接口</h5><p>一种特殊的抽象类，该类中只存在<strong>常量</strong>和<strong>抽象方法</strong>，而不存在变量的定义和方法的实现，这种特殊的类被称为<strong>接口</strong>。是对抽象类的进一步抽象。定义接口时，需要使用interface关键字，由于方法都是抽象的，不能实例化对象，所以需要定义一个类，并使用<strong>implements</strong>关键字实现接口中所有的方法。</p><p>创建一个Animal接口，并在接口中定义一个全局常量和抽象方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义Aniamal接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="comment">//全局变量，默认修饰为 public static final，不需要指定</span></span><br><span class="line">  String ANIMAL_ACTION = <span class="string">"动物的行为动作"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>; <span class="comment">//抽象方法call(),默认修饰为public abstract</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个Cow类，是其实现Animal接口，并实现接口中的抽象方法call():</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cow</span> <span class="keyword">implements</span> <span class="title">Animals</span></span>&#123;</span><br><span class="line">  <span class="comment">//实现call()方法</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(ANIMAL_ACTION+<span class="string">":"</span>+<span class="string">"哞..."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，一个类实现一个接口时，必须实现接口在所有的方法，若不能实现，则必须写出一个空实现的方法。</p><p>接口的访问限定只有public和默认，允许接口的多重继承。</p><h5 id="3-6-3-匿名内部类"><a href="#3-6-3-匿名内部类" class="headerlink" title="3.6.3  匿名内部类"></a>3.6.3  匿名内部类</h5><p>方法的参数被定义成为一个接口类型，除了定义一个类实现接口，将类进行对象实例化外，还可以使用匿名内部类实现接口。</p><p>在定义匿名内部类的地方往往直接创建该类的一个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类（参数列表）或 父接口()&#123;</span><br><span class="line">  <span class="comment">//匿名内部类实现部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义动物类接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>;  <span class="comment">//定义方法call()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> calss TestAnimal&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义匿名内部类作为参数传递给animalCall()方法</span></span><br><span class="line">    animalCall(<span class="keyword">new</span> Animal()&#123;</span><br><span class="line">      <span class="comment">//实现call()方法</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"哞..."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//定义静态方法animalCall()</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">animalCall</span><span class="params">(Animal a)</span></span>&#123;</span><br><span class="line">    a.call();  <span class="comment">//调用传入对象a的call()方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用animalCall()方法时，在方法的参数位置写上new Animal(){},这相当于创建了一个实例对象，并将对象作为参数传递给animalCall()方法。</p><h4 id="3-7-异常"><a href="#3-7-异常" class="headerlink" title="3.7  异常"></a>3.7  异常</h4><p>程序运行过程中，可能会发生异常(Exception)情况，例如运行时内存溢出，磁盘空间不足、网络中断等，针对此类情况，Java 提供了异常处理机制，以异常类的形式对这些不正常的情况进行封装，通过异常处理机制对程序代码发生的各种问题进行有针对性的处理。</p><p>原因：</p><ul><li>用户输入了非法数据。</li><li>要打开的文件不存在。</li><li>网络通信时连接中断，或者JVM内存溢出。</li></ul><h5 id="3-7-1-常见的异常类"><a href="#3-7-1-常见的异常类" class="headerlink" title="3.7.1  常见的异常类"></a>3.7.1  常见的异常类</h5><p>所有的异常类是从 java.lang.Exception 类继承的子类。</p><p>Exception 类是 Throwable 类的子类。除了Exception类外，Throwable还有一个子类Error 。</p><p>Java 程序通常不捕获错误。错误一般发生在严重故障时，它们在Java程序处理的范畴之外。</p><p>Error 用来指示运行时环境发生的错误。表示系统内部错误或资源耗尽的错误。</p><p>例如，JVM 内存溢出。一般地，程序不会从错误中恢复。</p><p>异常类有两个主要的子类：IOException 类和 RuntimeException 类。</p><p><img alt="img" data-src="http://www.runoob.com/wp-content/uploads/2013/12/12-130Q1234I6223.jpg" class="lozad"></p><h5 id="3-7-2-捕获异常"><a href="#3-7-2-捕获异常" class="headerlink" title="3.7.2 捕获异常"></a>3.7.2 捕获异常</h5><h6 id="1-try-…catch"><a href="#1-try-…catch" class="headerlink" title="1. try …catch"></a>1. try …catch</h6><p>使用 try 和 catch 关键字可以捕获异常。try/catch 代码块放在异常可能发生的地方。</p><p>try/catch代码块中的代码称为保护代码，使用 try/catch 的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionName e1)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//Catch 块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Catch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。</p><p>如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。</p><h6 id="2-finally关键字"><a href="#2-finally关键字" class="headerlink" title="2. finally关键字"></a>2. finally关键字</h6><p>finally 关键字用来创建在 try 代码块后面执行的代码块。</p><p>无论是否发生异常，finally 代码块中的代码总会被执行。</p><p>在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。</p><p>finally 代码块出现在 catch 代码块最后，语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">1</span> 异常的变量名<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型<span class="number">2</span> 异常的变量名<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  <span class="comment">// 程序代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-7-3-throws-throw-关键字：-抛出异常"><a href="#3-7-3-throws-throw-关键字：-抛出异常" class="headerlink" title="3.7.3  throws/throw 关键字： 抛出异常"></a>3.7.3  throws/throw 关键字： 抛出异常</h5><p>如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。</p><p>也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。</p><p>下面方法的声明抛出一个 RemoteException 异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">className</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">double</span> amount)</span> <span class="keyword">throws</span> RemoteException,</span></span><br><span class="line"><span class="function">                              InsufficientFundsException</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="comment">// Method implementation</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//Remainder of class definition</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-8-访问控制"><a href="#3-8-访问控制" class="headerlink" title="3.8  访问控制"></a>3.8  访问控制</h4><p>访问控制级别由大到小。</p><div class="table-container"><table><thead><tr><th>修饰符</th><th>当前类</th><th>同一包内</th><th>子孙类(同一包)</th><th>子孙类(不同包)</th><th>其他包</th></tr></thead><tbody><tr><td><code>public</code></td><td>Y</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td><code>protected</code></td><td>Y</td><td>Y</td><td>Y</td><td>Y/N（<a href="https://www.runoob.com/java/java-modifier-types.html#protected-desc" target="_blank" rel="noopener">说明</a>）</td><td>N</td></tr><tr><td><code>default</code></td><td>Y</td><td>Y</td><td>Y</td><td>N</td><td>N</td></tr><tr><td><code>private</code></td><td>Y</td><td>N</td><td>N</td><td>N</td><td>N</td></tr></tbody></table></div><p>public(公共访问级别)：表示公有的，该类或类中的成员都可以被所有的类访问。使用对象：类、接口、变量、方法。</p><p>protected(子类访问级别)：表示受保护的，对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）。</p><p>default (即缺省，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</p><p>private(类访问级别) : 表示私有的，在同一类内可见。使用对象：变量、方法。 注意：不能修饰类（外部类）</p><h2 id="04-集合"><a href="#04-集合" class="headerlink" title="04  集合"></a>04  集合</h2><h3 id="4-1-集合类"><a href="#4-1-集合类" class="headerlink" title="4.1 集合类"></a>4.1 集合类</h3><p>方便对多个对象进行存取操作。</p><p>为了保存数目不确定的对象，JDK中提供了集合类（又称容器类），这些类可以存储任意类型的对象，并且长度可变，所有集合类都位于java.util包中，使用时需要导入该包，否则会出现异常。</p><p><img alt="img" data-src="https://www.runoob.com/wp-content/uploads/2014/01/2243690-9cd9c896e0d512ed.gif" class="lozad"></p><p>从上面的集合框架图可以看到，Java 集合框架主要包括两种类型的容器，一种是集合（Collection），存储一个元素集合，另一种是图（Map），存储键/值对映射。Collection 接口又有 3 种子类型，List、Set 和 Queue，再下面是一些抽象类，最后是具体实现类，常用的有 ArrayList、LinkedList、HashSet、LinkedHashSet、HashMap、LinkedHashMap 等等。</p><p>集合框架是一个用来代表和操纵集合的统一架构。所有的集合框架都包含如下内容：</p><ul><li><strong>接口：</strong>是代表集合的抽象数据类型。例如 Collection、List、Set、Map 等。之所以定义多个接口，是为了以不同的方式操作集合对象</li><li><strong>实现（类）：</strong>是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构，例如：ArrayList、LinkedList、HashSet、HashMap。</li><li><strong>算法：</strong>是实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序。这些算法被称为多态，那是因为相同的方法可以在相似的接口上有着不同的实现。</li></ul><p>除了集合，该框架也定义了几个 Map 接口和类。Map 里存储的是键/值对。尽管 Map 不是集合，但是它们完全整合在集合中。</p><p><img alt="img" data-src="http://www.runoob.com/wp-content/uploads/2014/01/java-coll.png" class="lozad"></p><p>Collection: 单列集合类的根接口</p><p>List和Set 接口继承自Collection接口，习惯将List接口的对象称为List集合。List集合元素有序且可重复，Set集合无序不重复。</p><p>ArrayList 是List接口的一个实现类，在ArrayList内部封装了一个长度可变的数组，当存入的元素超过数组长度时，ArrayList会在内存中分配一个更大的数组存储这些元素，因此可将ArrayList集合看作一个长度可变的数组</p><p>Iterator 接口  主要用于遍历Collection和其子类中的元素，因此Iterator对象也被称为迭代器。</p><p>Map接口： 双列集合，集合中的每个元素都包含一个键对象Key和一个值对象Value,键和值是一一对应的关系，称为映射。</p><p>HashMap集合：基于哈希表的Map接口的实现，用于存储键值映射关系，但不保证映射的顺序。</p><p>Properties集合： 主要用于存储字符串类型的键和值。</p><p><strong>集合接口</strong></p><p>集合框架定义了一些接口。本节提供了每个接口的概述：</p><div class="table-container"><table><thead><tr><th>序号</th><th>接口描述</th></tr></thead><tbody><tr><td>1</td><td>Collection 是最基本的集合接口，一个 Collection 代表一组 Object，即 Collection 的元素, Java不提供直接继承自Collection的类，只提供继承于的子接口(如List和set)。Collection 接口存储一组不唯一，无序的对象。</td></tr><tr><td>2</td><td>List接口是一个有序的 Collection，使用此接口能够精确的控制每个元素插入的位置，能够通过索引(元素在List中位置，类似于数组的下标)来访问List中的元素，第一个元素的索引为 0，而且允许有相同的元素。List 接口存储一组不唯一，有序（插入顺序）的对象。</td></tr><tr><td>3</td><td>Set 具有与 Collection 完全一样的接口，只是行为上不同，Set 不保存重复的元素。Set 接口存储一组唯一，无序的对象。</td></tr><tr><td>4</td><td>SortedSet 继承于Set保存有序的集合。</td></tr><tr><td>5</td><td>Map 接口存储一组键值对象，提供key（键）到value（值）的映射。</td></tr><tr><td>6</td><td>Map.Entry 描述在一个Map中的一个元素（键/值对）。是一个Map的内部类。</td></tr><tr><td>7</td><td>SortedMap继承于 Map，使 Key 保持在升序排列。</td></tr><tr><td>8</td><td>Enumeration这是一个传统的接口和定义的方法，通过它可以枚举（一次获得一个）对象集合中的元素。这个传统接口已被迭代器取代。</td></tr></tbody></table></div><p><strong>Set和List的区别</strong></p><ul><li>Set 接口实例存储的是<strong>无序</strong>的，<strong>不重复</strong>的数据。List 接口实例存储的是有序的，可以重复的元素。</li><li>Set检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变 <strong>&lt;实现类有HashSet,TreeSet&gt;</strong>。</li><li>List和数组类似，可以动态增长，根据实际存储的数据的长度自动增长List的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变 <strong>&lt;实现类有ArrayList,LinkedList,Vector&gt;</strong> 。</li></ul><h3 id="4-2-泛型"><a href="#4-2-泛型" class="headerlink" title="4.2 泛型"></a>4.2 泛型</h3><p>Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。</p><p>泛型的本质是<strong>参数化类型</strong>，也就是说所操作的数据类型被指定为一个参数。</p><p>假定我们有这样一个需求：写一个排序方法，能够对整型数组、字符串数组甚至其他任何类型的数组进行排序，该如何实现？</p><p>答案是可以使用 <strong>Java 泛型</strong>。</p><p>使用 Java 泛型的概念，我们可以写一个泛型方法来对一个对象数组排序。然后，调用该泛型方法来对整型数组、浮点数数组、字符串数组等进行排序。</p><h3 id="5-1-输入-输出（I-O"><a href="#5-1-输入-输出（I-O" class="headerlink" title="5.1 输入/输出（I/O)"></a>5.1 输入/输出（I/O)</h3><p>是指程序与外部设备或者计算机之间的交互操作，如从键盘输入数据，在显示器显示数据等。</p><p>在Java中，将这种不同输入/输出设备（键盘、内存、网络、显示器）之间的数据传输抽象为“流”,Stream</p><p>一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。由于Java中的流都位于java.io包中，因此称为I/O流。按照操作数据的不同，分为字节流和字符流，按数据传输方式的不同又分为输入流Reader和输出流Writer。</p><p><img alt="img" data-src="https://www.runoob.com/wp-content/uploads/2013/12/iostream2xx.png" class="lozad"> </p><h2 id="05-读写"><a href="#05-读写" class="headerlink" title="05 读写"></a>05 读写</h2><h3 id="5-2-字节流"><a href="#5-2-字节流" class="headerlink" title="5.2 字节流"></a>5.2 字节流</h3><p>字节流是指针对字节输入/输出提供的一系列流，JDK中提供了两个抽象类InputStream和OutputStream表示字节输入流和字节输出流，它们是字节流的两个顶级父类。</p><h5 id="5-2-1-字节流的读-写操作"><a href="#5-2-1-字节流的读-写操作" class="headerlink" title="5.2.1 字节流的读/写操作"></a>5.2.1 字节流的读/写操作</h5><p>计算机的数据基本都保存在硬盘的文件中，在操作文件时，最常见的就是从文件中读取数据并将数据写入文件，即文件的读/写。针对文件的读/写,JDK专门提供了两个类，分别是FileInputStream和FileOutputStream.</p><p>在src目录下创建一个文本文件itheima.txt，在文件输入内容“Hello”并保存，然后创建一个读取文件文本文件的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example01</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//创建一个字节输入流</span></span><br><span class="line">    FileInputStream input = <span class="keyword">new</span> FileInputStream(<span class="string">"itheima.txt"</span>);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;  <span class="comment">//定义一个int类型的变量i,记住每次读取的一个字节</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">      i = input.read();  <span class="comment">// 变量i记住读取的一个字节</span></span><br><span class="line">      <span class="keyword">if</span>(i==-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;  <span class="comment">//如果读取的字节为-1，跳出while循环</span></span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(i);  <span class="comment">//否则将i写出</span></span><br><span class="line">    &#125;</span><br><span class="line">    input.close(); <span class="comment">//关闭资源</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常情况下读取文件输出结果为字符，输出数字是因为在硬盘上存储的文件都是以字节的形式存在的，上述代码结果是五个字节所对应的十进制数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example02</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//创建一个文件字节输出流</span></span><br><span class="line">    FileOutputStream output = <span class="keyword">new</span> FileOutputStream(<span class="string">"test.txt"</span>);</span><br><span class="line">    String s = <span class="string">"www.baidu.com"</span>; <span class="comment">//定义一个String类型字符串</span></span><br><span class="line">    <span class="keyword">byte</span>[] arr = s.getBytes(); <span class="comment">//将字符串变成字节数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;arr.length;i++)&#123;</span><br><span class="line">      output.write(arr[i]);  <span class="comment">//将数组中的数据写入到目标文件中</span></span><br><span class="line">    &#125;</span><br><span class="line">    output.close();  <span class="comment">//关闭资源</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过FileOutputStream写数据时，自动创建了文件test.txt,并将数据写入文件，若是向一个已经存在的文件中写入数据，则文件中数据首先被清空，再写入新的数据。</p><p>若遇到I/O异常，close()方法将无法执行，流对象所占用的系统资源将无法释放，为了保证I/O流的close()方法必须执行，通常将关闭流的操作写在finally代码块中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">  FileOutputStream output = <span class="keyword">null</span>;  <span class="comment">//创建一个文件字节输出流</span></span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    output = <span class="keyword">new</span> FileOutputStream(<span class="string">"test.txt"</span>);</span><br><span class="line">    String s = <span class="string">"www.baidu.com"</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] arr = s.getBytes();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.length; i++)&#123;</span><br><span class="line">      output.write(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(output != <span class="keyword">null</span>)&#123;</span><br><span class="line">      output.close();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-2-字节流的缓冲区"><a href="#5-2-2-字节流的缓冲区" class="headerlink" title="5.2.2 字节流的缓冲区"></a>5.2.2 字节流的缓冲区</h5><p>提高效率，定义一个字节数组作为缓冲区，将读取到的单个字节保存到字节数组中，然后将字节数组中的数据一次性写入文件。右击项目选择New-Folder,创建文件夹source和target，在source文件夹中存放一jpg图片，将图片复制到target文件夹中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example03</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//创建一个字节输入流，用于读取当前目录下source文件夹中的图片</span></span><br><span class="line">    FileInputStream input = <span class="keyword">new</span> FileInputStream(<span class="string">"source\picturename.jpg"</span>);</span><br><span class="line">    <span class="comment">//创建一个文件字节输出流，用于将读取到的数据写入target文件目录下的图片</span></span><br><span class="line">    FileOutputStream output = <span class="keyword">new</span> FileOutputStream(<span class="string">"target\picturename.jpg"</span>);</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>]; <span class="comment">//定义一个字节数组作为缓冲区</span></span><br><span class="line">    <span class="keyword">int</span> length; <span class="comment">//定义变量length记住读取缓冲区的字节数</span></span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMills();  <span class="comment">//获取复制图片前的系统时间</span></span><br><span class="line">    <span class="keyword">while</span>((length=input.read(buffer)) != -<span class="number">1</span>)&#123; <span class="comment">//判断是否读到文件末尾</span></span><br><span class="line">      <span class="comment">//从第一个字节开始，向文件写入length个字节</span></span><br><span class="line">      output.write(buffer,<span class="number">0</span>,length);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> endTime = System.currentTimeMills();</span><br><span class="line">    System.out.println(<span class="string">"复制图片所消耗的时间为："</span>+(endTime-startTime)+<span class="string">"毫秒"</span>);</span><br><span class="line">    input.colse();</span><br><span class="line">    output.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-3-字节缓冲流"><a href="#5-2-3-字节缓冲流" class="headerlink" title="5.2.3 字节缓冲流"></a>5.2.3 字节缓冲流</h5><p>在进行文件复制时，使用字节流缓冲区可以提高程序的效率，此外，还可以使用java.io包中自带缓冲功能的字节缓冲流，分别是BufferedInputStream和BufferedOutputStream,这两个流在实例化时需要接收InputStream和OutputStream类型的对象作为参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example04</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//创建一个带缓冲区的输入流</span></span><br><span class="line">    BufferedInputStream bufferInput = <span class="keyword">new</span> BufferedInputStream(</span><br><span class="line">            <span class="keyword">new</span> FileInputStream(<span class="string">"source\picturename.jpg"</span>));</span><br><span class="line">    <span class="comment">//创建一个带缓冲区的输出流</span></span><br><span class="line">    BufferedOutputStream bufferOutput = <span class="keyword">new</span> BufferedOutputStream(</span><br><span class="line">            <span class="keyword">new</span> FileOutputStream(<span class="string">"target\picturename.jpg"</span>));</span><br><span class="line">    <span class="keyword">long</span> startTime = System.currentTimeMills();</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">    <span class="keyword">while</span>((length = bufferInput.read()) != -<span class="number">1</span>)&#123;</span><br><span class="line">      bufferOutput.write(length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> endTime = System.currentTimeMills();</span><br><span class="line">    System.out.println(<span class="string">"复制图片所消耗的时间为："</span>+(endTime-startTime)+<span class="string">"毫秒"</span>);</span><br><span class="line">    bufferInput.close();</span><br><span class="line">    bufferOutput.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-字符流"><a href="#5-3-字符流" class="headerlink" title="5.3 字符流"></a>5.3 字符流</h3><p>字符流的目标通常是文本文件，Reader和Writer是java.io包中所有字符流的抽象父类，定义了在I/O流中读/写字符数据的通用API,在Java中，字符采用的是Unicode字符编码</p><h5 id="5-3-1-字符流的读-写操作"><a href="#5-3-1-字符流的读-写操作" class="headerlink" title="5.3.1  字符流的读/写操作"></a>5.3.1  字符流的读/写操作</h5><p>在项目下创建文本文件”read.txt”,并在其中输入字符”www.baidu.com”,然后创建一个字符输入流FileReader读取文本文件中的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example05</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//创建一个FileReader对象用于读取文件中的字符</span></span><br><span class="line">    FileReader fileReader = <span class="keyword">new</span> FileReader(<span class="string">"read.txt"</span>);</span><br><span class="line">    <span class="keyword">int</span> i; <span class="comment">//定义一个变量用于记录读取的字符</span></span><br><span class="line">    <span class="keyword">while</span>((i=fileReader.read()) != -<span class="number">1</span>)&#123; <span class="comment">//循环判断是否读取到文件的末尾</span></span><br><span class="line">      System.put.print((<span class="keyword">char</span>) i); <span class="comment">//不是字符流末尾就转为字符打印</span></span><br><span class="line">    &#125;</span><br><span class="line">    fileReader.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example06</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//创建一个FileWriter对象用于向文件中写入数据</span></span><br><span class="line">    FileWriter fileWriter = <span class="keyword">new</span> FileWriter(<span class="string">"write.txt"</span>);</span><br><span class="line">    String s = <span class="string">"你好，www.baidu.com"</span>;</span><br><span class="line">    fileWriter.write(s); <span class="comment">//将字符数据写入到文本文件中</span></span><br><span class="line">    fileWriter.close();  <span class="comment">//关闭写入流，释放资源</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序运行后，会在当前目录下生成write.txt文件</p><h5 id="5-3-2-字符缓冲流"><a href="#5-3-2-字符缓冲流" class="headerlink" title="5.3.2  字符缓冲流"></a>5.3.2  字符缓冲流</h5><p>BufferedReader用于对字符输入流提供缓冲区，BufferedWriter用于对字符输出流提供缓冲区。</p><p>BufferedReader中readLine()方法用于一次读取一行文本。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example07</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//创建一个BufferedReader缓冲对象</span></span><br><span class="line">    BufferedReader bufferReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">"read.txt"</span>));</span><br><span class="line">    <span class="comment">//创建一个BufferedWriter缓冲区对象</span></span><br><span class="line">    BufferdWriter bufferWriter = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">"dest.txt"</span>));</span><br><span class="line">    String s = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//每次读取一行文本，判断是否到文件末尾</span></span><br><span class="line">    <span class="keyword">while</span>((s=bufferReader.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">      bufferWriter.write(s);</span><br><span class="line">      <span class="comment">//写入一个换行符，该方法会根据不同的操作系统生成相应的换行符</span></span><br><span class="line">      bufferWriter.newLine();</span><br><span class="line">    &#125;</span><br><span class="line">    bufferReader.close();</span><br><span class="line">    bufferWriter.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-3-3-转换流"><a href="#5-3-3-转换流" class="headerlink" title="5.3.3 转换流"></a>5.3.3 转换流</h5><p>OutputStreamWriter,能将一个字节输出流转换为字符输出流，方便直接写入字符</p><p>InputStreamReader,能将一个字节输入流转换为字符输入流，方便直接读写字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example08</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    <span class="comment">//创建字节输入流</span></span><br><span class="line">    FileInputStream input = <span class="keyword">new</span> FileInputStream(<span class="string">"read.txt"</span>);</span><br><span class="line">    <span class="comment">//将字节输入流转换为字符输入流</span></span><br><span class="line">    InputStreamReader streamReader = <span class="keyword">new</span> InputStreamReader(input);</span><br><span class="line">    <span class="comment">//赋予字符输入流对象缓冲区</span></span><br><span class="line">    BufferedReader bufferReader = <span class="keyword">new</span> BufferedReader(streamReader);</span><br><span class="line">    <span class="comment">//创建字节输出流</span></span><br><span class="line">    FileOutputStream output = <span class="keyword">new</span> FileOutputStream(<span class="string">"dest2.txt"</span>);</span><br><span class="line">    <span class="comment">//将字节输出流转换为字符输出流</span></span><br><span class="line">    OutputStreamWriter streamWriter = <span class="keyword">new</span> OutputStreamWriter(output);</span><br><span class="line">    <span class="comment">//赋予字符输出流对象缓冲区</span></span><br><span class="line">    BufferedWriter bufferWriter = <span class="keyword">new</span> BufferedWriter(streamWriter);</span><br><span class="line">    String line = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//判断是否读到文件末尾</span></span><br><span class="line">    <span class="keyword">while</span>((line=bufferReader.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">      bufferWriter.write(line);  <span class="comment">//输出读取到的文件</span></span><br><span class="line">    &#125;</span><br><span class="line">    bufferReader.close();</span><br><span class="line">    bufferWriter.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="06-多线程"><a href="#06-多线程" class="headerlink" title="06 多线程"></a>06 多线程</h2><h3 id="6-1-多线程"><a href="#6-1-多线程" class="headerlink" title="6.1 多线程"></a>6.1 多线程</h3><p>进程：在一个操作系统中，每个独立执行的程序都可称为一个进程(正在运行的程序)。</p><p>CPU具备分时机制，每个时间点只能执行一个程序，由于CPU运行速度非常快，所以能够在极短时间内在不同的进程之间进行切换。</p><p>线程： 一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</p><p>当一个Java程序启动时，就会产生一个进程，该进程会默认创建一个线程，称为主线程，在主线程上会运行main()方法中的代码。</p><p>一个进程包括由操作系统分配的内存空间，包含一个或多个线程。一个线程不能独立的存在，它必须是进程的一部分。一个进程一直运行，直到所有的非守护线程都结束运行后才能结束。</p><h5 id="6-1-1-一个线程的生命周期"><a href="#6-1-1-一个线程的生命周期" class="headerlink" title="6.1.1 一个线程的生命周期"></a>6.1.1 一个线程的生命周期</h5><p>线程是一个动态执行的过程，它也有一个从产生到死亡的过程。</p><p>下图显示了一个线程完整的生命周期。</p><p><img alt="img" data-src="http://www.runoob.com/wp-content/uploads/2014/01/java-thread.jpg" class="lozad"></p><ul><li><p><strong>新建状态:</strong></p><p>使用 <strong>new</strong> 关键字和 <strong>Thread</strong> 类或其子类建立一个线程对象后，该线程对象就处于新建状态。它保持这个状态直到程序 <strong>start()</strong> 这个线程。</p></li><li><p><strong>就绪状态</strong>:</p><p>当线程对象调用了start()方法之后，该线程就进入就绪状态。就绪状态的线程处于就绪队列中，要等待JVM里线程调度器的调度。</p></li><li><p><strong>运行状态</strong>:</p><p>如果就绪状态的线程获取 CPU 资源，就可以执行 <strong>run()</strong>，此时线程便处于运行状态。处于运行状态的线程最为复杂，它可以变为阻塞状态、就绪状态和死亡状态。</p></li><li><p><strong>阻塞状态</strong>:</p><p>如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种：</p><ul><li>等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。</li><li>同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。</li><li>其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。</li></ul></li><li><p><strong>死亡状态</strong>:</p><p>一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。</p></li></ul><h5 id="6-1-2-线程的优先级"><a href="#6-1-2-线程的优先级" class="headerlink" title="6.1.2 线程的优先级"></a>6.1.2 线程的优先级</h5><p>每一个 Java 线程都有一个优先级，这样有助于操作系统确定线程的调度顺序。</p><p>Java 线程的优先级是一个<strong>整数</strong>，其取值范围是 1 （Thread.MIN_PRIORITY ） - 10 （Thread.MAX_PRIORITY ）。</p><p>默认情况下，每一个线程都会分配一个优先级 NORM_PRIORITY（5）。</p><p>具有较高优先级的线程对程序更重要，并且应该在低优先级的线程之前分配处理器资源。但是，线程优先级不能保证线程执行的顺序，而且非常依赖于平台。</p><h5 id="6-2-1-创建一个线程"><a href="#6-2-1-创建一个线程" class="headerlink" title="6.2.1 创建一个线程"></a>6.2.1 创建一个线程</h5><p>Java 提供了三种创建线程的方法：</p><ul><li>通过实现 Runnable 接口；</li><li>通过继承 Thread 类本身；</li><li>通过 Callable 和 Future 创建线程。</li></ul><h5 id="6-2-2通过继承Thread来创建线程"><a href="#6-2-2通过继承Thread来创建线程" class="headerlink" title="6.2.2通过继承Thread来创建线程"></a>6.2.2通过继承Thread来创建线程</h5><p>创建一个线程的第二种方法是创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。</p><p>继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。</p><p>该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。</p><p>创建ThreadDemo类，继承于Thread类，并重写Thread类的run()方法，在run()方法中通过for循环输出5次” ThreadDemo类的run()方法执行了”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">      System.out.println(<span class="string">"ThreadDemo类的run()方法执行了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建测试类，在该类中创建一个线程对象threadDemo，并调用start()方法启动子线程，然后通过for循环在main()方法(主线程)中输出五次”主方法main()执行了“。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    ThreadDemo threadDemo = <span class="keyword">new</span> ThreadDemo();  <span class="comment">//创建线程ThreadDemo的线程对象</span></span><br><span class="line">    threadDemo.start(); <span class="comment">//开启线程</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">       System.out.println(<span class="string">"主方法main()执行了"</span>); </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">主方法main()执行了</span><br><span class="line">主方法main()执行了</span><br><span class="line">主方法main()执行了</span><br><span class="line">ThreadDemo类的run()方法执行了</span><br><span class="line">ThreadDemo类的run()方法执行了</span><br><span class="line">ThreadDemo类的run()方法执行了</span><br><span class="line">ThreadDemo类的run()方法执行了</span><br><span class="line">ThreadDemo类的run()方法执行了</span><br><span class="line">主方法main()执行了</span><br><span class="line">主方法main()执行了</span><br></pre></td></tr></table></figure><p>两个for循环输出语句交错执行，该程序实现了多线程。</p><h5 id="6-2-3-通过实现-Runnable-接口来创建线程"><a href="#6-2-3-通过实现-Runnable-接口来创建线程" class="headerlink" title="6.2.3 通过实现 Runnable 接口来创建线程"></a>6.2.3 通过实现 Runnable 接口来创建线程</h5><p>创建一个线程，最简单的方法是创建一个实现 Runnable 接口的类。</p><p>为了实现 Runnable，一个类只需要执行一个方法调用 run()，声明如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>在创建一个实现 Runnable 接口的类之后，可以在类中实例化一个线程对象。</p><p>Thread 定义了几个构造方法，下面的这个是经常使用的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread(Runnable threadOb,String threadName);</span><br></pre></td></tr></table></figure><p>这里，threadOb 是一个实现 Runnable 接口的类的实例，并且 threadName 指定新线程的名字。</p><p>新线程创建之后，调用它的 start() 方法它才会运行。’’</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunnableDemo</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Thread t;</span><br><span class="line">  <span class="keyword">private</span> String threadName;</span><br><span class="line">  </span><br><span class="line">  RunnableDemo(String name)&#123;</span><br><span class="line">    threadName = name;</span><br><span class="line">    System.out.println(<span class="string">"Creating "</span> + threadName);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123; </span><br><span class="line">    System.out.println(<span class="string">"Running "</span> + threadName);</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; i&gt;<span class="number">0</span>; i--)&#123;</span><br><span class="line">        System.out.println(<span class="string">"Thread: "</span> + threadName + <span class="string">", "</span> + i);</span><br><span class="line">        <span class="comment">//让线程睡眠一会</span></span><br><span class="line">        Thread.sleep(<span class="number">50</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">      System.out.println(<span class="string">"Thread "</span> + threadName + <span class="string">"interrupted."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"Thread "</span> + threadName + <span class="string">"exiting."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Starting"</span> + threadName);</span><br><span class="line">    <span class="keyword">if</span>(t == <span class="keyword">null</span>)&#123;</span><br><span class="line">      t = <span class="keyword">new</span> Thread(<span class="keyword">this</span>,threadName);</span><br><span class="line">      t.start();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    RunnableDemo R1 = <span class="keyword">new</span> RunnableDemo(<span class="string">"Thread-1"</span>);</span><br><span class="line">    R1.start();</span><br><span class="line">    </span><br><span class="line">    RunnableDemo R2 = <span class="keyword">new</span> RunnableDemo(<span class="string">"Thread-2"</span>);</span><br><span class="line">    R2.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Creating Thread-1</span><br><span class="line">Starting Thread-1</span><br><span class="line">Creating Thread-2</span><br><span class="line">Starting Thread-2</span><br><span class="line">Running Thread-1</span><br><span class="line">Thread: Thread-1, 4</span><br><span class="line">Running Thread-2</span><br><span class="line">Thread: Thread-2, 4</span><br><span class="line">Thread: Thread-1, 3</span><br><span class="line">Thread: Thread-2, 3</span><br><span class="line">Thread: Thread-1, 2</span><br><span class="line">Thread: Thread-2, 2</span><br><span class="line">Thread: Thread-1, 1</span><br><span class="line">Thread: Thread-2, 1</span><br><span class="line">Thread Thread-1 exiting.</span><br><span class="line">Thread Thread-2 exiting.</span><br></pre></td></tr></table></figure><h5 id="6-3-1-同步代码块"><a href="#6-3-1-同步代码块" class="headerlink" title="6.3.1 同步代码块"></a>6.3.1 同步代码块</h5><p>同步是指多个操作系统在同一个时间段内只能有一个线程进行，其他线程要等待此线程完成之后才可以继续执行，Java为同步操作提供了synchronized关键字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步对象)&#123;</span><br><span class="line">  <span class="comment">//需要同步的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用同步代码块时必须指定一个需要同步的对象，也称为锁对象，一般情况下都将当前对象this设置为同步对象。</p><p>被synchronized修饰的方法在某一时刻只允许一个线程访问，访问该方法的其他线程都会发生堵塞，直到当前线程访问完毕后，其他线程才有机会执行该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">权限修饰符 <span class="keyword">synchronized</span> 返回值类型 方法名([参数<span class="number">1</span>,...])&#123;</span><br><span class="line">  <span class="comment">//需要同步的代码块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="07-web"><a href="#07-web" class="headerlink" title="07 web"></a>07 web</h2><h3 id="7-1-HTML"><a href="#7-1-HTML" class="headerlink" title="7.1 HTML"></a>7.1 HTML</h3><p>Hyper Text Markup Language  ，超文本标记语言，主要作用是通过HTML标记对网页中的文本、图片、声音等内容进行描述。</p><p>HTML网页就是一个文件名后缀为.htm或.html的文件。可以用记事本打开、编写。</p><p>基本的HTML文档结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!</span> <span class="attr">DOCTYPE</span> <span class="attr">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>带有&lt;&gt;符号的元素被称为HTML标记，标记是放在标记符(&lt;&gt;)中的用于表示某个功能的编码命令，也称为HTML标签或HTML元素。</p><ol><li><p>&lt;! DOCTYPE HTML&gt;标记</p><p>该标记位于文档最前面，用于向浏览器说明当前文档使用的是那种HTML标准规范。</p></li><li><p>&lt; html &gt; 标记</p><p>根标记，用于告知浏览器其自身是一个HTML文档。<html></html> 之间的内容是文档的头部和主体。</p></li><li><p>&lt; head &gt; 标记</p><p>头部标记，用于定义HTML文档的头部信息，封装其他位于文档头部的标记,例如：</p><ul><li>&lt; title &gt; 标记用于描述文档的标题</li><li>&lt; meta &gt; 标记可提供有关页面的元信息，也可指定字符编码</li><li>&lt; link &gt;标记用于定义文档与外部资源的关系，其最常见的用途是链接样式表</li><li>&lt; style &gt; 标记用于为HTML文档定义样式信息。</li><li>一个HTML文档只能含有一对&lt; head &gt; 标记，并且绝大多数文档头部包含的数据都不会真正作为内容显示在页面中。</li></ul></li><li><p>&lt; body &gt; 标记</p><p>主体标记，用于定义HTML文档所要显示的内容，最终展示给用户的信息。与&lt; head &gt; 标记是并列关系。</p></li></ol><h5 id="7-1-1-单标记与双标记"><a href="#7-1-1-单标记与双标记" class="headerlink" title="7.1.1 单标记与双标记"></a>7.1.1 单标记与双标记</h5><p>单标记也称空标记，是指用一个标记符号即可完整描述某个功能的标记。标记名与/之间有个空格：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标记名</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span>  //定义一条水平线</span><br></pre></td></tr></table></figure><p>双标记也称体标记，是指由开始和结束两个标记符号组成的标记</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标记名</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">标记名</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="7-1-2-文本控制与文本样式标记"><a href="#7-1-2-文本控制与文本样式标记" class="headerlink" title="7.1.2 文本控制与文本样式标记"></a>7.1.2 文本控制与文本样式标记</h5><ol><li><p>段落标记&lt; p &gt; &lt; /p &gt; 和换行标记&lt; br /&gt;</p></li><li><p>文本样式标记</p><p>&lt; font &gt; 标记用于控制网页中文本的样式，如字体、字号和字体颜色等。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> 属性=<span class="string">"属性值"</span>&gt;</span>文本内容<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"微软雅黑"</span> <span class="attr">size</span>=<span class="string">"5"</span> <span class="attr">color</span>=<span class="string">"blue"</span>&gt;</span>5号蓝色文本，字体是微软雅黑<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​</p></li></ol><h5 id="7-1-3-图像标记"><a href="#7-1-3-图像标记" class="headerlink" title="7.1.3 图像标记"></a>7.1.3 图像标记</h5><p>&lt; img/ &gt;,主要用于显示HTML页面中的图像：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"图像 URL"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>src属性用于指定图像文件的路径，可以是相对路径，也可以是绝对路径。width与height属性分别用于设置图像的宽度与高度，单位为像素，border属性用于设置图像的边框，border=”0”表示无边框。</p><h5 id="7-1-4-表格标记"><a href="#7-1-4-表格标记" class="headerlink" title="7.1.4 表格标记"></a>7.1.4 表格标记</h5><p>用于在页面中创建表格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格内的文字<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建表格的三对基本标记，缺一不可。<table></table>用于定义一个表格，<tr></tr>用于定义表格中的行，必须嵌套在<table></table>标记中，<td></td>用于定义表格中的单元格，也可称为表格中的列，必须嵌套在<tr></tr>中。<table border="1"></table>表示表格边框的宽度为1像素，一般不要规定，而是使用CSS添加边框样式和颜色。</p><h5 id="7-1-5-表单标记"><a href="#7-1-5-表单标记" class="headerlink" title="7.1.5 表单标记"></a>7.1.5 表单标记</h5><p>表单就是在网页上用于输入信息的区域，其主要功能是收集用户信息，并将这些信息传递给后台服务器。例如，网站注册页面中的用户名和密码输入框、提交按钮等。</p><p>表单主要由表单域、表单控件和提示信息三部分构成。</p><ul><li>表单域： 相当于一个容器，用于容纳所有的表单控件和提示信息。</li><li>表单控件：包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框提交按钮等。</li><li>提示信息：一个表单中通常还需要包含一些说明性的文字，即表单控件前的文字说明，用于提示用户进行填写和操作。</li></ul><h6 id="1-表单域"><a href="#1-表单域" class="headerlink" title="1. 表单域"></a>1. 表单域</h6><p>在HTML中，&lt; form &gt; 标记用于定义一个表单域，即创建一个表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"url地址"</span> <span class="attr">method</span>=<span class="string">"提交方式"</span> <span class="attr">name</span>=<span class="string">"表单名称"</span>&gt;</span></span><br><span class="line">  各种表单控件</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>action属性用于指定表单提交地址，如action=”login.jsp”表示表单数据会提交到名为login.jsp的页面进行处理。</p><p>method属性用于设置表单数据的提交方式，其取值为GET(默认值)或POST.</p><p>name属性用于设置表单的名称。</p><h6 id="2-表单控件"><a href="#2-表单控件" class="headerlink" title="2. 表单控件"></a>2. 表单控件</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"控件类型"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>type=”text” 文本输入框控件</p><p>type=”button” 按钮控件</p><p>type=”password” 密码输入框控件</p><p>type=”radio”,单选输入框控件</p><p>type=”checkbox” 复选框控件</p><p>代码注释：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">!</span> <span class="attr">--</span>注释内容<span class="attr">--</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="7-1-6-列表标记和超链接标记"><a href="#7-1-6-列表标记和超链接标记" class="headerlink" title="7.1.6 列表标记和超链接标记"></a>7.1.6 列表标记和超链接标记</h5><p>用于展示列表信息的标记被称为列表标记，分为无序列表和有序列表</p><p>1、<strong>无序列表</strong>指列表的各个列表之间没有顺序级别之分，通常是并列的列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><li></li> type 常用的有三种，disc、square和circle</p><p>2、超链接标记</p><p><a></a>标记环绕需要被链接的对象即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"跳转目标"</span> <span class="attr">target</span>=<span class="string">"目标窗口的弹出方式"</span>&gt;</span>文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>href属性用于指定链接指向的页面URL</p><p>target取值为 _self 和 _blank, 意为在原窗口打开和在新窗口打开。</p><h5 id="7-1-7-lt-div-gt-标记"><a href="#7-1-7-lt-div-gt-标记" class="headerlink" title="7.1.7 &lt; div &gt; 标记"></a>7.1.7 &lt; div &gt; 标记</h5><p>div是DIVision的缩写，”分割、区域“，</p><p>&lt; div &gt; 标记就是一个区块容器标记，可以将网页分割为独立且不同的部分，以实现网页的规划和布局</p><h3 id="7-2-CSS"><a href="#7-2-CSS" class="headerlink" title="7.2 CSS"></a>7.2 CSS</h3><p>Cascading Style Sheet，层叠样式表单</p><p>是一种用于(增强)控制网页样式并允许将样式信息与网页内容分离的标记性语言。主要用于设置HTML页面中的文本内容(字体、字号、对齐方式等)、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123;属性 1:属性值 1; 属性 2:属性值 2; 属性 3:属性值 3;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;<span class="attribute">border</span>:<span class="number">2px</span> solid blue; <span class="attribute">width</span>:<span class="number">300px</span>; <span class="attribute">height</span>:<span class="number">200px</span>;&#125;</span><br></pre></td></tr></table></figure><p>div为选择器，表示CSS样式作用的HTML对象</p><h5 id="7-2-1-CSS样式的引用方式"><a href="#7-2-1-CSS样式的引用方式" class="headerlink" title="7.2.1 CSS样式的引用方式"></a>7.2.1 CSS样式的引用方式</h5><h6 id="1-内嵌式"><a href="#1-内嵌式" class="headerlink" title="1. 内嵌式"></a>1. 内嵌式</h6><p>将CSS代码集中写在HTML文档的  <head><meta name="generator" content="Hexo 3.9.0">  头部标记中，并用<style> 标记定义,一般不建议使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    选择器&#123;属性 1:属性值 1; 属性 2:属性值 2; 属性 3:属性值 3;&#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="2-链入式"><a href="#2-链入式" class="headerlink" title="2. 链入式"></a>2. 链入式</h6><p>将所有的样式放在一个或多个以css为扩展名的外部样式表文件中，通过 <link/> 标记将外部样式表文件链接到HTML文件中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"CSS文件的路径"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>rel:定义当前文档与被链接文档之间的关系，指定为stylesheet，表示被链接的文档是一个样式表文件。</p><p>type=”text/css” 表示链接的外部文件为CSS</p><p>CSS:<a href="http://www.w3school.com.cn/css/index.asp">http://www.w3school.com.cn/css/index.asp</a> </p><h3 id="7-3-JavaScript"><a href="#7-3-JavaScript" class="headerlink" title="7.3  JavaScript"></a>7.3  JavaScript</h3><p><a href="http://www.w3school.com.cn/b.asp">http://www.w3school.com.cn/b.asp</a></p><h5 id="7-3-1-DOM"><a href="#7-3-1-DOM" class="headerlink" title="7.3.1 DOM"></a>7.3.1 DOM</h5><p>Document Object Model(文档对象模型）</p><p>HTML DOM 定义了访问和操作 HTML 文档的标准方法。</p><p>DOM 将 HTML 文档表达为树结构。</p><p>​         <img src="http://www.w3school.com.cn/i/ct_htmltree.gif" alt="img"></p><p><strong>什么是 HTML DOM？</strong></p><p>HTML DOM 是：</p><ul><li>HTML 的标准对象模型</li><li>HTML 的标准编程接口</li><li>W3C 标准</li></ul><p>HTML DOM 定义了所有 HTML 元素的<em>对象</em>和<em>属性</em>，以及访问它们的<em>方法</em>。</p><p><em>换言之，HTML DOM 是关于如何获取、修改、添加或删除 HTML 元素的标准。</em></p><p>怎么办，不想写那个破论文，心里好慌啊。。。。为什么人生非得做一些身不由己的无聊事情，归根到底是穷，穷！ 现在这样，以后工作说不定还要妥协，破局的关键是提升自身实力，通过互联网赚得第一桶金子，依靠资本，资源交换，唯有钱生钱才是王道！不要被渣渣虐打，也不要一直做渣渣，要加油，要做大牛，做渣渣的感觉实在太不爽了，没钱还被人挑，做大牛，有钱又不被人虐！</p><p><strong>在 HTML DOM 中，所有事物都是节点。DOM 是被视为节点树的 HTML。</strong></p><ul><li>整个文档是一个文档节点</li><li>每个 HTML 元素是元素节点</li><li>HTML 元素内的文本是文本节点</li><li>每个 HTML 属性是属性节点</li><li>注释是注释节点</li></ul><h5 id="7-3-2-节点父、子和同胞"><a href="#7-3-2-节点父、子和同胞" class="headerlink" title="7.3.2 节点父、子和同胞"></a>7.3.2 节点父、子和同胞</h5><p>节点树中的节点彼此拥有层级关系。</p><p>父（parent）、子（child）和同胞（sibling）等术语用于描述这些关系。父节点拥有子节点。同级的子节点被称为同胞（兄弟或姐妹）。</p><ul><li>在节点树中，顶端节点被称为根（root）</li><li>每个节点都有父节点、除了根（它没有父节点）</li><li>一个节点可拥有任意数量的子</li><li>同胞是拥有相同父节点的节点</li></ul><p><strong>节点的访问</strong></p><p>在DOM中，HTML文档的各个节点被视为各种类型的Node对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父节点对象 = 子节点对象.parentNode;</span><br></pre></td></tr></table></figure><p><strong>getElementById() 方法</strong></p><p>getElementById() 方法返回带有指定 ID 的元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(&quot;intro&quot;);</span><br></pre></td></tr></table></figure><p><strong>getElementsByTagName() 方法</strong></p><p>getElementsByTagName() 返回带有指定标签名的所有元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.getElementsByTagName(&quot;tagname&quot;);</span><br></pre></td></tr></table></figure><h4 id="7-4-JavaScript"><a href="#7-4-JavaScript" class="headerlink" title="7.4 JavaScript"></a>7.4 JavaScript</h4><p><a href="http://www.w3school.com.cn/b.asp">http://www.w3school.com.cn/b.asp</a></p><p>JavaScript 是脚本语言,不需要编译，直接嵌入在HTML页面中，可以把静态的页面转变成支持用户交互并响应的动态页面。</p><p>在HTML文档中，引入JavaScript的方式主要有两种：一种是在HTML文档中直接嵌入JavaScript脚本，称为内嵌式；另一种是链接外部JavaScript脚本文件，称为外嵌式。</p><p>HTML 中的脚本必须位于 <script> 与 </script> 标签之间。</p><p>脚本可被放置在 HTML 页面的 <body> 和 <head> 部分中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">JavaScript 能够直接写入 HTML 输出流中：</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">document.write("<span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>");</span></span><br><span class="line"><span class="xml">document.write("<span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span>");</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">您只能在 HTML 输出流中使用 <span class="tag">&lt;<span class="name">strong</span>&gt;</span>document.write<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>。</span><br><span class="line">如果您在文档已加载后使用它（比如在函数中），会覆盖整个文档。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><p>JavaScript 能够直接写入 HTML 输出流中：</p><p><strong>This is a heading</strong></p><p>This is a paragraph.</p><p>您只能在 HTML 输出流中使用 <strong>document.write</strong>。 如果您在文档已加载后使用它（比如在函数中），会覆盖整个文档。</p><p>外链式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"JS文件的路径"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="7-4-1-JS变量"><a href="#7-4-1-JS变量" class="headerlink" title="7.4.1  JS变量"></a>7.4.1  JS变量</h5><p>由于JavaScript是一种弱类型语言，所以在声明变量时，不需要指定变量的类型，使用var命令声明变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">27</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"JavaScript"</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>变量必须以字母开头</li><li>变量也能以 $ 和 _ 符号开头（不过不推荐这么做）</li><li>变量名称对大小写敏感（y 和 Y 是不同的变量）</li></ul><h5 id="7-4-2-JS数据类型"><a href="#7-4-2-JS数据类型" class="headerlink" title="7.4.2  JS数据类型"></a>7.4.2  JS数据类型</h5><p><strong>字符串、数字、布尔、数组、对象、Null、Undefined</strong></p><h6 id="1-JavaScript-拥有动态类型"><a href="#1-JavaScript-拥有动态类型" class="headerlink" title="1.  JavaScript 拥有动态类型"></a>1.  JavaScript 拥有动态类型</h6><p>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x                <span class="comment">// x 为 undefined</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">6</span>;           <span class="comment">// x 为数字</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="string">"Bill"</span>;      <span class="comment">// x 为字符串</span></span><br></pre></td></tr></table></figure><h6 id="2-JavaScript-字符串"><a href="#2-JavaScript-字符串" class="headerlink" title="2. JavaScript 字符串"></a>2. JavaScript 字符串</h6><p>字符串是存储字符（比如 “Bill Gates”）的变量。</p><p>字符串可以是引号中的任意文本。可以使用单引号或双引号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> carname=<span class="string">"Bill Gates"</span>;</span><br><span class="line"><span class="keyword">var</span> carname=<span class="string">'Bill Gates'</span>;</span><br></pre></td></tr></table></figure><h6 id="3-JavaScript-数字"><a href="#3-JavaScript-数字" class="headerlink" title="3. JavaScript 数字"></a>3. JavaScript 数字</h6><p>JavaScript 只有一种数字类型。数字可以带小数点，也可以不带：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x1=<span class="number">34.00</span>;      <span class="comment">//使用小数点来写</span></span><br><span class="line"><span class="keyword">var</span> x2=<span class="number">34</span>;         <span class="comment">//不使用小数点来写</span></span><br></pre></td></tr></table></figure><p>极大或极小的数字可以通过科学（指数）计数法来书写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> y=<span class="number">123e5</span>;      <span class="comment">// 12300000</span></span><br><span class="line"><span class="keyword">var</span> z=<span class="number">123e-5</span>;     <span class="comment">// 0.00123</span></span><br></pre></td></tr></table></figure><h6 id="4-JavaScript-布尔"><a href="#4-JavaScript-布尔" class="headerlink" title="4. JavaScript 布尔"></a>4. JavaScript 布尔</h6><p>布尔（逻辑）只能有两个值：true 或 false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="literal">true</span></span><br><span class="line"><span class="keyword">var</span> y=<span class="literal">false</span></span><br></pre></td></tr></table></figure><h6 id="5-JavaScript-数组"><a href="#5-JavaScript-数组" class="headerlink" title="5. JavaScript 数组"></a>5. JavaScript 数组</h6><p>下面的代码创建名为 cars 的数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">cars[<span class="number">0</span>]=<span class="string">"Audi"</span>;</span><br><span class="line">cars[<span class="number">1</span>]=<span class="string">"BMW"</span>;</span><br><span class="line">cars[<span class="number">2</span>]=<span class="string">"Volvo"</span>;</span><br></pre></td></tr></table></figure><p>或者 (condensed array):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cars=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"Audi"</span>,<span class="string">"BMW"</span>,<span class="string">"Volvo"</span>);</span><br></pre></td></tr></table></figure><p>或者 (literal array):</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cars=[<span class="string">"Audi"</span>,<span class="string">"BMW"</span>,<span class="string">"Volvo"</span>];</span><br></pre></td></tr></table></figure><h6 id="6-Undefined-和-Null"><a href="#6-Undefined-和-Null" class="headerlink" title="6. Undefined 和 Null"></a>6. Undefined 和 Null</h6><p>Undefined 这个值表示变量不含有值。</p><p>可以通过将变量的值设置为 null 来清空变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cars=<span class="literal">null</span>;</span><br><span class="line">person=<span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h6 id="7-JavaScript-对象"><a href="#7-JavaScript-对象" class="headerlink" title="7. JavaScript 对象"></a>7. JavaScript 对象</h6><p>对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var person=&#123;firstname:&quot;Bill&quot;, lastname:&quot;Gates&quot;, id:5566&#125;;</span><br></pre></td></tr></table></figure><p>上面例子中的对象 (person) 有三个属性：firstname、lastname 以及 id。</p><p>空格和折行无关紧要。声明可横跨多行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var person=&#123;</span><br><span class="line">firstname : &quot;Bill&quot;,</span><br><span class="line">lastname  : &quot;Gates&quot;,</span><br><span class="line">id        :  5566</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对象属性有两种寻址方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=person.lastname;</span><br><span class="line">name=person[&quot;lastname&quot;];</span><br></pre></td></tr></table></figure><p><strong>声明变量类型</strong></p><p>当声明新变量时，可以使用关键词 “new” 来声明其类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var carname=new String;</span><br><span class="line">var x=      new Number;</span><br><span class="line">var y=      new Boolean;</span><br><span class="line">var cars=   new Array;</span><br><span class="line">var person= new Object;</span><br></pre></td></tr></table></figure><p>JavaScript 变量均为对象。当声明一个变量时，就创建了一个新的对象。</p><h5 id="7-4-3-运算符"><a href="#7-4-3-运算符" class="headerlink" title="7.4.3   运算符"></a>7.4.3   运算符</h5><p>和Java的差不多</p><h5 id="7-4-4-函数"><a href="#7-4-4-函数" class="headerlink" title="7.4.4 函数"></a>7.4.4 函数</h5><p>函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。</p><p>函数就是包裹在花括号中的代码块，前面使用了关键词 function：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionname</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">这里是要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先学个大概，等需要的时候再搞，JS语言很简单的。</p><h3 id="8-1-Java-web"><a href="#8-1-Java-web" class="headerlink" title="8.1 Java web"></a>8.1 Java web</h3><h5 id="8-1-1-C-S-与-B-S-架构"><a href="#8-1-1-C-S-与-B-S-架构" class="headerlink" title="8.1.1 C/S 与  B/S 架构"></a>8.1.1 C/S 与  B/S 架构</h5><ol><li>C/S (Client/Server)</li></ol><p>C/S 架构是一种典型的两层架构，其全称是Client/Server，即客户端服务器端架构，其客户端包含一个或多个在用户的电脑上运行的程序，而服务器端有两种，一种是数据库服务器端，客户端通过数据库连接访问服务器端的数据；另一种是Socket服务器端，服务器端的程序通过Socket与客户端的程序通信。</p><p><img src="https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=1806214783,2838045271&amp;fm=173&amp;s=0D825D3219485043446D1CD60000C0B3&amp;w=640&amp;h=384&amp;img.JPEG" alt="img"><img src="https://ss2.baidu.com/6ONYsjip0QIZ8tyhnq/it/u=108489581,449711630&amp;fm=173&amp;s=759645329365410B0C5D6CCB0300F032&amp;w=640&amp;h=316&amp;img.JPEG" alt="img"></p><p>C／S是一种分布式系统结构，它基于简单的请求／应答协议，在C／S模式下，服务器只集中管理数据，而计算任务分散在客户机上，客户机和服务器之间通过网络协议来进行通讯。  客户机向服务器发出数据请求，服务器将数据传送给客户机进行计算，这种模式的优点充分利用了客户机的性能，使计算能力大大提高；  另外，由于客户机和服务器之间的通讯是通过网络协议进行的，是一种逻辑的联系，因此物理上在客户机和服务器两端是易于扩充的。  两层C／S结构应用软件的开发工作主要集中在客户端，客户端软件不但要完成用户交互和数据显示，而且还要完成对应用逻辑的处理，即用户界面与应用逻辑位于同一个平台上。</p><p><strong>C/S架构的优点：</strong></p><p>1 C/S架构的界面和操作可以很丰富。（客户端操作界面可以随意排列，满足客户的需要）</p><p>2 安全性能可以很容易保证。（因为只有两层的传输，而不是中间有很多层。</p><p>3 由于只有一层交互，因此响应速度较快。（直接相连，中间没有什么阻隔或岔路，比如QQ，每天那么多人在线，也不觉得慢）</p><p><strong>C/S架构的缺点：</strong></p><p>可以将QQ作为类比：</p><p>1 适用面窄，通常用于局域网中。</p><p>2 用户群固定。由于程序需要安装才可使用，因此不适合面向一些不可知的用户。</p><p>3 维护成本高，发生一次升级，则所有客户端的程序都需要改变。</p><ol><li>B/S架构的全称为Browser/Server，即浏览器/服务器结构。</li></ol><p>Browser指的是Web浏览器，极少数事务逻辑在前端实现，但主要事务逻辑在服务器端实现。</p><p>B/S架构的系统无须特别安装，只有Web浏览器即可。</p><p>其实就是我们前端现在做的一些事情，大部分的逻辑交给后台来实现，我们前端大部分是做一些数据渲染，请求等比较少的逻辑。</p><p><img src="https://images2017.cnblogs.com/blog/1046075/201711/1046075-20171103132119498-131353785.png" alt="img"></p><p>与C/S架构只有两层不同的是，B/S架构有三层，分别为：</p><p>第一层表现层：主要完成用户和后台的交互及最终查询结果的输出功能。</p><p>第二层逻辑层：主要是利用服务器完成客户端的应用逻辑功能。</p><p>第三层数据层：主要是接受客户端请求后独立进行各种运算。</p><p><strong>B/S架构的优点：</strong></p><p>1、客户端无需安装，有Web浏览器即可。<br>2、BS架构可以直接放在广域网上，通过一定的权限控制实现多客户访问的目的，交互性较强。<br>3、BS架构无需升级多个客户端，升级服务器即可。可以随时更新版本，而无需用户重新下载啊什么的。</p><p><strong>B/S架构的缺点：</strong></p><p>1、在跨浏览器上，BS架构不尽如人意。<br>2、表现要达到CS程序的程度需要花费不少精力。<br>3、在速度和安全性上需要花费巨大的设计成本，这是BS架构的最大问题。<br>4、客户端服务器端的交互是请求-响应模式，通常需要刷新页面，这并不是客户乐意看到的。（在Ajax风行后此问题得到了一定程度的缓解）</p><p>BS====&gt;浏览器+服务器   只要有浏览器就可以</p><p>CS——-&gt;客户端+服务器.  必须的在客户端安装程序.</p><p>现在基本上开发的都是BS程序</p><h5 id="8-1-2-Web-资源"><a href="#8-1-2-Web-资源" class="headerlink" title="8.1.2  Web 资源"></a>8.1.2  Web 资源</h5><p>web即表示网页的意思，它用于表示Internet主机上供外界访问的资源（文件、程序）。</p><p> Internet上供外界访问的Web资源分为：</p><p>• 静态web资源（如html 页面）：一般客户端发送请求到web服务器，web服务器从内存取到相应的文件，返回给客户端，客户端解析并渲染显示出来。web页面中供人们浏览的数据始终是不变。</p><p>• 动态web资源：一般客户端请求的动态资源，先将请求交于web容器，web容器连接数据库，数据库处理数据之后，将内容交给web服务器，web服务器返回给客户端解析渲染处理。web页面中供人们浏览的数据是由程序产生的，不同时间点访问web页面看到的内容各不相同。</p><p><strong>静态资源和动态资源的区别</strong></p><p>a.静态资源一般都是设计好的html页面，而动态资源依靠设计好的程序来实现按照需求的动态响应；</p><p>b.静态资源的交互性差，动态资源可以根据需求自由实现；</p><p>c.在服务器的运行状态不同，静态资源不需要与数据库参于程序处理，动态可能需要多个数据库的参与运算。</p><h4 id="8-2-XML"><a href="#8-2-XML" class="headerlink" title="8.2  XML"></a>8.2  XML</h4><p>Extensible Markup Language 可扩展标记语言</p><p>可扩展指的是用户可以按照XML的规则自定义标记。</p><p><strong>什么是 XML?</strong></p><ul><li>XML 指可扩展标记语言（<em>EX</em>tensible <em>M</em>arkup <em>L</em>anguage）</li><li>XML 是一种<em>标记语言</em>，很类似 HTML</li><li>XML 的设计宗旨是<strong><em>传输数据</em></strong>，而非显示数据</li><li>XML 标签没有被预定义。需要<em>自行定义标签</em>。</li><li>XML 被设计为具有<em>自我描述性</em>。</li><li>XML 是 W3C 的推荐标准</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;? xml version="1.0" encoding="UTF-8"? &gt;</span><br><span class="line">&lt;中国&gt;</span><br><span class="line"> &lt;四川&gt;</span><br><span class="line">   &lt;城市&gt;成都&lt;/城市&gt;</span><br><span class="line">   &lt;城市&gt;都江堰&lt;/城市&gt;</span><br><span class="line">&lt;/四川&gt;</span><br><span class="line">&lt;/中国&gt;</span><br></pre></td></tr></table></figure><p>第一行是 XML 声明。它定义 XML 的版本 (1.0) 和所使用的编码</p><p>XML和HTML都是标记文本：</p><ol><li>XML用于传输和存储数据，HTML用于显示数据</li><li>XML严格区分大小写</li><li>格式良好的XML有且只有一个根元素</li><li>XML中的空格不会自动删除，HTML中的空格是自动过滤的</li><li>XML中的标记是需要自行定义，并且可扩展，而HTML中的标记是预定义的</li></ol><h5 id="8-2-1-XML-语法"><a href="#8-2-1-XML-语法" class="headerlink" title="8.2.1 XML 语法"></a>8.2.1 XML 语法</h5><p><strong>所有 XML 元素都须有关闭标签</strong></p><p><strong>XML 标签对大小写敏感</strong></p><p><strong>XML 必须正确地嵌套</strong></p><p><strong>XML 文档必须有根元素</strong><br>XML 文档必须有一个元素是所有其他元素的父元素。该元素称为根元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">subchild</span>&gt;</span>.....<span class="tag">&lt;/<span class="name">subchild</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>XML 的属性值须加引号</strong></p><p><strong>实体引用</strong><br>在 XML 中，一些字符拥有特殊的意义。</p><p>如果你把字符 “&lt;” 放在 XML 元素中，会发生错误，这是因为解析器会把它当作新元素的开始。</p><div class="table-container"><table><thead><tr><th>&lt;</th><th>&lt;</th><th>小于</th></tr></thead><tbody><tr><td>&gt;</td><td>&gt;</td><td>大于</td></tr><tr><td>&amp;</td><td>&amp;</td><td>和号</td></tr><tr><td>&apos;</td><td>‘</td><td>单引号</td></tr><tr><td>&aquot;</td><td>“</td><td>引号</td></tr></tbody></table></div><h5 id="8-2-2-DTD-约束"><a href="#8-2-2-DTD-约束" class="headerlink" title="8.2.2   DTD 约束"></a>8.2.2   DTD 约束</h5><p>在XML文档中，定义了一套规则对文档中的内容进行约束，这套约束被称为XML约束，最常用的约束语言是DTD和Schema.</p><p><a href="http://www.w3school.com.cn/dtd/dtd_intro.asp">http://www.w3school.com.cn/dtd/dtd_intro.asp</a></p><p><strong>文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。</strong></p><p><strong>DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</strong></p><h6 id="1-内部的-DOCTYPE-声明"><a href="#1-内部的-DOCTYPE-声明" class="headerlink" title="1. 内部的 DOCTYPE 声明"></a>1. 内部的 DOCTYPE 声明</h6><p>假如 DTD 被包含在您的 XML 源文件中，它应当通过下面的语法包装在一个 DOCTYPE 声明中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE note [</span></span><br><span class="line"><span class="meta">  &lt;!ELEMENT note (to,from,heading,body)&gt;</span></span><br><span class="line"><span class="meta">  &lt;!ELEMENT to      (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">  &lt;!ELEMENT from    (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">  &lt;!ELEMENT heading (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">  &lt;!ELEMENT body    (#PCDATA)&gt;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>George<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>John<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>Don't forget the meeting!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>!DOCTYPE note</em> (第二行)定义此文档是 <em>note</em> 类型的文档。</p><p><em>!ELEMENT note</em> (第三行)定义 <em>note</em> 元素有四个元素：”to、from、heading,、body”</p><p><em>!ELEMENT to</em> (第四行)定义 <em>to</em> 元素为 “#PCDATA” 类型</p><p><em>!ELEMENT from</em> (第五行)定义 <em>from</em> 元素为 “#PCDATA” 类型</p><p><em>!ELEMENT heading</em> (第六行)定义 <em>heading</em> 元素为 “#PCDATA” 类型</p><p><em>!ELEMENT body</em> (第七行)定义 <em>body</em> 元素为 “#PCDATA” 类型</p><h6 id="2-外部文档声明"><a href="#2-外部文档声明" class="headerlink" title="2. 外部文档声明"></a>2. 外部文档声明</h6><p>假如 DTD 位于 XML 源文件的外部，那么它应通过下面的语法被封装在一个 DOCTYPE 定义中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE 根元素 PUBLIC "DTD名称" "外部DTD文件的URI"&gt;</span></span><br></pre></td></tr></table></figure><p>这个 XML 文档和上面的 XML 文档相同，但是拥有一个外部的 DTD: （<a href="http://www.w3school.com.cn/dtd/note_ex_dtd.xml">在 IE5 中打开</a>，并选择“查看源代码”命令。）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note SYSTEM &quot;note.dtd&quot;&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Don&apos;t forget the meeting!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure><p>这是包含 DTD 的 “note.dtd” 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;</span><br></pre></td></tr></table></figure><p><strong>XML 文档构建模块</strong><br>所有的 XML 文档（以及 HTML 文档）均由以下简单的构建模块构成：</p><ul><li>元素</li><li>属性</li><li>实体</li><li>PCDATA</li><li>CDATA</li></ul><p><strong>PCDATA</strong></p><p>PCDATA 的意思是被解析的字符数据（parsed character data）。</p><p>可把字符数据想象为 XML 元素的开始标签与结束标签之间的文本。</p><p><strong>PCDATA 是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。</strong></p><p>文本中的标签会被当作标记来处理，而实体会被展开。</p><p>不过，被解析的字符数据不应当包含任何 &amp;、&lt; 或者 &gt; 字符；需要使用 &amp;、&lt; 以及 &gt; 实体来分别替换它们。</p><p><strong>CDATA</strong></p><p>CDATA 的意思是字符数据（character data）。</p><p><em>CDATA 是不会被解析器解析的文本。</em>在这些文本中的标签不会被当作标记来对待，其中的实体也不会被展开。</p><p><strong>在一个 DTD 中，元素通过元素声明来进行声明。</strong></p><p><strong>声明一个元素</strong></p><p>在 DTD 中，XML 元素通过元素声明来进行声明。元素声明使用下面的语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT 元素名称 类别&gt;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT 元素名称 (元素内容)&gt;</span><br></pre></td></tr></table></figure><p><strong>空元素</strong></p><p>空元素通过类别关键词EMPTY进行声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT 元素名称 EMPTY&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT br EMPTY&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;br /&gt;</span><br></pre></td></tr></table></figure><p>属性声明使用下列语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ATTLIST 元素名称 属性名称 属性类型 默认值&gt;</span><br></pre></td></tr></table></figure><h3 id="8-3-HTTP"><a href="#8-3-HTTP" class="headerlink" title="8.3 HTTP"></a>8.3 HTTP</h3><h5 id="8-3-1-http-https"><a href="#8-3-1-http-https" class="headerlink" title="8.3.1  http/https"></a>8.3.1  http/https</h5><p>需要单独学习计算机网络</p><blockquote><p>Http与Https的区别：</p></blockquote><ol><li>HTTP 的URL 以<a href="">http://</a> 开头，而HTTPS 的URL 以<a href="">https://</a> 开头</li><li>HTTP 是不安全的，而 HTTPS 是安全的</li><li>HTTP 标准端口是80 ，而 HTTPS 的标准端口是443</li><li>在OSI 网络模型中，HTTP工作于应用层，而HTTPS 的安全传输机制工作在传输层</li><li>HTTP 无法加密，而HTTPS 对传输的数据进行加密</li><li>HTTP无需证书，而HTTPS 需要CA机构wosign的颁发的SSL证书</li></ol><p>HTTP—Hyper Text Transfer Protocol，超文本传输协议，是一种建立在TCP上的无状态连接，整个基本的工作流程是客户端发送一个HTTP请求，说明客户端想要访问的资源和请求的动作，服务端收到请求之后，服务端开始处理请求，并根据请求做出相应的动作访问服务器资源，最后通过发送HTTP响应把结果返回给客户端。其中一个请求的开始到一个响应的结束称为<strong>事务</strong>，当一个事物结束后还会在服务端添加一条日志条目。</p><p><a href="http://blog.51cto.com/13570193/2108347">http://blog.51cto.com/13570193/2108347</a></p><p>   HTTP请求是客户端往服务端发送请求动作，告知服务器自己的要求。</p><p>   HTTP请求由状态行、请求头、请求正文三部分组成：</p><ul><li>状态行：包括请求方式Method、资源路径URL、协议版本Version；</li><li>请求头：包括一些访问的域名、用户代理、Cookie等信息；</li><li><p>请求正文：就是HTTP请求的数据。</p><p>备注：请求方式Method一般有GET、POST、PUT、DELETE，含义分别是获取、修改、上传、删除，其中GET方式仅仅为获取服务器资源，方式较为简单，因此在请求方式为GET的HTTP请求数据中，请求正文部分可以省略，直接将想要获取的资源添加到URL中。下图所示就是GET的请求，没有请求正文。详细的说明在下边。</p></li></ul><p>​        现在大多数协议版本为http/1.1</p><p><img src="http://s1.51cto.com/images/20180426/1524729981906259.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="blob.png"></p><p>​        下图所示为POST请求的格式，有状态行、请求头、请求正文三部分。</p><p><img src="http://s1.51cto.com/images/20180426/1524731501469945.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="blob.png"></p><p><strong>HTTP响应</strong></p><p><strong>1</strong> <strong>响应数据格式</strong></p><p>​        服务器收到了客户端发来的HTTP请求后，根据HTTP请求中的动作要求，服务端做出具体的动作，将结果回应给客户端，称为HTTP响应。</p><p>​        HTTP响应由三部分组成：状态行、响应头、响应正文；</p><ul><li>状态行：包括协议版本Version、状态码Status Code、回应短语；</li><li>响应头：包括搭建服务器的软件，发送响应的时间，回应数据的格式等信息；</li><li>响应正文：就是响应的具体数据。</li></ul><p>​        备注：我们主要关心并且能够在客户端浏览器看得到的是三位数的状态码，不同的状态码代表不同的含义，其中</p><div class="table-container"><table><thead><tr><th>1xx</th><th>表示HTTP请求已经接受，继续处理请求</th></tr></thead><tbody><tr><td>2xx</td><td>表示HTTP请求已经处理完成</td></tr><tr><td>3xx</td><td>表示把请求访问的URL重定向到其他目录</td></tr><tr><td>4xx</td><td>表示客户端出现错误</td></tr><tr><td>5xx</td><td>表示服务端出现错误</td></tr></tbody></table></div><p>具体HTTP响应实例如下图：</p><p><img src="http://s1.51cto.com/images/20180426/1524732130496897.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="blob.png"></p><h3 id="8-4-Tomcat"><a href="#8-4-Tomcat" class="headerlink" title="8.4 Tomcat"></a>8.4 Tomcat</h3><p>一个动态的Web资源(项目)开发完毕后 ，需要发布到Web服务器中才能被外界访问。</p><p>Tomcat不仅具有服务器基本功能，还提供了数据库连接池等许多通用组件功能。</p><p>是Sun公司推荐的运行Servlet和JSP的容器（引擎）。</p><p>我电脑中安装了Tomcat9的版本</p><p>下载压缩包：<a href="http://tomcat.apache.org/，解压到指定目录即可完成Tomcat安装。">http://tomcat.apache.org/，解压到指定目录即可完成Tomcat安装。</a></p><p>打开安装目录，双击startup.bat文件（bin目录下）便会启动Tomcat服务器，</p><p>在浏览器地址栏中输入<a href="http://localhost:8080或http://127.0.0.1:8080即可访问Tomcat服务器。">http://localhost:8080或http://127.0.0.1:8080即可访问Tomcat服务器。</a></p><p>在Tomcat中运行的Web资源都是以Web应用形式呈现的。Web应用（Web应用程序或Web工程）指多个Web资源按照一定的结构组成的集合。</p><p>一个Web应用由多个Web资源或其他文件组成，其中包括html文件，css文件，js文件，动态Web页面、Java程序、支持jar包、配置文件等。</p><p>Tomcat的Web应用的目录结构：</p><p>Web应用目录：Web应用的根目录，可以存放所有的Web资源。</p><p>​        WEB-INF：根目录下的子目录，所有的配置文件都存放在这个目录中</p><p>​              classe目录：存放各种class文件</p><p>​               lib目录：存放Web应用所需要的各种jar文件。</p><p>WEB-INF目录下的web.xml文件可以配置默认的访问页面。</p><p>Tomcat服务器安装conf目录下的web.xml文件的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p><welcom-file-list> 元素用于配置默认页面列表，它包括多个<welcome-file>子元素， 每个<welcome-file> 子元素都可以指定一个页面文件。当用户访问Web应用时，如果没有指定具体要访问的页面资源，Tomcat则会按照<welcome-file-list> 元素指定默认页面的顺序，依次查找这些默认页面，如果找到，则将其返回给用户，并停止查找后面的默认页面，如果没有找到，则返回访问资源不存在的错误提示页面。</p><p>在实际项目中，如果要配置默认页面，则只需在Web应用的web.xml文件内按照上面的配置方式添加默认的页面信息。例如，将应用中的welcome.html页面配置为默认页面，只需在web.xml中进行如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">welocme-file</span>&gt;</span>welcome.html<span class="tag">&lt;/<span class="name">welocme-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置完成后，项目的默认访问页面就是welcome.html。</p><p><strong>在Eclipse中配置Tomcat</strong></p><p>哈哈哈哈，百度即可，很easy的。</p><p>Windows—Preferences—Server—Runtime Environments—Add,选择Aphache Tomcat 版本。。。。</p><h3 id="9-1-Servlet"><a href="#9-1-Servlet" class="headerlink" title="9.1  Servlet"></a>9.1  Servlet</h3><p>Servlet是使用Java语言编写的运行在服务器端的程序，通常来说，Servlet是指所有实现了Servelt接口的类。</p><p>Servlet主要用于处理客户端传来的HTTTP请求，并返回一个响应，它能够处理的请求有doGet()和doPost()等。</p><p>Servlet由Servlet容器提供，Servlet容器是指提供了Servlet功能的服务器（如Tomcat）。Servlet容器会将Servlet动态加载到服务器上，然后通过HTTP请求和HTTP响应与客户端进行交互。</p></style></head></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;01-Java入门&quot;&gt;&lt;a href=&quot;#01-Java入门&quot; class=&quot;headerlink&quot; title=&quot;01 Java入门&quot;&gt;&lt;/a&gt;01 Java入门&lt;/h2&gt;&lt;h3 id=&quot;1-1为什么学Java&quot;&gt;&lt;a href=&quot;#1-1为什么学Java&quot; c
      
    
    </summary>
    
      <category term="编程语言" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu + Django2.1.2 +Python3</title>
    <link href="http://yoursite.com/post/eeec02ce.html"/>
    <id>http://yoursite.com/post/eeec02ce.html</id>
    <published>2019-08-07T07:09:55.000Z</published>
    <updated>2019-09-11T08:14:43.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu-Django2-1-2-Python3"><a href="#Ubuntu-Django2-1-2-Python3" class="headerlink" title="Ubuntu + Django2.1.2 +Python3"></a>Ubuntu + Django2.1.2 +Python3</h1><h2 id="1、简单博客系统"><a href="#1、简单博客系统" class="headerlink" title="1、简单博客系统"></a>1、简单博客系统</h2><h3 id="1-1-Django-入门"><a href="#1-1-Django-入门" class="headerlink" title="1.1 Django 入门"></a>1.1 Django 入门</h3><h4 id="1-1-1-Django"><a href="#1-1-1-Django" class="headerlink" title="1.1.1 Django"></a>1.1.1 Django</h4><p>django -网站的开发框架</p><h4 id="1-1-2-安装Django-Python3"><a href="#1-1-2-安装Django-Python3" class="headerlink" title="1.1.2 安装Django(Python3)"></a>1.1.2 安装Django(Python3)</h4><p>打开终端 <code>$ pip3 install Django == 2.1.2</code></p><h4 id="1-1-3-创建项目（project"><a href="#1-1-3-创建项目（project" class="headerlink" title="1.1.3 创建项目（project)"></a>1.1.3 创建项目（project)</h4><p>“项目”，可以理解为一个网站</p><p>首先，创建一个目录mysite（文件夹），将项目创建在这个mysite里</p><p>打开终端</p><p>$ sudo install python-django-common</p><p>$ sudo apt-get install python - django</p><p>然后在这个mysite目录下（空白），右键，选择Open in Terminal</p><p><code>~/mysite$ django-admin startproject mysite</code> —-创建一个django项目，多了一个mysite子目录，mysite是这个项目名称，这时已经有了一个网站的基本框架了。</p><p>创建项目时用到的 django-admin.py，它是Django 的任务管理命令行工具</p><p>在有manage.py这个文件的目录下打开终端<code>$ python manage.py runserver</code></p><p>若一切正常，可以看到提示信息：</p><p>Starting development server at <a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a> ——启动服务 Quit the server with CONTROL-C. ——control+c 结束当前服务</p><p>打开浏览器，输入<a href="http://12.0.xn--1:8000http-xl8ts00z//localhost:8000" target="_blank" rel="noopener">http://12.0.1:8000或者http://localhost:8000</a> ,会看到Django网页</p><h4 id="1-1-4-创建应用-application"><a href="#1-1-4-创建应用-application" class="headerlink" title="1.1.4 创建应用(application)"></a>1.1.4 创建应用(application)</h4><p>网站的具体功能</p><p>进入到刚才创建的项目目录中，即manage.py文件所在的目录</p><p><code>~/mysite$ python manage.py startapp blog</code> ——在项目mysite中新建了一个blog应用。</p><p>对项目结构各个部分简介</p><h5 id="1-manage-py"><a href="#1-manage-py" class="headerlink" title="1. manage.py"></a>1. manage.py</h5><p>在创建一个Django项目后，manage.py 被自动生成在项目的根目录中，它是对django-admin.py的简单封装，同样能够实现命令行操作，不要修改和删除它。</p><h5 id="2-mysite"><a href="#2-mysite" class="headerlink" title="2. mysite"></a>2. mysite</h5><p>所建项目的管理功能目录，它里面的文件常用于整个项目进行参数配置</p><p><code>settings.py</code> : 包含项目的初始化设置，可以针对整个项目进行有关参数配置，比如配置数据库、添加应用等。</p><p><code>urls.py</code>: URL配置表文件，主要将URL映射到应用程序上。当用户请求某个URL时，Django项目会根据这个文件中的映射关系指向某个目标对象（某个应用的urls.py文件或某个具体的视图函数）。这个文件也被称为URLconf.</p><p><code>wsgi.py</code> : （Web Server Gateway Interface),是Python所选择的服务器和应用标准。</p><p><code>__pychache__</code>: 执行python manage.py runserver命令后出现，时一个编译后的文件夹，里面文件都是以.pyc结尾的文件。</p><h5 id="3-blog"><a href="#3-blog" class="headerlink" title="3. blog"></a>3. blog</h5><p>项目中创建的应用之一，每创建一个新的应用，Django就会在项目根目录中( ./)中创建一个子目录，目录中会有一些默认的文件。</p><p><code>admin.py</code> : 可以自定义Django管理工具。</p><p><code>apps.py</code> : 包含对应用的配置</p><p><code>migrations</code>: 这是一个目录，用于存储应用的数据库表结构的指令，通过这些指令可以修改和创建数据库，从而在models.py模型类和数据库表之间的迁移。</p><p><code>models.py</code> : 应用的数据模型，每个Django应用都应当有一个models.py文件，可以为空。</p><p><code>tests.py</code>：在这个文件中编写测试文档来测试所建立的应用。</p><p><code>views.py</code>: 用户保存响应各种请求的函数和类。 如果编写的是函数，则称之为基于函数的视图；如果编写的是类，则称之为基于类的视图。保存函数或者类的视图文件。</p><h5 id="4-db-sqlite3"><a href="#4-db-sqlite3" class="headerlink" title="4. db.sqlite3"></a>4. db.sqlite3</h5><p>默认的数据库SQLite</p><h4 id="1-1-5-网站的配置"><a href="#1-1-5-网站的配置" class="headerlink" title="1.1.5 网站的配置"></a>1.1.5 网站的配置</h4><p>将应用注册到项目中</p><p>在Django项目中，主管信息注册（对本项目进行各种信息声明）的文件时./mysite/settings.py。</p><p><strong>DEBUG</strong>： True or False, 开发过程中，设置成True,在测试功能时，Django能够显示详细的报错信息——“开发模式”。如果将项目部署到真正要对外发布的服务器上——“生产环境”，必须将其值修改为False,从而避免暴露项目的内部信息。</p><p><strong>ALLOWED_HOSTS</strong>: 在DEBUG设置为True时，其值可以为空。当部署到生产环境中时，要把主域名填写到这里，才能通过域名访问到本网站。</p><p><strong>INSTALLED_APPS</strong>： 所有的应用写到这里才能生效。</p><p>INSTALLED_APPS = [  ‘django.contrib.admin’, # 针对项目后台管理的应用。  ‘django.contrib.auth’,  ‘django.contrib.contenttypes’,  ‘django.contrib.sessions’,  ‘django.contrib.messages’,<br>​ ‘django.contrib.staticfiles’, ​ ‘blog’, #新增加的，所建立项目的名称，其他项Django默认具有的应用。 ]</p><p><strong>DATABASES</strong>: 配置数据库，默认配置SQLite,小巧灵活，Python标准库所支持。</p><p><strong>LANGUAGE_CODE</strong>:设置项目的语言，汉语，设置为 LANGUAGE_CODE = ‘zh-hans’</p><p>TIME_ZONE: 设置时区，东八区， TIME_ZONE = ‘Asia/Shanghai’</p><h4 id="1-1-6-知识点"><a href="#1-1-6-知识点" class="headerlink" title="1.1.6 知识点"></a>1.1.6 知识点</h4><h5 id="1-开发模式"><a href="#1-开发模式" class="headerlink" title="1. 开发模式"></a>1. 开发模式</h5><p>是相对于“生产模式”而言的，即系统尚处于开发阶段，还没正式对外部客户提供服务，在Django开发模式中，不需要配置Apache或者Nginx等服务器，也能够运行网站，这是因为Django本身就提供了简单的Web服务器功能，但是这仅限于开发过程，当网站被正式部署后，即转换为“生产模式”时，就需要对部分配置进行修改。</p><p>在开发模式中，Django会自动检测到修改代码并重新加载，不需要每次修改代码后重新启动Web服务器。只有在新增加文件后，才需要重启Django服务。</p><p>运行Django服务的指令是： <code>python manage.py runserver</code></p><h5 id="2-项目和应用"><a href="#2-项目和应用" class="headerlink" title="2. 项目和应用"></a>2. 项目和应用</h5><p>Django安装好之后，就有了django-admin这个默认命令，可以用<code>django-admin starproject projectname</code>命令创建一个Django项目。</p><p>项目是由若干个“应用”(app)组成的，实现具体的功能。创建应用可以用 <code>python manage.py startapp appname</code>命令。也可以使用 <code>django-admin startapp appname</code>命令。</p><p>创建项目和应用后，会生成一些默认的文件，要么是一些默认的配置，要么是一些空文件为了占据位置。</p><p>每个应用都要在项目的settings.py文件的INSTALLED_APPS中进行声明，告诉Django这个应用是本项目的一部分。</p><h3 id="1-2-编写博客的数据模型类"><a href="#1-2-编写博客的数据模型类" class="headerlink" title="1.2 编写博客的数据模型类"></a>1.2 编写博客的数据模型类</h3><p>设计数据库和表结构是做网站的基础。在Django中，不需要通过SQL语句直接跟数据库打交道，而是完全用    python的方式创建数据库，之后交给Django完成数据库的操作。</p><h4 id="1-2-1-数据模型类"><a href="#1-2-1-数据模型类" class="headerlink" title="1.2.1 数据模型类"></a>1.2.1 数据模型类</h4><p>利用Django开发网站系统，一般情况下，要先编写数据模型，就是在./blog/models.py中写一个类，这个类与数据库中的数据表具有对应关系。</p><p>在./blog/models.py中编写博客的数据模型类 Blog, 它本质上是一个继承了django.db.models.Models的类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line">from django.utils import timezone</span><br><span class="line">from django.contrib.auth.models import User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class BlogArticles(models.Model):</span><br><span class="line">    title = models.CharField(max_length=300)  #1</span><br><span class="line">    author = models.ForeignKey(User,</span><br><span class="line">related_name=&quot;blog_posts&quot;,on_delete=models.CASCADE,) #2</span><br><span class="line">    body = models.TextField()</span><br><span class="line">    publish = models.DateTimeField(default=timezone.now)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    class Meta: #3</span><br><span class="line">        ordering = (&quot;-publish&quot;,)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    def __str__(self):</span><br><span class="line">        return self.title</span><br></pre></td></tr></table></figure><p>这个BlogArticles类中定义了一些属性，每个属性对应着将来数据库表中的一个字段。，以后将属性称之为字段。</p><p>#1 字段title的属性为CharFiled()类型，参数说字 段的最大数量.</p><p>#2 通过字段author规定了博客和用户之间的关系——一个用户对应多篇文章。ForeignKey() 就反映了这种“一对多”关系。类User就是BlogArticles的对应对象，related_name=”blog_posts”的作用是允许通过类User反向查询到BlogArticles.</p><p>#3 通过 ordering = (“-publish”,)，规定了BlogArticles实例对象的显示顺序，即按照publish字段值的倒序显示。</p><p>BlogArticles 类的数据模型编写好了，将来数据库表的基本结构就是按照上述各字段及其属性而定的。</p><p><strong>接下来根据数据模型建立数据库表：</strong></p><p>在/mysite/manage.py 位置执行 <code>~/mysite$ python manage.py makemigrations</code>,会有Migrations for blog : …的提示信息，意思就是在blog/migrations目录中创建了一个BlogArticles模型，打开这个001_initial.py文件看一下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># Generated by Django 2.1.2 on 2018-10-13 12:21</span><br><span class="line"></span><br><span class="line">from django.conf import settings</span><br><span class="line">from django.db import migrations, models</span><br><span class="line">import django.db.models.deletion</span><br><span class="line">import django.utils.timezone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Migration(migrations.Migration):</span><br><span class="line"></span><br><span class="line">    initial = True</span><br><span class="line"></span><br><span class="line">    dependencies = [</span><br><span class="line">        migrations.swappable_dependency(settings.AUTH_USER_MODEL),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    operations = [</span><br><span class="line">        migrations.CreateModel(</span><br><span class="line">            name=&apos;BlogArticles&apos;,</span><br><span class="line">            fields=[</span><br><span class="line">                (&apos;id&apos;, models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name=&apos;ID&apos;)),</span><br><span class="line">                (&apos;title&apos;, models.CharField(max_length=300)),</span><br><span class="line">                (&apos;body&apos;, models.TextField()),</span><br><span class="line">                (&apos;publish&apos;, models.DateTimeField(default=django.utils.timezone.now)),</span><br><span class="line">                (&apos;author&apos;, models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name=&apos;blog_posts&apos;, to=settings.AUTH_USER_MODEL)),</span><br><span class="line">            ],</span><br><span class="line">            options=&#123;</span><br><span class="line">                &apos;ordering&apos;: (&apos;-publish&apos;,),</span><br><span class="line">            &#125;,</span><br><span class="line">        ),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><p>这个文件是执行<code>python manage.py makemigrations</code>命令后，django自动生成的。这个文件的功能是创建一个名称为BlogArticles的数据库表。这个表的名称由两部分组成，第一部分是blog本应用的名称，第二部分是blogaricles(都小写)是在models.py中创建的数据模型类的名称，中间用单下划线连接。</p><p>创建了一个能够建立数据库表的文件，就可以真正创建数据库了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/mysite$ python manage.py migrate</span><br></pre></td></tr></table></figure><p>本项目使用SQLite数据库，并且在settings.py中规定了数据库文件存放在项目根目录中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;,</span><br><span class="line">        &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于db.sqlite3这个文件，可以在FireFox浏览器中安装SQLite Manager 插件来查看。 由于我的火狐浏览器插件不兼容，两种办法：1、直接在Ubuntu Software 搜索 sqlite ,安装DB Browser for SQLite； 2是通过打开终端输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install sqlite3</span><br><span class="line">sqlite -version</span><br><span class="line">sudo apt-get install sqlitebrowser</span><br></pre></td></tr></table></figure><p>综上，博客的数据库就建立好了。</p><h4 id="1-2-2-发布博客文章"><a href="#1-2-2-发布博客文章" class="headerlink" title="1.2.2 发布博客文章"></a>1.2.2 发布博客文章</h4><p>先用最简单的方式实现博客文章的发布,使用Django默认的管理功能就可以发布文章。要使用此功能，必须先创建超级管理员。要牢记所使用的用户名和密码。密码设置要有一定的复杂度，我的是英文字母加数字，至少8位。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysite$ python manage.py createsuperuser</span><br><span class="line">Username(leave blank to use &apos;qiwsir&apos;): kun</span><br><span class="line">Email address: hk19930914@163.com</span><br><span class="line">Password:*********</span><br><span class="line">Password(again):*********</span><br><span class="line">Superuser created successfull</span><br></pre></td></tr></table></figure><p>运行服务器 <code>mysite$ python manage.py runserver</code></p><p>浏览器地址栏输入 <a href="http://127.0.0.1:8000/admin/%E6%88%96%E8%80%85http://localhost:8000/admin/" target="_blank" rel="noopener">http://127.0.0.1:8000/admin/或者http://localhost:8000/admin/</a>, 然后输入刚才创建超级管理员的用户名和密码，就可以进入Django administration页面。 用户(Users)和组(Groups)是Django在用户管理应用中默认的，单击User会看到当前项目仅有的一个用户kun，当然也可以增加用户。</p><p>打开./blog/admin.py文件，用编辑工具打开，输入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from .models import BlogArticles  #1  将BlogArticles类引入当前环境</span><br><span class="line"></span><br><span class="line">admin.site.register(BlogArticles) #2  将该类注册到admin中</span><br></pre></td></tr></table></figure><p>刷新浏览器页面，看到新注册的BLOG。</p><p>单击Blog articless 右侧的Add按钮就可以添加博客文章。内容填写之后，点击保存，该博客文章被保存到数据库中，可以使用DB Browser for SQLite查看数据库。</p><p>在./blog/models.py中使用了django.utils.timezone,所以要安装一个pytz模块，用它来提供时区。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip3 install pytz</span><br></pre></td></tr></table></figure><p>安装完毕，重启服务。</p><p>在文章列表页，可以看到所有已经发布的文章标题。由于显示的列表信息太单一，为了使列表页的信息更加丰富，继续用编辑./blog/admin.py 文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from django.contrib import admin</span><br><span class="line">from .models import BlogArticles</span><br><span class="line"></span><br><span class="line">class BlogArticlesAdmin(admin.ModelAdmin):</span><br><span class="line">       list_display = (&quot;title&quot;,  &quot;author&quot;,  &quot;publish&quot;)</span><br><span class="line">       list_filter = (&quot;publish&quot;,  &quot;author&quot;)</span><br><span class="line">       search_fields = (&apos;title&apos;,  &quot;body&quot;)</span><br><span class="line">       raw_id_fields = (&quot;author&quot;,)</span><br><span class="line">       date_hierarchy = &quot;publish&quot;</span><br><span class="line">       ordering = [&apos;publish&apos;,  &apos;author&apos;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(BlogArticles, BlogArticlesAdmin)</span><br></pre></td></tr></table></figure><p>保存，刷新浏览器页面，即可看到效果。</p><h4 id="1-2-3-知识点"><a href="#1-2-3-知识点" class="headerlink" title="1.2.3 知识点"></a>1.2.3 知识点</h4><h5 id="1-HTTP"><a href="#1-HTTP" class="headerlink" title="1. HTTP"></a>1. HTTP</h5><p>Hyper Text Transfer Protocol( 超文本传输协议 )，是客户端( 浏览器、网页爬虫程序 )和服务器端( 网站 )请求和应答的标准(TCP)，封装了Web服务的整个过程，默认端口80。</p><ul><li>请求 (request): 客户端到服务器端</li><li>响应 (response): 服务器端到客户端。状态信息（HTTP/1.1 200) 和内容信息。</li></ul><p>HTTP/1.1 协议共定义了8种请求方式：OPTIONS、HEAD、GET、POST、 PUT、DELETE、TRACE 和 CONNECT.</p><p>本项目中主要使用GET和POST请求</p><ul><li>GET：向指定服务器发出请求，主要用于读取信息并显示</li><li>POST： 向指定服务器提交数据，请求服务器进行处理（例如提交表单或者上传文件）</li></ul><p>HTTPS — Hyper Text Transfer Protocol Secure,默认端口443，安全性更高，HTTP以明文方式封装信息，HTTPS以加密方式传送信息。</p><h5 id="2-URL"><a href="#2-URL" class="headerlink" title="2. URL"></a>2. URL</h5><p>Uniform/Universal Resource Locator 统一资源定位符，俗称网址。</p><p>URL标准格式：协议类型://服务器地址(必要时需加上端口号)/路径/文件名</p><ul><li>协议类型：HTTP/HTTPSu</li><li>服务器地址： 通常是域名，比如baidu.com,也可以是IP地址，如果默认是80端口，可以不写，否则需要写上端口。</li><li>路径：以”/“区别目录，对于GET请求方式，可以用“？”发起参数，每个参数以“&amp;”隔开，再以“=”分开参数名称和值。</li><li>文件名：有必要可写</li></ul><h5 id="3-模型：-ORM"><a href="#3-模型：-ORM" class="headerlink" title="3. 模型： ORM"></a>3. 模型： ORM</h5><p>动态网站，大多数是通过数据库实现对数据的保存和读取，所以数据库是网站最基本最底层的组成部分。</p><p>Django不需要开发者使用SQL语句实现程序和数据库的交互，而是通过ORM，即Object-Relational Mapping（对象关系映射）。</p><p>ORM的作用是在关系型数据库和业务实体对象之间进行映射，，只需简单地操作对象的属性和方法。</p><p>Django的数据模型层大量使用ORM,表现方式就是编写数据模型类，这些类可以写到任何文件中，通常写在每个应用的models.py文件中，每个数据模型类都是django.db.models.Model的子类。应用的名称（小写字母）和数据模型类的名称（小写字母）共同组成一个数据库表的名称（”appname”_”modelname”,例如blog_blogarticles).</p><p>当数据模型类写好之后，通过执行Django的数据迁移操作（<code>python manage.py makemigrations</code>, <code>python manage.py migrate</code>)就能够创建相应的数据库表，用来保存网站项目的数据。以后要更改数据库表的结构，只需要更改数据模型类，迁移数据就能实现数据库结构的调整。</p><p>若想改为MySQL数据库,只需要在settings.py文件中做好新数据库的配置，然后进行迁移数据的操作即可完成数据库的迁移，不需要对ORM进行任何修改。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Ubuntu-Django2-1-2-Python3&quot;&gt;&lt;a href=&quot;#Ubuntu-Django2-1-2-Python3&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu + Django2.1.2 +Python3&quot;&gt;&lt;/a&gt;Ubunt
      
    
    </summary>
    
      <category term="Python3 Django" scheme="http://yoursite.com/categories/Python3-Django/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>博客搭建相册</title>
    <link href="http://yoursite.com/post/eb6ee242.html"/>
    <id>http://yoursite.com/post/eb6ee242.html</id>
    <published>2019-03-08T03:58:54.000Z</published>
    <updated>2019-09-11T08:24:11.614Z</updated>
    
    <content type="html"><![CDATA[<p>1.原本Next教程：<a href="https://www.jianshu.com/p/8b5ace009307" target="_blank" rel="noopener">https://www.jianshu.com/p/8b5ace009307</a><br>2.本网站：<br>创建gallery  hexo new page gallery<br>hexo source gallery index.md<br>    <div class="gallery-item" style="background-image: url('图片地址')" data-title="图片名" data-url="图片地址">      <div class="gallery-item__title">        图片名      </div>    </div>  为一个图片</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.原本Next教程：&lt;a href=&quot;https://www.jianshu.com/p/8b5ace009307&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.jianshu.com/p/8b5ace009307&lt;/a&gt;&lt;br&gt;
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 自定义页面如何避免被渲染</title>
    <link href="http://yoursite.com/post/4d280a8b.html"/>
    <id>http://yoursite.com/post/4d280a8b.html</id>
    <published>2019-03-07T14:42:04.000Z</published>
    <updated>2020-02-26T15:16:44.022Z</updated>
    
    <content type="html"><![CDATA[<h4 id="自定义网页与渲染"><a href="#自定义网页与渲染" class="headerlink" title="自定义网页与渲染"></a>自定义网页与渲染</h4><p>网页可以是自己编写的，也可以是别人现成的源码。网页编写完成后，在 Hexo\source 目录下创建一个文件夹，文件夹名称任意，将 Html 文件放置于此文件夹，并重命名为 index.html 。</p><p>Hexo 博客大部分都呈现出一种高度的统一化与规范化，所见文章都是经由渲染的静态网页，而静态网页的样式都直接由 Hexo 的主题控制。之前在加入自定义机器人页面时，为了避免被渲染，是将Hexo\source 的件夹中的 index.md 文件删除，然后在Hexo\public文件夹下新建robot文件夹，然后将index.html放入，坏处就是每次hexo clean后，数据总会被清理，得需要重新复制，十分麻烦！</p><p>好在Hexo 提供了跳过渲染功能。</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>在html文件中添加跳过渲染指令：</p><p>用编辑器打开 Hexo\source 创建的文件夹中的 index.html 文件，在开头添加如下代码即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>添加该指令后，执行 hexo g 命令时便会跳过该 index.html 文件，使得 index.html 不受当前 hexo 主题影响，完全是一个独立的网页。</p><p>如果网页引用了 css 或 js ，这些 css 和 js 必须使用外链。</p><p>如果引用图片，可以在网页目录下建立 img 文件夹，可以直接引用图片，不必再去创建外链。</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>使用编辑器打开 Hexo 目录下的_config.yml 文件，找到 skip_render</p><p>skip_render 一般有以下四种常用参数：</p><ol><li><p>跳过source目录下的 test.html: skip_render: test.html</p></li><li><p>跳过source目录下 test 文件夹内所有文件：skip_render: test/*</p></li><li><p>跳过source目录下 test 文件夹内所有文件包括子文件夹以及子文件夹内的文件：skip_render: test/**</p></li><li><p>跳过多个路径：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">skip_render:</span><br><span class="line"> - test.html</span><br><span class="line"> - test/*</span><br></pre></td></tr></table></figure></li></ol><p>对格式要求严格，注意填写参数时的格式，添加完成后便不会渲染指定文件/文件夹。</p><p>如果网页引用了 css 或 js ，并将整个网页目录设置为跳过渲染，则不必再为 css 和 js 创建外链，可以直接引用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;自定义网页与渲染&quot;&gt;&lt;a href=&quot;#自定义网页与渲染&quot; class=&quot;headerlink&quot; title=&quot;自定义网页与渲染&quot;&gt;&lt;/a&gt;自定义网页与渲染&lt;/h4&gt;&lt;p&gt;网页可以是自己编写的，也可以是别人现成的源码。网页编写完成后，在 Hexo\source 目
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>博客优化(3)</title>
    <link href="http://yoursite.com/post/3c51e5b6.html"/>
    <id>http://yoursite.com/post/3c51e5b6.html</id>
    <published>2019-03-07T07:09:55.000Z</published>
    <updated>2019-09-11T08:29:16.076Z</updated>
    
    <content type="html"><![CDATA[<h4 id="设置头像边框为圆形框及实现鼠标放置头像上旋转的特效"><a href="#设置头像边框为圆形框及实现鼠标放置头像上旋转的特效" class="headerlink" title="设置头像边框为圆形框及实现鼠标放置头像上旋转的特效"></a>设置头像边框为圆形框及实现鼠标放置头像上旋转的特效</h4><p>新版的Next7，图片可以链接网址或者把图片放入 <code>themes/next/source/images</code> 下,修改 <code>avatar</code>。无需修改<code>hemes/next/source/css/_common/components/sidebar/sidebar-author.syl</code>文件，只需要将themes/next/_config.yml修改如下即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line">avatar:</span><br><span class="line">  # In theme directory (source/images): /images/avatar.gif</span><br><span class="line">  # In site directory (source/uploads): /uploads/avatar.gif</span><br><span class="line">  # You can also use other linking images.</span><br><span class="line">  url: /images/avatar.gif</span><br><span class="line">  # If true, the avatar would be dispalyed in circle.</span><br><span class="line">  rounded: true</span><br><span class="line">  # The value of opacity should be choose from 0 to 1 to set the opacity of the avatar.</span><br><span class="line">  opacity: 1</span><br><span class="line">  # If true, the avatar would be rotated with the cursor.</span><br><span class="line">  rotated: true</span><br></pre></td></tr></table></figure><h4 id="设置网站的图标Favicon"><a href="#设置网站的图标Favicon" class="headerlink" title="设置网站的图标Favicon"></a>设置网站的图标Favicon</h4><p>在图标网站找一张你喜欢的图标（大：32x32 小：16x16），图标网站：<a href="http://www.easyicon.net/" target="_blank" rel="noopener">easyicon</a>或者<a href="http://www.iconfont.cn/" target="_blank" rel="noopener">阿里巴巴矢量图标库</a>。将下载下来的小图和中图放在<code>Blog/themes/next/source/images</code>，将默认的两张图片替换掉。themes/next/_config.yml,若自定义了图片名字，需要做修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16-next.png  //16X16小图</span><br><span class="line">  medium: /images/favicon-32x32-next.png  //32X32大图</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;设置头像边框为圆形框及实现鼠标放置头像上旋转的特效&quot;&gt;&lt;a href=&quot;#设置头像边框为圆形框及实现鼠标放置头像上旋转的特效&quot; class=&quot;headerlink&quot; title=&quot;设置头像边框为圆形框及实现鼠标放置头像上旋转的特效&quot;&gt;&lt;/a&gt;设置头像边框为圆形框及
      
    
    </summary>
    
    
      <category term="NexT" scheme="http://yoursite.com/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>博客优化(2)</title>
    <link href="http://yoursite.com/post/254ad4f7.html"/>
    <id>http://yoursite.com/post/254ad4f7.html</id>
    <published>2019-03-07T02:50:43.000Z</published>
    <updated>2019-09-11T08:29:16.075Z</updated>
    
    <content type="html"><![CDATA[<h4 id="首页文章间距过款"><a href="#首页文章间距过款" class="headerlink" title="首页文章间距过款"></a>首页文章间距过款</h4><p>打开<code>\themes\next\source\css\_schemes\Mist\_posts-expanded.styl</code> ，在最后一行添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">posts-expand .post &#123;</span><br><span class="line">  margin-top: 30px;</span><br><span class="line">  margin-bottom: 30px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="显示文章字数统计-阅读时长-总字数"><a href="#显示文章字数统计-阅读时长-总字数" class="headerlink" title="显示文章字数统计,阅读时长,总字数"></a>显示文章字数统计,阅读时长,总字数</h4><p>cd 到站点根目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure><p>打开站点(hexo)的_config.yml，添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true</span><br><span class="line">  time: true</span><br><span class="line">  total_symbols: true</span><br><span class="line">  total_time: false</span><br></pre></td></tr></table></figure><p>打开 <code>themes/next/_config.yml</code> ，搜索关键字 <code>post_wordcount</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true</span><br><span class="line">  item_text_post: true</span><br><span class="line">  item_text_total: true</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure><h4 id="实现点击出现桃心效果"><a href="#实现点击出现桃心效果" class="headerlink" title="实现点击出现桃心效果"></a>实现点击出现桃心效果</h4><p>cd 进 路径 <code>/themes/next/source/js/src</code> </p><p>新建(touch love.js)并将以下代码复制进去并保存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure><p>然后打开 <code>\themes\next\layout\_layout.swig</code> 文件,在末尾（在前面引用会出现找不到的bug）添加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="内容区域的宽度"><a href="#内容区域的宽度" class="headerlink" title="内容区域的宽度"></a>内容区域的宽度</h4><p>就是文章的框框</p><p>Next主题在电脑上阅读文章时内容两边留的空白较多，这样在浏览代码块时经常要滚动滚动条才能阅读完整，体验不是很好，下面提供修改内容区域的宽度的方法。<br> NexT 对于内容的宽度的设定如下(移动设备下，宽度自适应):</p><h5 id="在Mist和Muse风格"><a href="#在Mist和Muse风格" class="headerlink" title="在Mist和Muse风格"></a>在Mist和Muse风格</h5><p>编辑主题的 <code>source/css/_variables/custom.styl</code> 样式文件，新增变量，即可修改宽度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 700px，当屏幕宽度 &lt; 1600px</span><br><span class="line">$content-desktop = 700px</span><br><span class="line"></span><br><span class="line">// 当视窗超过 1600px 后的宽度</span><br><span class="line">$content-desktop-large = 900px</span><br></pre></td></tr></table></figure><h5 id="当使用Pisces风格："><a href="#当使用Pisces风格：" class="headerlink" title="当使用Pisces风格："></a>当使用Pisces风格：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header&#123; width: 90%; &#125;</span><br><span class="line">.container .main-inner &#123; width: 90%; &#125;</span><br><span class="line">.content-wrap &#123; width: calc(100% - 260px); &#125;</span><br></pre></td></tr></table></figure><h4 id="博文的置顶和排序"><a href="#博文的置顶和排序" class="headerlink" title="博文的置顶和排序"></a>博文的置顶和排序</h4><p>打开Hexo站点下node_modules/hexo-generator-index/lib/generator.js文件，代码全部替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">var pagination = require(&apos;hexo-pagination&apos;);</span><br><span class="line">module.exports = function(locals)&#123;</span><br><span class="line">  var config = this.config;</span><br><span class="line">  var posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">        if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</span><br><span class="line">            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</span><br><span class="line">            else return b.top - a.top; // 否则按照top值降序排</span><br><span class="line">        &#125;</span><br><span class="line">        else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else return b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line">    &#125;);</span><br><span class="line">  var paginationDir = config.pagination_dir || &apos;page&apos;;</span><br><span class="line">  return pagination(&apos;&apos;, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [&apos;index&apos;, &apos;archive&apos;],</span><br><span class="line">    format: paginationDir + &apos;/%d/&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>打开文章添加top字段,设置数值，数值越大文章越靠前：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: *****</span><br><span class="line">date: *****</span><br><span class="line">tags: ****</span><br><span class="line">top: 100</span><br></pre></td></tr></table></figure><h4 id="修改文章底部的那个带-号的标签"><a href="#修改文章底部的那个带-号的标签" class="headerlink" title="修改文章底部的那个带#号的标签"></a>修改文章底部的那个带#号的标签</h4><p>打开 <code>themes/next/layout/_macro/post.swig</code> 文件,搜索 <code>rel=&quot;tag&quot;&gt;#</code> ,将 <code>#</code> 换成 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p><h4 id="浏览页面的时候显示当前浏览进度"><a href="#浏览页面的时候显示当前浏览进度" class="headerlink" title="浏览页面的时候显示当前浏览进度"></a>浏览页面的时候显示当前浏览进度</h4><p>打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>scrollpercent</code> ,把 <code>false</code> 改为 <code>true</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Scroll percent label in b2t button</span><br><span class="line">scrollpercent: true</span><br></pre></td></tr></table></figure><p>如果想把 <code>top</code>按钮放在侧边栏,打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>b2t</code> ,把 <code>false</code> 改为 <code>true</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Back to top in sidebar</span><br><span class="line"> b2t: true</span><br><span class="line"></span><br><span class="line"> # Scroll percent label in b2t button</span><br><span class="line"> scrollpercent: true</span><br></pre></td></tr></table></figure><h3 id><a href="#" class="headerlink" title=" "></a> </h3><h4 id="每篇文章末尾统一添加“本文结束”标记"><a href="#每篇文章末尾统一添加“本文结束”标记" class="headerlink" title="每篇文章末尾统一添加“本文结束”标记"></a>每篇文章末尾统一添加“本文结束”标记</h4><p>在路径 <code>/themes/next/layout/_macro</code> 中cd新建  <code>passage-end-tag.swig</code> 文件,并添加以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:16px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-thumbs-up&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>打开 <code>themes/next/layout/_macro/post.swig</code> 文件,在<code>post-body</code>之后，<code>post-footer</code>之前（<strong>post-footer之前两个DIV</strong>）添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include &apos;passage-end-tag.swig&apos; %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>然后打开主题配置文件 <code>_config.yml</code>,在末尾添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">enabled: true</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;首页文章间距过款&quot;&gt;&lt;a href=&quot;#首页文章间距过款&quot; class=&quot;headerlink&quot; title=&quot;首页文章间距过款&quot;&gt;&lt;/a&gt;首页文章间距过款&lt;/h4&gt;&lt;p&gt;打开&lt;code&gt;\themes\next\source\css\_schemes\Mist\
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="NexT" scheme="http://yoursite.com/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>Hexo v3.8.0 +NexT.Mist v7.0.1  博客优化(1)</title>
    <link href="http://yoursite.com/post/6cd3ce39.html"/>
    <id>http://yoursite.com/post/6cd3ce39.html</id>
    <published>2019-03-06T12:21:19.000Z</published>
    <updated>2019-09-11T08:29:16.070Z</updated>
    
    <content type="html"><![CDATA[<h4 id="给网站加上问答机器人"><a href="#给网站加上问答机器人" class="headerlink" title="给网站加上问答机器人"></a>给网站加上问答机器人</h4><p>第一种方法，由于不会前端方面的知识，就直接在socia引入url取个巧吧，等以后学会JavaScript之后再写个聊天界面接入网页中吧;</p><p>另外一种方法是新建一个page , hexo new page “robot”,在根目录下产生一个robot文件夹,删除里面的index.md,然后在根目录下的public文件夹里新建一个robot文件夹，将index.html文件拷贝进去（html+css+javascript), hexo d,这也是自定义网页的方法，不过hexo clean后，public文件夹就会被清理，所以要备份你自定义的index.html文件。</p><p>为了节省menu,我也把这个网页设成网址放在social里,不过每天回答的次数有限制。。。。</p><h4 id="网页中插入音乐外链播放器——-layout-macro-sidebar-swig文件"><a href="#网页中插入音乐外链播放器——-layout-macro-sidebar-swig文件" class="headerlink" title="网页中插入音乐外链播放器——-layout/_macro/sidebar.swig文件"></a>网页中插入音乐外链播放器——-layout/_macro/sidebar.swig文件</h4><p>网页云音乐由于版权问题无法生成外链播放器，故选取猫耳FM</p><p>外链HTML代码贴在想要放的位置，我把它放在尺寸自动播放代码里可以调</p><p>我把它插在侧边栏里，对应在layout/_macro/sidebar.swig文件里</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"310"</span> <span class="attr">height</span>=<span class="string">"300"</span> <span class="attr">src</span>=<span class="string">"https://www.missevan.com/albumiframe/1861550?autoplay=false&amp;playlist=true"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="首页文章不全文显示，调成预览模式"><a href="#首页文章不全文显示，调成预览模式" class="headerlink" title="首页文章不全文显示，调成预览模式"></a>首页文章不全文显示，调成预览模式</h4><h5 id="方法1主题配置文件"><a href="#方法1主题配置文件" class="headerlink" title="方法1主题配置文件"></a>方法1主题配置文件</h5><p>进入hexo博客项目的themes/next目录</p><p>用文本编辑器打开_config.yml文件</p><p>搜索”auto_excerpt”,改为true以及设置显示长度</p><h5 id="方法2-在你想要截断的地方加符号"><a href="#方法2-在你想要截断的地方加符号" class="headerlink" title="方法2 在你想要截断的地方加符号"></a>方法2 在你想要截断的地方加符号</h5><p>用md写的话，在文章里加&lt;!1— more —&gt; 会自动截断（我加1是为了不以这结尾）</p><h4 id="主页文章添加阴影效果"><a href="#主页文章添加阴影效果" class="headerlink" title="主页文章添加阴影效果"></a>主页文章添加阴影效果</h4><p>就是文章外面那个框框</p><p>打开<code>\themes\next\source\css\_custom\custom.styl</code>,向里面加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.post &#123;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">  margin-bottom: 60px;</span><br><span class="line">  padding: 25px;</span><br><span class="line">  -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">  -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br></pre></td></tr></table></figure><h4 id="文章出现两次阅读次数——leancloud和busuanzi重复的原因"><a href="#文章出现两次阅读次数——leancloud和busuanzi重复的原因" class="headerlink" title="文章出现两次阅读次数——leancloud和busuanzi重复的原因"></a>文章出现两次阅读次数——leancloud和busuanzi重复的原因</h4><p>1、leancloud(true时首页预览模式和文章页均可看到阅读次数)</p><p>主题_config.yml文件 设置 visitor: false</p><p>valine:<br>  …<br>  visitor: false</p><p>2、busuanzi(true时预览模式阅读次数不可见)</p><p>主题_config.yml文件 设置post_views: false</p><p>busuanzi_count:<br>  ….<br>  post_views: false<br>  post_views_icon:  eye</p><h4 id="底部"><a href="#底部" class="headerlink" title="底部"></a>底部</h4><h5 id="隐藏由Hexo强力驱动、主题—NexT-Mist"><a href="#隐藏由Hexo强力驱动、主题—NexT-Mist" class="headerlink" title="隐藏由Hexo强力驱动、主题—NexT.Mist"></a>隐藏由Hexo强力驱动、主题—NexT.Mist</h5><p>打开<code>Blog/themes/next/layout/_partials/footer.swig</code>，注释掉相应代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--代码 --&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">&lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.footer.powered %&#125;</span><br><span class="line">  &lt;div class=&quot;powered-by&quot;&gt;&#123;#</span><br><span class="line">  #&#125;&#123;&#123; __(&apos;footer.powered&apos;, &apos;&lt;a class=&quot;theme-link&quot; target=&quot;_blank&quot; href=&quot;https://hexo.io&quot;&gt;Hexo&lt;/a&gt;&apos;) &#125;&#125;&#123;#</span><br><span class="line">#&#125;&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.footer.powered and theme.footer.theme.enable %&#125;</span><br><span class="line">  &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.footer.theme.enable %&#125;</span><br><span class="line">  &lt;div class=&quot;theme-info&quot;&gt;&#123;#</span><br><span class="line">  #&#125;&#123;&#123; __(&apos;footer.theme&apos;) &#125;&#125; &amp;mdash; &#123;#</span><br><span class="line">  #&#125;&lt;a class=&quot;theme-link&quot; target=&quot;_blank&quot; href=&quot;https://github.com/iissnan/hexo-theme-next&quot;&gt;&#123;#</span><br><span class="line">    #&#125;NexT.&#123;&#123; theme.scheme &#125;&#125;&#123;#</span><br><span class="line">  #&#125;&lt;/a&gt;&#123;% if theme.footer.theme.version %&#125; v&#123;&#123; theme.version &#125;&#125;&#123;% endif %&#125;&#123;#</span><br><span class="line">#&#125;&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if theme.footer.custom_text %&#125;</span><br><span class="line">  &lt;div class=&quot;footer-custom&quot;&gt;&#123;#</span><br><span class="line">  #&#125;&#123;&#123; theme.footer.custom_text &#125;&#125;&#123;#</span><br><span class="line">#&#125;&lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure><h5 id="添加底部桃心"><a href="#添加底部桃心" class="headerlink" title="添加底部桃心"></a>添加底部桃心</h5><p>打开<code>Blog/themes/next/layout/_partials/footer.swig</code>搜索<code>with-love</code>，改成如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> &lt;span class=&quot;with-love&quot; id=&quot;animate&quot;&gt;</span><br><span class="line">&lt;i class=&quot;fa fa-heart&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;给网站加上问答机器人&quot;&gt;&lt;a href=&quot;#给网站加上问答机器人&quot; class=&quot;headerlink&quot; title=&quot;给网站加上问答机器人&quot;&gt;&lt;/a&gt;给网站加上问答机器人&lt;/h4&gt;&lt;p&gt;第一种方法，由于不会前端方面的知识，就直接在socia引入url取个巧吧，等
      
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
</feed>
